<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_bvr_app_assets_8hpp" kind="file" language="C++">
    <compoundname>BvrAppAssets.hpp</compoundname>
    <includes refid="_bvr_app_8hpp" local="no">BvrApp/BvrApp.hpp</includes>
    <includes local="no">IO/AssetManager.hpp</includes>
    <includes refid="_component_8hpp" local="no">BvrApp/Component.hpp</includes>
    <incdepgraph>
      <node id="18">
        <label>BvrWorld/WorldDefs.hpp</label>
      </node>
      <node id="23">
        <label>State.hpp</label>
        <link refid="_state_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>BvrWorld/Components.hpp</label>
      </node>
      <node id="22">
        <label>variant</label>
      </node>
      <node id="12">
        <label>BvrApp/System.hpp</label>
        <link refid="_system_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Meta/Meta.hpp</label>
      </node>
      <node id="10">
        <label>BvrApp/Component.hpp</label>
        <link refid="_component_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>BvrApp/AppTraits.hpp</label>
        <link refid="_app_traits_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>BvrApp/BvrApp.hpp</label>
        <link refid="_bvr_app_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Hash.h</label>
      </node>
      <node id="9">
        <label>IO/AssetManager.hpp</label>
      </node>
      <node id="13">
        <label>Events/Events.hpp</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="20">
        <label>array</label>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/BvrAppAssets.hpp</label>
        <link refid="_bvr_app_assets_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Utils/DependencyNode.hpp</label>
      </node>
      <node id="4">
        <label>unordered_map</label>
      </node>
      <node id="17">
        <label>Utils/FunctionTraits.hpp</label>
      </node>
      <node id="7">
        <label>Meta/TypeInfo.hpp</label>
      </node>
      <node id="15">
        <label>Utils/Invokable.hpp</label>
      </node>
      <node id="21">
        <label>span</label>
      </node>
      <node id="19">
        <label>BvrApp/Label.hpp</label>
        <link refid="_label_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ResourceMap.hpp</label>
        <link refid="_resource_map_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Asset related functionalify of App class. Such as registering asset types and loaders </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BvrApp/BvrApp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;IO/AssetManager.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BvrApp/Component.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TAssets&lt;T,<sp/>Index&gt;::PumpLifetimeEvents(TAssets&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>PROFILING_FUNCTION_SCOPE;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>e<sp/>:<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_lifetimeEvents)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(e.op)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AssetLifetimeEvent::Op::Created:<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">self</highlight><highlight class="normal">.contains(e.hRes.m_index))<sp/>[[maybe_unused]]</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.emplace(e.hRes.m_index);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_tempAssetEventQueue.emplace_back(</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetEvent&lt;T&gt;{HandleT::Weak(e.hRes.m_index,<sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_pSendFn),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetEvent&lt;T&gt;::Op::Created});</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AssetLifetimeEvent::Op::Updated:<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">self</highlight><highlight class="normal">.contains(e.hRes.m_index))<sp/>[[maybe_unused]]</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.emplace(e.hRes.m_index);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_tempAssetEventQueue.emplace_back(</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetEvent&lt;T&gt;{HandleT::Weak(e.hRes.m_index,<sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_pSendFn),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetEvent&lt;T&gt;::Op::Modified});</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AssetLifetimeEvent::Op::Released:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.Contains(e.hRes))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_tempAssetEventQueue.emplace_back(AssetEvent&lt;T&gt;{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HandleT::Weak(e.hRes.m_index,<sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_pSendFn),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetEvent&lt;T&gt;::Op::Released});</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.erase(e.hRes.m_index);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.ReleaseIdx(e.hRes.m_index);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_lifetimeEvents.clear();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TAssets&lt;T,<sp/>Index&gt;::FlushAssetEventsToGlobalQueue(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>TAssets&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Events&lt;AssetEvent&lt;T&gt;&gt;&amp;<sp/>globalQueue)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>PROFILING_FUNCTION_SCOPE;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>e<sp/>:<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_tempAssetEventQueue)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalQueue.Send(std::move(e));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.m_tempAssetEventQueue.clear();</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="struct_bvr_1_1_app_1a41360306fe67dd16cfb44e9240682702" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/><ref refid="struct_bvr_1_1_app_1a41360306fe67dd16cfb44e9240682702" kindref="member">App::AddAsset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>System<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TPump<sp/>{};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TFlush<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TRes<sp/>=<sp/>Assets&lt;T&gt;;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>Meta::Type::ConversionMethod((HandleUntyped(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Handle&lt;T&gt;&amp;))Convert&lt;T&gt;);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Meta::Type::ConversionMethod((Handle&lt;T&gt;(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HandleUntyped&amp;))Convert&lt;T&gt;);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>CreateResource&lt;TRes&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>TRes*<sp/>pRes<sp/>=<sp/>GetResource&lt;TRes&gt;();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>BvrAssert(pRes,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>a<sp/>resource!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_app_1aa62a0a52fdb3c16fabc767683c2640e8" kindref="member">AddSystem</ref>(<ref refid="namespace_bvr_1_1_default_stages_1a7b12e9f35bc47dfbd3a00e1ac24f6b72" kindref="member">DefaultStages::FIRST</ref>,<sp/><ref refid="struct_bvr_1_1_system_desc" kindref="compound">SystemDesc</ref>{&amp;TRes::PumpLifetimeEvents}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="struct_bvr_1_1_system_desc_1ae0e86e59f998cfe6c47afd9a316f820a" kindref="member">Label</ref>(TypeLabel&lt;TPump&gt;())</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.After(</highlight><highlight class="stringliteral">&quot;FreeUnusedAssets&quot;</highlight><highlight class="normal">_lbl)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Before(TypeLabel&lt;TFlush&gt;()));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_app_1aa62a0a52fdb3c16fabc767683c2640e8" kindref="member">AddSystem</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_bvr_1_1_default_stages_1a7b12e9f35bc47dfbd3a00e1ac24f6b72" kindref="member">DefaultStages::FIRST</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_system_desc" kindref="compound">SystemDesc</ref>{&amp;TRes::FlushAssetEventsToGlobalQueue}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="struct_bvr_1_1_system_desc_1ae0e86e59f998cfe6c47afd9a316f820a" kindref="member">Label</ref>(TypeLabel&lt;TFlush&gt;())</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Before(TypeLabel&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Events&lt;AssetEvent&lt;T&gt;&gt;::UpdateSystem&gt;()));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisterEvent&lt;AssetEvent&lt;T&gt;&gt;();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>GetResource&lt;SAssetManager&gt;()-&gt;RegisterAssetType&lt;T&gt;(*pRes);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>AddComponent&lt;Handle&lt;T&gt;&gt;();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="struct_bvr_1_1_app_1a831a4e4c0c7d96b9f3f23d1dae66d318" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssetT&gt;<sp/><ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/><ref refid="struct_bvr_1_1_app_1a831a4e4c0c7d96b9f3f23d1dae66d318" kindref="member">App::AddLoader</ref>()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>GetResource&lt;SAssetManager&gt;()-&gt;RegisterLoader&lt;T,<sp/>AssetT&gt;();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/BvrAppAssets.hpp"/>
  </compounddef>
</doxygen>
