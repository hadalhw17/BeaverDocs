<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper" kind="struct" language="C++" prot="public">
    <compoundname>Raven::Meta::Detail::AssociativeContainerBinderWrapper</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IteratorBinderBase&lt; std::conditional_t&lt; std::is_const&lt; ConstT &gt;::value, typename AssociativeContainerBinder&lt; T &gt;::CIteratorT, typename AssociativeContainerBinder&lt; T &gt;::IteratorT &gt; &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename ConstT</type>
      </param>
      <param>
        <type>typename Tp</type>
        <defval>std::conditional_t&lt;                  std::is_const&lt;ConstT&gt;::value,                  typename <ref refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt;T&gt;::CIteratorT,                  typename <ref refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt;T&gt;::IteratorT&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a1cd992a7f2395d5ba58ccb92ea070d85" prot="public" static="no">
        <type><ref refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt; T &gt;</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::Base =  AssociativeContainerBinder&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="135" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a260cd9e45320a89fcaa2ceea22303dbd" prot="public" static="no">
        <type>T</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::ContainerT =  T</definition>
        <argsstring></argsstring>
        <name>ContainerT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="136" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1acc28de892089603715687429bafcf5c1" prot="public" static="no">
        <type>typename Base::ValueT</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::ValueT =  typename Base::ValueT</definition>
        <argsstring></argsstring>
        <name>ValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="137" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4edcfb7e1781a256ce222c0783bd19ad" prot="public" static="no">
        <type>typename Base::KeyT</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::KeyT =  typename Base::KeyT</definition>
        <argsstring></argsstring>
        <name>KeyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="138" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ac23077c9c6e20f200809a981b5df9d04" prot="public" static="no">
        <type>typename Base::IteratorT</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::IteratorT =  typename Base::IteratorT</definition>
        <argsstring></argsstring>
        <name>IteratorT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="139" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a0324791b3e197707ebad28ec0dc85575" prot="public" static="no">
        <type>typename Base::CIteratorT</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::CIteratorT =  typename Base::CIteratorT</definition>
        <argsstring></argsstring>
        <name>CIteratorT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="140" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1af86d1a8cd52146d36e72c9111672ebb6" prot="public" static="no">
        <type>IteratorBinderBase&lt; Tp &gt;</type>
        <definition>using Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::IteratorBinderT =  IteratorBinderBase&lt;Tp&gt;</definition>
        <argsstring></argsstring>
        <name>IteratorBinderT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="141" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a9dd98ec83e208fa85615b04d7e7ba8c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ConstT &amp;</type>
        <definition>static ConstT&amp; Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetContainer</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>GetContainer</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="143" column="23" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a369244b3cbb116ad7c2f8c677abecc7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::empty</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>empty</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="147" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ad2acf2c27ac07de44439015aa2b5ff36" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::clear</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>clear</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="151" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1acf61574b2240d023596312b41d58f269" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::begin</definition>
        <argsstring>(void *pContainer, IteratorData &amp;it)</argsstring>
        <name>begin</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="155" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ade8ee5f1022908ee56c542f5c8b212e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::end</definition>
        <argsstring>(void *pContainer, IteratorData &amp;it)</argsstring>
        <name>end</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="159" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a16576df16fd5f6877a8ff4869fecf241" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::size</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>size</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="163" column="28" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a6f3926a21939d1bec6d5bccbca6639a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::erase</definition>
        <argsstring>(void *pContainer, Argument &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="167" column="28" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a488a660a64f1edd2d886790ccfdf7cd2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetKey</definition>
        <argsstring>(IteratorData &amp;posIt)</argsstring>
        <name>GetKey</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>posIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="171" column="24" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a9802383e731bafdb93d2ae9a0c4054cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void&lt; V &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetValue</definition>
        <argsstring>(IteratorData &amp;posIt)</argsstring>
        <name>GetValue</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>posIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="178" column="24" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a2b30843bd6114b86d5842bdd04d6a61f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_void&lt; V &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetValue</definition>
        <argsstring>(IteratorData &amp;it)</argsstring>
        <name>GetValue</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="185" column="24" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4c3ddacadb28ed43dc472c76f722b509" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_void&lt; V &gt;::value &amp;&amp;!std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKey</definition>
        <argsstring>(void *pContainer, Argument &amp;key, IteratorData &amp;outIt)</argsstring>
        <name>InsertKey</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="193" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="193" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4c3ddacadb28ed43dc472c76f722b509" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void&lt; V &gt;::value||std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKey</definition>
        <argsstring>(void *pContainer, Argument &amp;key, IteratorData &amp;outIt)</argsstring>
        <name>InsertKey</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="210" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a86f07863f21d8de3319a021f90e58b26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void&lt; V &gt;::value &amp;&amp;!std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKeyValue</definition>
        <argsstring>(void *pContainer, Argument &amp;key, Argument &amp;value, IteratorData &amp;outIt)</argsstring>
        <name>InsertKeyValue</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="220" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="220" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a86f07863f21d8de3319a021f90e58b26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_void&lt; V &gt;::value||std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKeyValue</definition>
        <argsstring>(void *pContainer, Argument &amp;key, Argument &amp;value, IteratorData &amp;outIt)</argsstring>
        <name>InsertKeyValue</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="239" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a5e7ff8ddb5bfda4b772d410a8c384716" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::find</definition>
        <argsstring>(void *pContainer, Argument &amp;key, IteratorData &amp;outIt)</argsstring>
        <name>find</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="245" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="245" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ac6297b05730ec4958fea2a523a5a76c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::advance</definition>
        <argsstring>(IteratorData &amp;it, std::ptrdiff_t index)</argsstring>
        <name>advance</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="255" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="255" bodyend="257"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>IteratorBinderBase&lt; std::conditional_t&lt;                  std::is_const&lt;ConstT&gt;::value,                  typename AssociativeContainerBinder&lt;T&gt;::CIteratorT,                  typename AssociativeContainerBinder&lt;T&gt;::IteratorT&gt;  &gt;</label>
      </node>
      <node id="1">
        <label>Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;</label>
        <link refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>IteratorBinderBase&lt; std::conditional_t&lt;                  std::is_const&lt;ConstT&gt;::value,                  typename AssociativeContainerBinder&lt;T&gt;::CIteratorT,                  typename AssociativeContainerBinder&lt;T&gt;::IteratorT&gt;  &gt;</label>
      </node>
      <node id="1">
        <label>Raven::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;</label>
        <link refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" line="134" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/AssociativeContainerBinder.hpp" bodystart="134" bodyend="258"/>
    <listofallmembers>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ac6297b05730ec4958fea2a523a5a76c2" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>advance</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a1cd992a7f2395d5ba58ccb92ea070d85" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>Base</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1acf61574b2240d023596312b41d58f269" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>begin</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a0324791b3e197707ebad28ec0dc85575" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>CIteratorT</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ad2acf2c27ac07de44439015aa2b5ff36" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>clear</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a260cd9e45320a89fcaa2ceea22303dbd" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>ContainerT</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a369244b3cbb116ad7c2f8c677abecc7d" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>empty</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ade8ee5f1022908ee56c542f5c8b212e1" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>end</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a6f3926a21939d1bec6d5bccbca6639a4" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>erase</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a5e7ff8ddb5bfda4b772d410a8c384716" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>find</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a9dd98ec83e208fa85615b04d7e7ba8c9" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetContainer</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a488a660a64f1edd2d886790ccfdf7cd2" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetKey</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a9802383e731bafdb93d2ae9a0c4054cc" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetValue</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a2b30843bd6114b86d5842bdd04d6a61f" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetValue</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4c3ddacadb28ed43dc472c76f722b509" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKey</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4c3ddacadb28ed43dc472c76f722b509" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKey</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a86f07863f21d8de3319a021f90e58b26" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKeyValue</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a86f07863f21d8de3319a021f90e58b26" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKeyValue</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1af86d1a8cd52146d36e72c9111672ebb6" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>IteratorBinderT</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ac23077c9c6e20f200809a981b5df9d04" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>IteratorT</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4edcfb7e1781a256ce222c0783bd19ad" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>KeyT</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a16576df16fd5f6877a8ff4869fecf241" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>size</name></member>
      <member refid="struct_raven_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1acc28de892089603715687429bafcf5c1" prot="public" virt="non-virtual"><scope>Raven::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>ValueT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
