<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_raven_1_1_m_t_1_1_c_thread_pool" kind="class" language="C++" prot="public">
    <compoundname>Raven::MT::CThreadPool</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a32ed6c72ee8f00bfc46aa8b408913807" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; Impl &gt;</type>
        <definition>std::shared_ptr&lt;Impl&gt; Raven::MT::CThreadPool::m_pImpl</definition>
        <argsstring></argsstring>
        <name>m_pImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="94" column="19" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a4b01a3cf1fcaacb40f7e488187236321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Raven::MT::CThreadPool::CThreadPool</definition>
        <argsstring>(uint32 numThreads=~0u)</argsstring>
        <name>CThreadPool</name>
        <param>
          <type>uint32</type>
          <declname>numThreads</declname>
          <defval>~0u</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a95572be9ec9b269c99c856bdc0ef970d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Raven::MT::CThreadPool::~CThreadPool</definition>
        <argsstring>()</argsstring>
        <name>~CThreadPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a6b2fd7ed16ed5ca5ea3991767759f327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::MT::CThreadPool::ForceStop</definition>
        <argsstring>()</argsstring>
        <name>ForceStop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="69" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a650183480c146601dc95e9bba8d797e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::MT::CThreadPool::Wait</definition>
        <argsstring>(const TaskState &amp;state)</argsstring>
        <name>Wait</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_m_t_1_1_task_state" kindref="compound">TaskState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="70" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a5d2c6226481f1ea02ad16cbd2be0a132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::MT::CThreadPool::WaitAll</definition>
        <argsstring>()</argsstring>
        <name>WaitAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="71" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a8c31fa20620159376e869e325fc09731" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Raven::MT::CThreadPool::AddWork</definition>
        <argsstring>(T &amp;&amp;w, const TaskContext *pContext=nullptr)</argsstring>
        <name>AddWork</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_m_t_1_1_task_context" kindref="compound">TaskContext</ref> *</type>
          <declname>pContext</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="74" column="6" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a30199e4fbc06b98128aa23241a0a2853" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::MT::CThreadPool::IsBusy</definition>
        <argsstring>() const</argsstring>
        <name>IsBusy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="81" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a9952de9ee15b064350643ad471a86288" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::MT::CThreadPool::IsBusy</definition>
        <argsstring>(const TaskState &amp;state) const</argsstring>
        <name>IsBusy</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_m_t_1_1_task_state" kindref="compound">TaskState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="82" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a141dd2f2cd80135b709bd7af6ed903ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 Raven::MT::CThreadPool::GetThreadCount</definition>
        <argsstring>() const</argsstring>
        <name>GetThreadCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="83" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1aadb4f969f37b4717aab95e13b50b41c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::MT::CThreadPool::Dispatch</definition>
        <argsstring>(uint32 jobCount, uint32 groupSize, std::function&lt; void(SDispatchArgs)&gt; job, TaskContext *pContext=nullptr)</argsstring>
        <name>Dispatch</name>
        <param>
          <type>uint32</type>
          <declname>jobCount</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>groupSize</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="struct_raven_1_1_m_t_1_1_s_dispatch_args" kindref="compound">SDispatchArgs</ref>)&gt;</type>
          <declname>job</declname>
        </param>
        <param>
          <type><ref refid="struct_raven_1_1_m_t_1_1_task_context" kindref="compound">TaskContext</ref> *</type>
          <declname>pContext</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="85" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_raven_1_1_m_t_1_1_c_thread_pool_1a394ec4ed011c4e7a6da7a6448a9f9051" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::MT::CThreadPool::PushWork</definition>
        <argsstring>(std::function&lt; void()&gt; &amp;&amp;w, const TaskContext *pContext)</argsstring>
        <name>PushWork</name>
        <param>
          <type>std::function&lt; void()&gt; &amp;&amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_m_t_1_1_task_context" kindref="compound">TaskContext</ref> *</type>
          <declname>pContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="90" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" line="64" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Threading/ThreadPool.hpp" bodystart="64" bodyend="95"/>
    <listofallmembers>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a8c31fa20620159376e869e325fc09731" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>AddWork</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a4b01a3cf1fcaacb40f7e488187236321" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>CThreadPool</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1aadb4f969f37b4717aab95e13b50b41c9" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>Dispatch</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a6b2fd7ed16ed5ca5ea3991767759f327" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>ForceStop</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a141dd2f2cd80135b709bd7af6ed903ee" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>GetThreadCount</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a30199e4fbc06b98128aa23241a0a2853" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>IsBusy</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a9952de9ee15b064350643ad471a86288" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>IsBusy</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a32ed6c72ee8f00bfc46aa8b408913807" prot="private" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>m_pImpl</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a394ec4ed011c4e7a6da7a6448a9f9051" prot="private" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>PushWork</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a650183480c146601dc95e9bba8d797e9" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>Wait</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a5d2c6226481f1ea02ad16cbd2be0a132" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>WaitAll</name></member>
      <member refid="class_raven_1_1_m_t_1_1_c_thread_pool_1a95572be9ec9b269c99c856bdc0ef970d" prot="public" virt="non-virtual"><scope>Raven::MT::CThreadPool</scope><name>~CThreadPool</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
