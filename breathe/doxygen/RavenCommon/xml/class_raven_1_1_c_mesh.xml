<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_raven_1_1_c_mesh" kind="class" language="C++" prot="public">
    <compoundname>Raven::CMesh</compoundname>
    <includes refid="_mesh_8hpp" local="no">Mesh.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_raven_1_1_c_mesh_1af8d87465202ac994db54c90fd1d39471" prot="private" static="no" mutable="no">
        <type>AABB</type>
        <definition>AABB Raven::CMesh::m_bounds</definition>
        <argsstring></argsstring>
        <name>m_bounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="254" column="29" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_c_mesh_1af7e59cbdf6dd382583c0db67bd122c1a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Raven::CMesh::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="256" column="29" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_c_mesh_1a8d72dd34fce8a7054b2ce6dd506115ff" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_raven_1_1_s_mesh_primitive" kindref="compound">SMeshPrimitive</ref> &gt;</type>
        <definition>std::vector&lt;SMeshPrimitive&gt; Raven::CMesh::m_primitives</definition>
        <argsstring></argsstring>
        <name>m_primitives</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="257" column="13" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_c_mesh_1a2ec9964265d534190f4bb7b92944a718" prot="private" static="no" mutable="no">
        <type><ref refid="struct_raven_1_1_s_vertex_stream_map" kindref="compound">SVertexStreamMap</ref></type>
        <definition>SVertexStreamMap Raven::CMesh::m_streamMap</definition>
        <argsstring></argsstring>
        <name>m_streamMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="258" column="29" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_c_mesh_1a218bfb054bdf934e55276f02a7c2dc77" prot="private" static="no" mutable="no">
        <type><ref refid="struct_raven_1_1_s_vertex_stream" kindref="compound">SVertexStream</ref></type>
        <definition>SVertexStream Raven::CMesh::m_indexStream</definition>
        <argsstring></argsstring>
        <name>m_indexStream</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="259" column="29" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a31e214660cbf15d509f286e3d319fe21" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::CMesh::CMesh</definition>
        <argsstring>(std::string_view name={})</argsstring>
        <name>CMesh</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct empty mesh object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>optional label of the mesh (for debugging) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="156" column="10" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1ae295d63e77e866a63aae167a67413cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Raven::CMesh::~CMesh</definition>
        <argsstring>()=default</argsstring>
        <name>~CMesh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a899ff119f6439362cfcb77499009aa15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Raven::CMesh::CMesh</definition>
        <argsstring>(CMesh &amp;&amp;rhs)=default</argsstring>
        <name>CMesh</name>
        <param>
          <type><ref refid="class_raven_1_1_c_mesh" kindref="compound">CMesh</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1abc623a4d9743ec1aefabb2f44413c629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Raven::CMesh::CMesh</definition>
        <argsstring>(const CMesh &amp;rhs)=default</argsstring>
        <name>CMesh</name>
        <param>
          <type>const <ref refid="class_raven_1_1_c_mesh" kindref="compound">CMesh</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a4cb54549f887a3bde24c586bc381e9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_raven_1_1_c_mesh" kindref="compound">CMesh</ref> &amp;</type>
        <definition>CMesh&amp; Raven::CMesh::operator=</definition>
        <argsstring>(const CMesh &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_raven_1_1_c_mesh" kindref="compound">CMesh</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="161" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1aa84005122266061f1b0f07c94e585fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::CMesh::LoadGeometry</definition>
        <argsstring>(std::vector&lt; SVertex &gt; &amp;&amp;geometry, std::vector&lt; uint32 &gt; &amp;&amp;indices, const HandleUntyped &amp;hMat={})</argsstring>
        <name>LoadGeometry</name>
        <param>
          <type>std::vector&lt; SVertex &gt; &amp;&amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32 &gt; &amp;&amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_handle_untyped" kindref="compound">HandleUntyped</ref> &amp;</type>
          <declname>hMat</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="164" column="6"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1acc3c68ad1ba829bf356d9d2a3b4e1b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::CMesh::AppendGeometry</definition>
        <argsstring>(std::vector&lt; SVertex &gt; &amp;&amp;geometry, std::vector&lt; uint32 &gt; &amp;&amp;indices, const HandleUntyped &amp;hMat={})</argsstring>
        <name>AppendGeometry</name>
        <param>
          <type>std::vector&lt; SVertex &gt; &amp;&amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32 &gt; &amp;&amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_handle_untyped" kindref="compound">HandleUntyped</ref> &amp;</type>
          <declname>hMat</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="168" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a93d7007b2e3898d88fec0937f7859410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 Raven::CMesh::AddInstance</definition>
        <argsstring>(int primitiveId, const HandleUntyped &amp;pMaterial={})</argsstring>
        <name>AddInstance</name>
        <param>
          <type>int</type>
          <declname>primitiveId</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_handle_untyped" kindref="compound">HandleUntyped</ref> &amp;</type>
          <declname>pMaterial</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="171" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1ac73614dae165715b9740984e50a77512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_raven_1_1_c_mesh" kindref="compound">CMesh</ref> &amp;</type>
        <definition>CMesh&amp; Raven::CMesh::SetMaterial</definition>
        <argsstring>(const Handle&lt; SMaterialData &gt; &amp;pMaterial, int primId=-1)</argsstring>
        <name>SetMaterial</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_handle" kindref="compound">Handle</ref>&lt; SMaterialData &gt; &amp;</type>
          <declname>pMaterial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>primId</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="173" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a05b9f1ce3e8a754c37f33bc79cb75bd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>AABB</type>
        <definition>AABB Raven::CMesh::GetBounds</definition>
        <argsstring>() const</argsstring>
        <name>GetBounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="175" column="8" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1ad6e44bc84cfe220f9ea56bf45980c50f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Raven::CMesh::GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="177" column="26" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a019f4a25d41c14b05ef317fa78eccc0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SStreamSlice</type>
        <definition>SStreamSlice Raven::CMesh::GetIndexStream</definition>
        <argsstring>() const</argsstring>
        <name>GetIndexStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="178" column="14" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1ab60e6fa00fb53bb6c9fe27d9180fff3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::span&lt; <ref refid="struct_raven_1_1_s_mesh_primitive" kindref="compound">SMeshPrimitive</ref> const  &gt;</type>
        <definition>std::span&lt;SMeshPrimitive const&gt; Raven::CMesh::GetRenderPrimitives</definition>
        <argsstring>() const</argsstring>
        <name>GetRenderPrimitives</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="184" column="11" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a2a1d1a2291f56b0f55e9df69f4217405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::CMesh::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="188" column="6"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a34c8daf8a75813cf0956dbf749944a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AABB</type>
        <definition>AABB Raven::CMesh::ComputeBounds</definition>
        <argsstring>()</argsstring>
        <name>ComputeBounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="190" column="6"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a6a7bc4748761bc7d76c2413cff49b4f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::CMesh::AddPrimitive</definition>
        <argsstring>(const SMeshPrimitive &amp;prim)</argsstring>
        <name>AddPrimitive</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_s_mesh_primitive" kindref="compound">SMeshPrimitive</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="192" column="6" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1aa20681adae10ee701388357750c145ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_raven_1_1_s_vertex_stream" kindref="compound">SVertexStream</ref> *</type>
        <definition>SVertexStream* Raven::CMesh::FindStream</definition>
        <argsstring>(HashedString s)</argsstring>
        <name>FindStream</name>
        <param>
          <type><ref refid="class_raven_1_1_t_basic_hashed_string" kindref="compound">HashedString</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="196" column="15" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1ad26494e1e60135f58da6a478465edff8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_raven_1_1_s_vertex_stream" kindref="compound">SVertexStream</ref> *</type>
        <definition>const SVertexStream* Raven::CMesh::FindStream</definition>
        <argsstring>(HashedString s) const</argsstring>
        <name>FindStream</name>
        <param>
          <type><ref refid="class_raven_1_1_t_basic_hashed_string" kindref="compound">HashedString</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="200" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1ae735168b83920bc3359e45c511e6c29d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_raven_1_1_s_vertex_stream" kindref="compound">SVertexStream</ref> &amp;</type>
        <definition>SVertexStream&amp; Raven::CMesh::Assure</definition>
        <argsstring>(HashedString name, const size_t elemCount)</argsstring>
        <name>Assure</name>
        <param>
          <type><ref refid="class_raven_1_1_t_basic_hashed_string" kindref="compound">HashedString</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>elemCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes sure that mesh has specified stream with capacity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elemCount</parametername>
</parameternamelist>
<parameterdescription>
<para>requested capacity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vertex stream with at least elemCount elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="209" column="15" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="209" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1af65e4bdc47dab8dd728716258d4415ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; T &gt;</type>
        <definition>std::span&lt;T&gt; Raven::CMesh::AppendAndReturnHead</definition>
        <argsstring>(HashedString name, const size_t elemCount)</argsstring>
        <name>AppendAndReturnHead</name>
        <param>
          <type><ref refid="class_raven_1_1_t_basic_hashed_string" kindref="compound">HashedString</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>elemCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="222" column="11" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="222" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a25798ade94c4cb0ca1b5e316962c13d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; T &gt;</type>
        <definition>std::span&lt;T&gt; Raven::CMesh::AppendAndReturnHead</definition>
        <argsstring>(const size_t elemCount)</argsstring>
        <name>AppendAndReturnHead</name>
        <param>
          <type>const size_t</type>
          <declname>elemCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="230" column="11" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="230" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a8afc41f5d407c9f1e055c5528359299c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_raven_1_1_s_vertex_stream_map" kindref="compound">SVertexStreamMap</ref> &amp;</type>
        <definition>const SVertexStreamMap&amp; Raven::CMesh::GetStreamMap</definition>
        <argsstring>() const</argsstring>
        <name>GetStreamMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="240" column="24" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a6cc06e3653ff525d25d56002a9dc79f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_raven_1_1_s_vertex_stream_map" kindref="compound">SVertexStreamMap</ref> &amp;</type>
        <definition>SVertexStreamMap&amp; Raven::CMesh::GetStreamMap</definition>
        <argsstring>()</argsstring>
        <name>GetStreamMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="242" column="24" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="242" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_raven_1_1_c_mesh_1a84acef56dced85348e2ba098f08504bf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::span&lt; T &gt;</type>
        <definition>std::span&lt;T&gt; Raven::CMesh::AppendAndReturnHead</definition>
        <argsstring>(SVertexStream &amp;stream, const size_t elemCount)</argsstring>
        <name>AppendAndReturnHead</name>
        <param>
          <type><ref refid="struct_raven_1_1_s_vertex_stream" kindref="compound">SVertexStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>elemCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="247" column="11" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="247" bodyend="251"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Geometric representation of the mesh. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" line="152" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Mesh.hpp" bodystart="152" bodyend="260"/>
    <listofallmembers>
      <member refid="class_raven_1_1_c_mesh_1a93d7007b2e3898d88fec0937f7859410" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>AddInstance</name></member>
      <member refid="class_raven_1_1_c_mesh_1a6a7bc4748761bc7d76c2413cff49b4f5" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>AddPrimitive</name></member>
      <member refid="class_raven_1_1_c_mesh_1af65e4bdc47dab8dd728716258d4415ad" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>AppendAndReturnHead</name></member>
      <member refid="class_raven_1_1_c_mesh_1a25798ade94c4cb0ca1b5e316962c13d1" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>AppendAndReturnHead</name></member>
      <member refid="class_raven_1_1_c_mesh_1a84acef56dced85348e2ba098f08504bf" prot="private" virt="non-virtual"><scope>Raven::CMesh</scope><name>AppendAndReturnHead</name></member>
      <member refid="class_raven_1_1_c_mesh_1acc3c68ad1ba829bf356d9d2a3b4e1b2f" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>AppendGeometry</name></member>
      <member refid="class_raven_1_1_c_mesh_1ae735168b83920bc3359e45c511e6c29d" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>Assure</name></member>
      <member refid="class_raven_1_1_c_mesh_1a31e214660cbf15d509f286e3d319fe21" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>CMesh</name></member>
      <member refid="class_raven_1_1_c_mesh_1a899ff119f6439362cfcb77499009aa15" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>CMesh</name></member>
      <member refid="class_raven_1_1_c_mesh_1abc623a4d9743ec1aefabb2f44413c629" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>CMesh</name></member>
      <member refid="class_raven_1_1_c_mesh_1a34c8daf8a75813cf0956dbf749944a4c" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>ComputeBounds</name></member>
      <member refid="class_raven_1_1_c_mesh_1aa20681adae10ee701388357750c145ba" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>FindStream</name></member>
      <member refid="class_raven_1_1_c_mesh_1ad26494e1e60135f58da6a478465edff8" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>FindStream</name></member>
      <member refid="class_raven_1_1_c_mesh_1a05b9f1ce3e8a754c37f33bc79cb75bd1" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>GetBounds</name></member>
      <member refid="class_raven_1_1_c_mesh_1a019f4a25d41c14b05ef317fa78eccc0c" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>GetIndexStream</name></member>
      <member refid="class_raven_1_1_c_mesh_1ad6e44bc84cfe220f9ea56bf45980c50f" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>GetName</name></member>
      <member refid="class_raven_1_1_c_mesh_1ab60e6fa00fb53bb6c9fe27d9180fff3b" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>GetRenderPrimitives</name></member>
      <member refid="class_raven_1_1_c_mesh_1a8afc41f5d407c9f1e055c5528359299c" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>GetStreamMap</name></member>
      <member refid="class_raven_1_1_c_mesh_1a6cc06e3653ff525d25d56002a9dc79f1" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>GetStreamMap</name></member>
      <member refid="class_raven_1_1_c_mesh_1aa84005122266061f1b0f07c94e585fb7" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>LoadGeometry</name></member>
      <member refid="class_raven_1_1_c_mesh_1af8d87465202ac994db54c90fd1d39471" prot="private" virt="non-virtual"><scope>Raven::CMesh</scope><name>m_bounds</name></member>
      <member refid="class_raven_1_1_c_mesh_1a218bfb054bdf934e55276f02a7c2dc77" prot="private" virt="non-virtual"><scope>Raven::CMesh</scope><name>m_indexStream</name></member>
      <member refid="class_raven_1_1_c_mesh_1af7e59cbdf6dd382583c0db67bd122c1a" prot="private" virt="non-virtual"><scope>Raven::CMesh</scope><name>m_name</name></member>
      <member refid="class_raven_1_1_c_mesh_1a8d72dd34fce8a7054b2ce6dd506115ff" prot="private" virt="non-virtual"><scope>Raven::CMesh</scope><name>m_primitives</name></member>
      <member refid="class_raven_1_1_c_mesh_1a2ec9964265d534190f4bb7b92944a718" prot="private" virt="non-virtual"><scope>Raven::CMesh</scope><name>m_streamMap</name></member>
      <member refid="class_raven_1_1_c_mesh_1a4cb54549f887a3bde24c586bc381e9ec" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>operator=</name></member>
      <member refid="class_raven_1_1_c_mesh_1a2a1d1a2291f56b0f55e9df69f4217405" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>Reset</name></member>
      <member refid="class_raven_1_1_c_mesh_1ac73614dae165715b9740984e50a77512" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>SetMaterial</name></member>
      <member refid="class_raven_1_1_c_mesh_1ae295d63e77e866a63aae167a67413cb4" prot="public" virt="non-virtual"><scope>Raven::CMesh</scope><name>~CMesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
