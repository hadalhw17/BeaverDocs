<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_raven_1_1_meta_1_1_type" kind="class" language="C++" prot="public">
    <compoundname>Raven::Meta::Type</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_raven_1_1_meta_1_1_type_1a24e0a29881afdfe2e818d0a36d968e98" prot="private" static="no" mutable="no">
        <type><ref refid="struct_raven_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData* Raven::Meta::Type::m_pTypeData</definition>
        <argsstring></argsstring>
        <name>m_pTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="82" column="14" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a2ccde3498390361ec6da54ed9b158611" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Type::Type</definition>
        <argsstring>()</argsstring>
        <name>Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="25" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1add43a02cbd9fc5928750694e3b86dc31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Type::Type</definition>
        <argsstring>(TypeData *pData)</argsstring>
        <name>Type</name>
        <param>
          <type><ref refid="struct_raven_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="26" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1afbcd791bc93866800c09d0a4fb419aa7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Raven::Meta::Type::operator==</definition>
        <argsstring>(const Type &amp;lhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="28" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a5e9f9daa9898ee5676f46f65f3eff027" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr Raven::Meta::Type::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="31" column="22" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a0a886f6c80c1159b92f7cd1730615563" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_raven_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>const TypeData* Raven::Meta::Type::GetTypeData</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="33" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a10297822df3966742fc78473a71e6b91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_raven_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData* Raven::Meta::Type::GetTypeData</definition>
        <argsstring>()</argsstring>
        <name>GetTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="35" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a16406d0b9dc4f509fcce1c2ec0b79d9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::Meta::Type::SetPropertyValue</definition>
        <argsstring>(std::string_view name, const Instance &amp;obj, Argument val)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="47" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a8e015f327d5ca888f4c912c74877e9cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="51" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a2be56fcace94ea537374a7b44cbc2b64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsClass</definition>
        <argsstring>() const</argsstring>
        <name>IsClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="52" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a0481aca27dd56dc48c48526dc3ee8926" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsEnum</definition>
        <argsstring>() const</argsstring>
        <name>IsEnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="53" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a2b384f69ed5b6689cd8b8be4333bf32e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsArray</definition>
        <argsstring>() const</argsstring>
        <name>IsArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="54" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a4e99eac2bc63f564cd93210dc0c931ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsPointer</definition>
        <argsstring>() const</argsstring>
        <name>IsPointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="55" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a6ae84c50acb60e13e59273eabf8545be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsArithmetic</definition>
        <argsstring>() const</argsstring>
        <name>IsArithmetic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="56" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a8e2cc13600fffc8bb11463620d064544" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsSequentialContainer</definition>
        <argsstring>() const</argsstring>
        <name>IsSequentialContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="57" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a02d629fed5f0dfe6fe8120a79bd657ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Type::IsAssociativeContainer</definition>
        <argsstring>() const</argsstring>
        <name>IsAssociativeContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="58" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a163c72cc7965eef039832070be1cfebd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_enum" kindref="compound">Enum</ref></type>
        <definition>Enum Raven::Meta::Type::GetEnum</definition>
        <argsstring>() const</argsstring>
        <name>GetEnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="61" column="42"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a1d7bffee08534e2f5c14939729edf6b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Raven::Meta::Type::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="63" column="42"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a156454f2cf2f80a1a40d48b4222c65fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view Raven::Meta::Type::GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="64" column="42"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a1226cedf808575e4589bd3028c1146cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_raven_1_1_meta_1_1_property" kindref="compound">Property</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;Property&gt;&amp; Raven::Meta::Type::GetProperties</definition>
        <argsstring>() const</argsstring>
        <name>GetProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="65" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a4eb948aba19e4bc5beb98642a2d70352" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Raven::Meta::Type::Is</definition>
        <argsstring>() const</argsstring>
        <name>Is</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="67" column="32" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a179957ff700f11ac03a8fe3c9b1750c0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Raven::Meta::Type::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="70" column="28" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a9cbd9f16f3c8dcecc2d75c8fa67158a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
        <definition>Property Raven::Meta::Type::GetProperty</definition>
        <argsstring>(std::string_view name) const</argsstring>
        <name>GetProperty</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="74" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1ad6795b4ebe9ce3956b7edb5e78cd5aaf" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Raven::Meta::Type::CreateVariant</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CreateVariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="76" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1afd16718686beac9c35a422154e0d8586" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::Meta::Type::CreateWrappedValue</definition>
        <argsstring>(const Argument &amp;arg, Variant &amp;out) const noexcept</argsstring>
        <name>CreateWrappedValue</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1ace1fb42e690c35274b42e017e8fee18a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Raven::Meta::Type::Visit</definition>
        <argsstring>(Visitor &amp;)</argsstring>
        <name>Visit</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_visitor" kindref="compound">Visitor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="79" column="10" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="79" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a94594f19bd74c35dceacda95c48dae36" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>static Type Raven::Meta::Type::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="37" column="30" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_type_1a5ffeb9d5174bfe1e84c19801395acb92" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Raven::Meta::Type::SetValue</definition>
        <argsstring>(const T &amp;val, Instance instance)</argsstring>
        <name>SetValue</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_instance" kindref="compound">Instance</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="45" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="23" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="23" bodyend="83"/>
    <listofallmembers>
      <member refid="class_raven_1_1_meta_1_1_type_1ad6795b4ebe9ce3956b7edb5e78cd5aaf" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>CreateVariant</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1afd16718686beac9c35a422154e0d8586" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>CreateWrappedValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a94594f19bd74c35dceacda95c48dae36" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>Get</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a163c72cc7965eef039832070be1cfebd" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetEnum</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a1226cedf808575e4589bd3028c1146cb" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetProperties</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a9cbd9f16f3c8dcecc2d75c8fa67158a4" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetProperty</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a1d7bffee08534e2f5c14939729edf6b8" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetSize</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a0a886f6c80c1159b92f7cd1730615563" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetTypeData</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a10297822df3966742fc78473a71e6b91" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetTypeData</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a156454f2cf2f80a1a40d48b4222c65fb" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>GetTypeName</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a4eb948aba19e4bc5beb98642a2d70352" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>Is</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a6ae84c50acb60e13e59273eabf8545be" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsArithmetic</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a2b384f69ed5b6689cd8b8be4333bf32e" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsArray</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a02d629fed5f0dfe6fe8120a79bd657ad" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsAssociativeContainer</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a2be56fcace94ea537374a7b44cbc2b64" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsClass</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a8e015f327d5ca888f4c912c74877e9cc" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsEmpty</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a0481aca27dd56dc48c48526dc3ee8926" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsEnum</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a4e99eac2bc63f564cd93210dc0c931ec" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsPointer</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a8e2cc13600fffc8bb11463620d064544" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsSequentialContainer</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a179957ff700f11ac03a8fe3c9b1750c0" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>IsValid</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a24e0a29881afdfe2e818d0a36d968e98" prot="private" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>m_pTypeData</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a5e9f9daa9898ee5676f46f65f3eff027" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>operator bool</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1afbcd791bc93866800c09d0a4fb419aa7" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>operator==</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a16406d0b9dc4f509fcce1c2ec0b79d9c" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>SetPropertyValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a5ffeb9d5174bfe1e84c19801395acb92" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>SetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1a2ccde3498390361ec6da54ed9b158611" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>Type</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1add43a02cbd9fc5928750694e3b86dc31" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>Type</name></member>
      <member refid="class_raven_1_1_meta_1_1_type_1ace1fb42e690c35274b42e017e8fee18a" prot="public" virt="non-virtual"><scope>Raven::Meta::Type</scope><name>Visit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
