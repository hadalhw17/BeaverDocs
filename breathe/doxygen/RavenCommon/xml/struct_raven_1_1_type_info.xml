<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_raven_1_1_type_info" kind="struct" language="C++" prot="public">
    <compoundname>Raven::TypeInfo</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_raven_1_1_type_info_1a1f246d899e8157997c51a9d167cb1afb" prot="private" static="no" mutable="no">
        <type><ref refid="class_raven_1_1_t_basic_hashed_string" kindref="compound">Raven::TTypeName</ref></type>
        <definition>Raven::TTypeName Raven::TypeInfo::m_typeName</definition>
        <argsstring></argsstring>
        <name>m_typeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="121" column="18" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_raven_1_1_type_info_1a5de9b041cb1c6aa643487ca43f1e9e2d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr Raven::TypeInfo::TypeInfo</definition>
        <argsstring>(Detail::TypeConstructorProxy&lt; Type &gt;) noexcept</argsstring>
        <name>TypeInfo</name>
        <param>
          <type><ref refid="struct_raven_1_1_detail_1_1_type_constructor_proxy" kindref="compound">Detail::TypeConstructorProxy</ref>&lt; Type &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="94" column="11" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_type_info_1a7780922604cc652c758c4e310d15c970" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr std::string_view</type>
        <definition>constexpr std::string_view Raven::TypeInfo::GetName</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="98" column="36" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_type_info_1a554643120bbe420fe660b0f862a0f293" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr Raven::TTypeHash</type>
        <definition>constexpr Raven::TTypeHash Raven::TypeInfo::GetHash</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="102" column="36" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_type_info_1a3cc074c67c25edbec744170eb2e1c1cb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Raven::TypeInfo::operator==</definition>
        <argsstring>(const TypeInfo &amp;info) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="106" column="17" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_type_info_1a00c5ffbdf55dad4db82b6e3a94bcdc85" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Raven::TypeInfo::operator&gt;</definition>
        <argsstring>(const TypeInfo &amp;info) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="109" column="17" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_type_info_1acce7f4e02758de0a5d6a1f9f1514147b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Raven::TypeInfo::operator&lt;</definition>
        <argsstring>(const TypeInfo &amp;info) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_raven_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="112" column="12" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_type_info_1a84398bb2784f08d9fe1b2ac8fffee4cb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr Raven::TypeInfo::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="116" column="12" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="116" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" line="92" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeInfo.hpp" bodystart="92" bodyend="122"/>
    <listofallmembers>
      <member refid="struct_raven_1_1_type_info_1a554643120bbe420fe660b0f862a0f293" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>GetHash</name></member>
      <member refid="struct_raven_1_1_type_info_1a7780922604cc652c758c4e310d15c970" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>GetName</name></member>
      <member refid="struct_raven_1_1_type_info_1a1f246d899e8157997c51a9d167cb1afb" prot="private" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>m_typeName</name></member>
      <member refid="struct_raven_1_1_type_info_1a84398bb2784f08d9fe1b2ac8fffee4cb" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>operator bool</name></member>
      <member refid="struct_raven_1_1_type_info_1acce7f4e02758de0a5d6a1f9f1514147b" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>operator&lt;</name></member>
      <member refid="struct_raven_1_1_type_info_1a3cc074c67c25edbec744170eb2e1c1cb" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>operator==</name></member>
      <member refid="struct_raven_1_1_type_info_1a00c5ffbdf55dad4db82b6e3a94bcdc85" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>operator&gt;</name></member>
      <member refid="struct_raven_1_1_type_info_1a5de9b041cb1c6aa643487ca43f1e9e2d" prot="public" virt="non-virtual"><scope>Raven::TypeInfo</scope><name>TypeInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
