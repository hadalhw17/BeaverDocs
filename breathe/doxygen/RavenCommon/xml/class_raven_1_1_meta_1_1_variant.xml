<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_raven_1_1_meta_1_1_variant" kind="class" language="C++" prot="public">
    <compoundname>Raven::Meta::Variant</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_raven_1_1_meta_1_1_variant_1a6f10c675ebbcf347911e576a5b3b7988" prot="private" static="no" mutable="no">
        <type>VariantData</type>
        <definition>VariantData Raven::Meta::Variant::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="230" column="28" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_meta_1_1_variant_1ab351723294908145a3642525738ea730" prot="private" static="no" mutable="no">
        <type>VariantPolicyFN</type>
        <definition>VariantPolicyFN Raven::Meta::Variant::m_policy</definition>
        <argsstring></argsstring>
        <name>m_policy</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="231" column="28" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1aec7b7c40e19a3330017a327b360726d8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Variant::Variant</definition>
        <argsstring>() noexcept</argsstring>
        <name>Variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="24" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a4c3354a511f0e8083b0d822c49e4f5c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>DecayVariantT&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Raven::Meta::Variant::Variant</definition>
        <argsstring>(T &amp;&amp;obj) noexcept</argsstring>
        <name>Variant</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="26" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1ab2e3ae4d9c89bc1febc1b6e2dfcd7dec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Variant::Variant</definition>
        <argsstring>(const Variant &amp;item) noexcept</argsstring>
        <name>Variant</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="33" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a46c74cd05eebaaa09e81d92478f2b34a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Variant::Variant</definition>
        <argsstring>(Variant &amp;&amp;item) noexcept</argsstring>
        <name>Variant</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="37" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1ac1060a103d30650a6d0e087d41953f03" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
        <definition>Variant&amp; Raven::Meta::Variant::operator=</definition>
        <argsstring>(const Variant &amp;item) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="42" column="13" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1ad540fb5aefc29f359a176e3581554ea5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
        <definition>Variant&amp; Raven::Meta::Variant::operator=</definition>
        <argsstring>(Variant &amp;&amp;item) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="50" column="13" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="50" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a1cf9b135e912fec8f52a2c4325c5f651" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Variant::~Variant</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="62" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a3baf860481a728d31155452c56f4484c" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Variant::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="66" column="15" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a545dd521e6c385fdb617154f7aad15f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; Raven::Meta::Variant::GetValue</definition>
        <argsstring>() const</argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="70" column="32" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1ae65cb7e0a1cd4addd9ea6ec4266bb781" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Raven::Meta::Variant::CreateWrappedValue</definition>
        <argsstring>(const Type &amp;wrappedType) const</argsstring>
        <name>CreateWrappedValue</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>wrappedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="75" column="20" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a123e76921cdce9477d6726d5a104d7d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Raven::Meta::Variant::ExtractWrappedValue</definition>
        <argsstring>() const</argsstring>
        <name>ExtractWrappedValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="83" column="20" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1aa45fc1963730c21f4c4a31717eec4ee7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; Raven::Meta::Variant::GetValue</definition>
        <argsstring>()</argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="89" column="26" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a68f96524444ac76b7138e7ee0f94688d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Raven::Meta::Variant::GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="94" column="17" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a8226ea5542f3d42e634eaa2d226a74be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::IsType</definition>
        <argsstring>() const</argsstring>
        <name>IsType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="100" column="29" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a7873ef9463a25342f667e7d09c9510e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::IsEnum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsEnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="104" column="17" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1abc992ea030ae561eb5990ea00b70f868" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* Raven::Meta::Variant::GetRawPtr</definition>
        <argsstring>() const</argsstring>
        <name>GetRawPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="106" column="16" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a746d4fb7b346a339cd528cc511771c7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::operator==</definition>
        <argsstring>(const Variant &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="112" column="10" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1ab2d9fb9e42533186d30303b0203cd9f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Raven::Meta::Variant::Cast</definition>
        <argsstring>(bool *bOk) const</argsstring>
        <name>Cast</name>
        <param>
          <type>bool *</type>
          <declname>bOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="118" column="19" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="118" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1adac91a9024de35b8d272bbdc1de28688" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::Cast</definition>
        <argsstring>(const Type &amp;dstType)</argsstring>
        <name>Cast</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>dstType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="144" column="10" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1af0fdcbd7fe310455f6bdbd8304593716" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::Cast</definition>
        <argsstring>(const Type &amp;dstType, Variant &amp;dstVariant) const</argsstring>
        <name>Cast</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>dstVariant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="146" column="10" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="146" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a7108cbecf3bbb001165c040d0d48667c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Dst</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::TryBasicCast</definition>
        <argsstring>(Dst &amp;res) const</argsstring>
        <name>TryBasicCast</name>
        <param>
          <type>Dst &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="204" column="22" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a420c5134df28fe8bb4d4b122cd0d6c14" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant_sequential_view" kindref="compound">VariantSequentialView</ref></type>
        <definition>VariantSequentialView Raven::Meta::Variant::CreateSequentialView</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CreateSequentialView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="208" column="35" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="420" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a6f09e94c4c43c8fccf5abfb14ab04910" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_variant_associative_view" kindref="compound">VariantAssociativeView</ref></type>
        <definition>VariantAssociativeView Raven::Meta::Variant::CreateAssociativeView</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CreateAssociativeView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="209" column="35" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="427" bodyend="431"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_variant_1a675845fdb791ca80391c1eb706ae543a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Raven::Meta::Variant::Cast</definition>
        <argsstring>(T &amp;dst) const</argsstring>
        <name>Cast</name>
        <param>
          <type>T &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="213" column="29" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="213" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_raven_1_1_meta_1_1_variant_1a00f45348106d87aa7d125fb39b0565d4" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* unsafe_variant_cast</definition>
        <argsstring>(Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="226" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="friend" id="class_raven_1_1_meta_1_1_variant_1a605105ee3e61d0a15c0914eeaac5e487" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* unsafe_variant_cast</definition>
        <argsstring>(const Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="228" column="27" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="241" bodyend="244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="22" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="22" bodyend="232"/>
    <listofallmembers>
      <member refid="class_raven_1_1_meta_1_1_variant_1ab2d9fb9e42533186d30303b0203cd9f9" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Cast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1adac91a9024de35b8d272bbdc1de28688" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Cast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1af0fdcbd7fe310455f6bdbd8304593716" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Cast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a675845fdb791ca80391c1eb706ae543a" prot="private" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Cast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a6f09e94c4c43c8fccf5abfb14ab04910" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>CreateAssociativeView</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a420c5134df28fe8bb4d4b122cd0d6c14" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>CreateSequentialView</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1ae65cb7e0a1cd4addd9ea6ec4266bb781" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>CreateWrappedValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a123e76921cdce9477d6726d5a104d7d4" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>ExtractWrappedValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1abc992ea030ae561eb5990ea00b70f868" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>GetRawPtr</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a68f96524444ac76b7138e7ee0f94688d" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>GetType</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a545dd521e6c385fdb617154f7aad15f1" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>GetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1aa45fc1963730c21f4c4a31717eec4ee7" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>GetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a7873ef9463a25342f667e7d09c9510e4" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>IsEnum</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a8226ea5542f3d42e634eaa2d226a74be" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>IsType</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a6f10c675ebbcf347911e576a5b3b7988" prot="private" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>m_data</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1ab351723294908145a3642525738ea730" prot="private" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>m_policy</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a3baf860481a728d31155452c56f4484c" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>operator bool</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1ac1060a103d30650a6d0e087d41953f03" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>operator=</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1ad540fb5aefc29f359a176e3581554ea5" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>operator=</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a746d4fb7b346a339cd528cc511771c7e" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>operator==</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a7108cbecf3bbb001165c040d0d48667c" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>TryBasicCast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a00f45348106d87aa7d125fb39b0565d4" prot="private" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>unsafe_variant_cast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a605105ee3e61d0a15c0914eeaac5e487" prot="private" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>unsafe_variant_cast</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1aec7b7c40e19a3330017a327b360726d8" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Variant</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a4c3354a511f0e8083b0d822c49e4f5c2" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Variant</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1ab2e3ae4d9c89bc1febc1b6e2dfcd7dec" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Variant</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a46c74cd05eebaaa09e81d92478f2b34a" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>Variant</name></member>
      <member refid="class_raven_1_1_meta_1_1_variant_1a1cf9b135e912fec8f52a2c4325c5f651" prot="public" virt="non-virtual"><scope>Raven::Meta::Variant</scope><name>~Variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
