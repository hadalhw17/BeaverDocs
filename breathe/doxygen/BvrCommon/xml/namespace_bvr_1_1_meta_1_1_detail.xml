<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_meta_1_1_detail" kind="namespace" language="C++">
    <compoundname>Bvr::Meta::Detail</compoundname>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from" prot="public">Bvr::Meta::Detail::CastFrom</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum" prot="public">Bvr::Meta::Detail::CastFromEnum</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_default_caster" prot="public">Bvr::Meta::Detail::DefaultCaster</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_empty_caster" prot="public">Bvr::Meta::Detail::EmptyCaster</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_object_memory_storage" prot="public">Bvr::Meta::Detail::ObjectMemoryStorage</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_remove_all_pointers" prot="public">Bvr::Meta::Detail::RemoveAllPointers</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_remove_all_pointers_3_01_t_00_01std_1_1enable__if__t_3_01std_171676dd77f4cce0eabd5a40f93a089d" prot="public">Bvr::Meta::Detail::RemoveAllPointers&lt; T, std::enable_if_t&lt; std::is_pointer_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_remove_all_pointers_except_one" prot="public">Bvr::Meta::Detail::RemoveAllPointersExceptOne</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_remove_all_pointers_except_one_3_01_t_00_01std_1_1enable__if_d1333ed47a5ddd7f3828f7ffef4a6ddc" prot="public">Bvr::Meta::Detail::RemoveAllPointersExceptOne&lt; T, std::enable_if_t&lt; std::is_pointer_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_raw_type" prot="public">Bvr::Meta::Detail::RawType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_raw_type_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__poin9436a7cf15a31eb8f9403a369798d069" prot="public">Bvr::Meta::Detail::RawType&lt; T, std::enable_if_t&lt; std::is_pointer_v&lt; T &gt; &amp;&amp;!IsFunctionPtr&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_raw_type_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__refeaa579c6759de9c3c8c68ffac5191b786" prot="public">Bvr::Meta::Detail::RawType&lt; T, std::enable_if_t&lt; std::is_reference_v&lt; T &gt; &amp;&amp;!IsFunctionPtr&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_raw_address_of_impl" prot="public">Bvr::Meta::Detail::RawAddressOfImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01bool_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; bool &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01char_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; char &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1int8__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::int8_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1uint8__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::uint8_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1int16__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::int16_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1uint16__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::uint16_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1int32__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::int32_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1uint32__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::uint32_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1int64__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::int64_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1uint64__t_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::uint64_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01float_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; float &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01double_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; double &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_3_01std_1_1string_01_4" prot="public">Bvr::Meta::Detail::CastFrom&lt; std::string &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_sequential_container_binder" prot="public">Bvr::Meta::Detail::SequentialContainerBinder</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder" prot="public">Bvr::Meta::Detail::AssociativeContainerBinder</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_has_is_valid_alias" prot="public">Bvr::Meta::Detail::HasIsValidAlias</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_value" prot="public">Bvr::Meta::Detail::AssociativeContainerValue</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base" prot="public">Bvr::Meta::Detail::AssociativeContainerBinderBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map" prot="public">Bvr::Meta::Detail::AssociativeContainerBinderBaseMap</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set" prot="public">Bvr::Meta::Detail::AssociativeContainerBinderBaseSet</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1unordered__set_3_01_t731f68f4f41c364b23f42f6d82a9b939" prot="public">Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1unordered__map_3_01_teb83116edf7e3131bf7684ec862aab67" prot="public">Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_map&lt; T, U, Hash, KeyEqual, Allocator &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1set_3_01_t_00_01_compare_00_01_allocator_01_4_01_4" prot="public">Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::set&lt; T, Compare, Allocator &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1map_3_01_t_00_01_u_00a1de3599e113690c87cc0517d0d7a52a" prot="public">Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U, Compare, Allocator &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper" prot="public">Bvr::Meta::Detail::AssociativeContainerBinderWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_invalid_wrapped_type" prot="public">Bvr::Meta::Detail::InvalidWrappedType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_arg_traits" prot="public">Bvr::Meta::Detail::ArgTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_arg_traits_3_01_type_list_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Meta::Detail::ArgTraits&lt; TypeList&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_method_traits" prot="public">Bvr::Meta::Detail::TMethodTraits</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_data" prot="public">Bvr::Meta::Detail::EnumData</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" prot="public">Bvr::Meta::Detail::EnumWrapperBase</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper" prot="public">Bvr::Meta::Detail::EnumWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_sequential_container_binder_dynamic" prot="public">Bvr::Meta::Detail::SequentialContainerBinderDynamic</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_sequential_container_binder_direct_access" prot="public">Bvr::Meta::Detail::SequentialContainerBinderDirectAccess</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_sequential_container_binder_3_01std_1_1vector_3_01_t_00_01_alloc_01_4_01_4" prot="public">Bvr::Meta::Detail::SequentialContainerBinder&lt; std::vector&lt; T, Alloc &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_sequential_container_binder_wrapper" prot="public">Bvr::Meta::Detail::SequentialContainerBinderWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_template_argument_extractor" prot="public">Bvr::Meta::Detail::TemplateArgumentExtractor</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_template_argument_extractor_3_01_t_3_01_args_8_8_8_01_4_01_4" prot="public">Bvr::Meta::Detail::TemplateArgumentExtractor&lt; T&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_wrapper_type_meta" prot="public">Bvr::Meta::Detail::WrapperTypeMeta</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_create_empty_variant_policy" prot="public">Bvr::Meta::Detail::CreateEmptyVariantPolicy</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_prop__" prot="public">Bvr::Meta::Detail::Prop_</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_enum__" prot="public">Bvr::Meta::Detail::Enum_</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_meth__" prot="public">Bvr::Meta::Detail::Meth_</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a5617422f9121b4823dfbcd10a8aa927c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_default_caster" kindref="compound">DefaultCaster</ref>&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum" kindref="compound">CastFromEnum</ref>&lt; T &gt; &gt;</type>
        <definition>using Bvr::Meta::Detail::EnumCaster = typedef DefaultCaster&lt;T, CastFromEnum&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>EnumCaster</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="21" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_iterator_binder_8hpp_1a488c0af2190040c17527e97724ba98d6" prot="public" static="no">
        <type>std::byte[sizeof(double)]</type>
        <definition>using Bvr::Meta::Detail::IteratorData = typedef std::byte[sizeof(double)]</definition>
        <argsstring></argsstring>
        <name>IteratorData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/IteratorBinder.hpp" line="5" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/IteratorBinder.hpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1a8c74fc7f1271478d0ba48e4d6a423874" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_remove_all_pointers" kindref="compound">RemoveAllPointers</ref>&lt; T &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::Detail::RemoveAllPointersT = typedef typename RemoveAllPointers&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>RemoveAllPointersT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="15" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1a51a2f0daac8607220a9cbf9dc690c7f6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_remove_all_pointers_except_one" kindref="compound">RemoveAllPointersExceptOne</ref>&lt; T &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::Detail::RemoveAllPointersExceptOneT = typedef typename RemoveAllPointersExceptOne&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>RemoveAllPointersExceptOneT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="32" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1ad6183e7d32ba47078ad3e1dedda1c2d9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, std::is_pointer_v&lt; T &gt; &amp;&amp;std::is_function_v&lt; std::remove_pointer_t&lt; T &gt; &gt;&gt;</type>
        <definition>using Bvr::Meta::Detail::IsFunctionPtr = typedef std::integral_constant&lt; bool, std::is_pointer_v&lt;T&gt; &amp;&amp; std::is_function_v&lt;std::remove_pointer_t&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>IsFunctionPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="36" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1a4e12702a6e5432551840fa9839f3488f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_raw_type" kindref="compound">RawType</ref>&lt; T &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::Detail::RawTypeT = typedef typename RawType&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>RawTypeT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="56" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1acf166572eb00f6a7ffa4a43f04ef8270" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::add_pointer_t&lt; RemoveAllPointersT&lt; T &gt; &gt;</type>
        <definition>using Bvr::Meta::Detail::NormalReturnT = typedef typename std::add_pointer_t&lt;RemoveAllPointersT&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>NormalReturnT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="59" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1a031c3a7cbee1ea575f6da6e8753eff86" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>std::remove_reference_t&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; IsFunctionPtr&lt; RemoveAllPointersExceptOneT&lt; Tp &gt; &gt;::value, std::add_pointer_t&lt; RemoveAllPointersExceptOneT&lt; Tp &gt; &gt;, NormalReturnT&lt; Tp &gt; &gt;</type>
        <definition>using Bvr::Meta::Detail::RawAddressofReturnType = typedef std::conditional_t&lt; IsFunctionPtr&lt;RemoveAllPointersExceptOneT&lt;Tp&gt; &gt;::value, std::add_pointer_t&lt;RemoveAllPointersExceptOneT&lt;Tp&gt; &gt;, NormalReturnT&lt;Tp&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>RawAddressofReturnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="62" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_meta_2_utils_8hpp_1a51dc73ad78bd883aa63d7b29e8da2639" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>RawAddressofReturnType&lt; T &gt;</type>
        <definition>using Bvr::Meta::Detail::RawAddressofReturnTypeT = typedef RawAddressofReturnType&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>RawAddressofReturnTypeT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="67" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1afa20aff544082da30b59046e43809e60" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, !<ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_has_is_valid_alias" kindref="compound">HasIsValidAlias</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_sequential_container_binder" kindref="compound">SequentialContainerBinder</ref>&lt; Tp &gt; &gt;::Value &gt;</type>
        <definition>using Bvr::Meta::Detail::IsSequentialContainer = typedef std::integral_constant&lt; bool, !HasIsValidAlias&lt;SequentialContainerBinder&lt;Tp&gt; &gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>IsSequentialContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="25" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a20e5c080d1aa3531ba65c6f43e91681f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, !<ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_has_is_valid_alias" kindref="compound">HasIsValidAlias</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt; Tp &gt; &gt;::Value &gt;</type>
        <definition>using Bvr::Meta::Detail::IsAssociativeContainer = typedef std::integral_constant&lt; bool, !HasIsValidAlias&lt;AssociativeContainerBinder&lt;Tp&gt; &gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>IsAssociativeContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="30" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1ad2a561102c74d78b61a6bcd76e1ad045" prot="public" static="no">
        <type>bool(*)(EVariantPolicyOP, const VariantData &amp;data, <ref refid="struct_bvr_1_1_meta_1_1_argument_wrapper" kindref="compound">ArgumentWrapper</ref>)</type>
        <definition>using Bvr::Meta::Detail::VariantPolicyFN = typedef bool (*)(EVariantPolicyOP, const VariantData&amp; data, ArgumentWrapper)</definition>
        <argsstring></argsstring>
        <name>VariantPolicyFN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="12" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_wrapper_binder_8hpp_1a051e93a792e7b992ad949eac1f3861ed" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_wrapper_binder" kindref="compound">WrapperBinder</ref>&lt; typename std::remove_cv_t&lt; typename std::remove_reference_t&lt; T &gt; &gt;&gt;::WrappedT</type>
        <definition>using Bvr::Meta::Detail::WrapperBinderT = typedef typename WrapperBinder&lt;typename std::remove_cv_t&lt; typename std::remove_reference_t&lt;T&gt; &gt;&gt;::WrappedT</definition>
        <argsstring></argsstring>
        <name>WrapperBinderT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" line="53" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_wrapper_binder_8hpp_1a170c09bc725f9d2e8351c1c0cda5da35" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, !std::is_same&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_invalid_wrapped_type" kindref="compound">InvalidWrappedType</ref>, WrapperBinderT&lt; T &gt; &gt;::value &gt;</type>
        <definition>using Bvr::Meta::Detail::IsWrapper = typedef std::integral_constant&lt; bool, !std::is_same&lt;InvalidWrappedType, WrapperBinderT&lt;T&gt; &gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>IsWrapper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" line="57" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_wrapper_binder_8hpp_1a9dcac2db4272b476b86002a09d1171ec" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; IsWrapper&lt; T &gt;::value, RawAddressofReturnTypeT&lt; WrapperBinderT&lt; T &gt; &gt;, RawAddressofReturnTypeT&lt; T &gt; &gt;</type>
        <definition>using Bvr::Meta::Detail::WrapperAddressReturnType = typedef std::conditional_t&lt;IsWrapper&lt;T&gt;::value, RawAddressofReturnTypeT&lt;WrapperBinderT&lt;T&gt; &gt;, RawAddressofReturnTypeT&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>WrapperAddressReturnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" line="61" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_casting_helpers_8hpp_1a07198b9e93e9689cec745af5c805355c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, !std::is_same_v&lt; A, B &gt; &amp;&amp;std::is_integral_v&lt; A &gt; &amp;&amp;std::is_integral_v&lt; B &gt; &gt;</type>
        <definition>using Bvr::Meta::Detail::AreIntegrals = typedef std::integral_constant&lt;bool, !std::is_same_v&lt;A, B&gt; &amp;&amp; std::is_integral_v&lt;A&gt; &amp;&amp; std::is_integral_v&lt;B&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>AreIntegrals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="15" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1a680e583ee4dc9ce964e3f9a68dd3f1c4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional_t&lt; std::is_abstract_v&lt; T &gt;||!std::is_default_constructible_v&lt; T &gt;||!std::is_copy_constructible_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_create_empty_variant_policy" kindref="compound">CreateEmptyVariantPolicy</ref>, CreateVariantPolicy&lt; T &gt; &gt;</type>
        <definition>using Bvr::Meta::Detail::CreateVariantPolicyT = typedef typename std::conditional_t&lt; std::is_abstract_v&lt;T&gt; || !std::is_default_constructible_v&lt;T&gt; || !std::is_copy_constructible_v&lt;T&gt;, CreateEmptyVariantPolicy, CreateVariantPolicy&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>CreateVariantPolicyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="177" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_variant_policy_8hpp_1ae3d43b6c3593faef93022f6eb0df60b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Detail::IsFloatingPoint</definition>
        <argsstring>(const Type &amp;t)</argsstring>
        <name>IsFloatingPoint</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="23" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1a6f856dbd75d05c993d733023b2146388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>BVRMETA_API bool Bvr::Meta::Detail::VariantEqCmp</definition>
        <argsstring>(const Type &amp;rhsType, const Variant &amp;rhs, const Type &amp;lhsType, const Variant &amp;lhs, bool *bOk)</argsstring>
        <name>VariantEqCmp</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>rhsType</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>lhsType</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="27" column="22" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" declline="27" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1a675b61d05fd216645cb39ead40d0d640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename InvokerT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Bvr::Meta::Detail::EqCmp</definition>
        <argsstring>(const Type &amp;rhsType, const VariantData &amp;rhs, const Type &amp;lhsType, const Variant &amp;lhs, bool *bOk)</argsstring>
        <name>EqCmp</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>rhsType</declname>
        </param>
        <param>
          <type>const VariantData &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>lhsType</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="176" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="176" bodyend="193" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" declline="31" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1aadd5bbc255f08651b51b715f560beb6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; Detail::IsSequentialContainer&lt; T &gt;::value, <ref refid="class_bvr_1_1_meta_1_1_variant_sequential_view" kindref="compound">VariantSequentialView</ref> &gt;</type>
        <definition>std::enable_if_t&lt; Detail::IsSequentialContainer&lt; T &gt;::value, VariantSequentialView &gt; Bvr::Meta::Detail::CreateVariantSequentialView</definition>
        <argsstring>(T &amp;&amp;val)</argsstring>
        <name>CreateVariantSequentialView</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/SequentialContainerBinder.hpp" line="306" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/SequentialContainerBinder.hpp" bodystart="306" bodyend="308" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1a1455d8c187185db77f2480975c58564a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!Detail::IsSequentialContainer&lt; T &gt;::value, <ref refid="class_bvr_1_1_meta_1_1_variant_sequential_view" kindref="compound">VariantSequentialView</ref> &gt;</type>
        <definition>std::enable_if_t&lt;!Detail::IsSequentialContainer&lt; T &gt;::value, VariantSequentialView &gt; Bvr::Meta::Detail::CreateVariantSequentialView</definition>
        <argsstring>(T &amp;&amp;val)</argsstring>
        <name>CreateVariantSequentialView</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/SequentialContainerBinder.hpp" line="313" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/SequentialContainerBinder.hpp" bodystart="313" bodyend="315" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1aa32ccd6302ead5eab449ca21239d4404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; Detail::IsAssociativeContainer&lt; T &gt;::value, <ref refid="class_bvr_1_1_meta_1_1_variant_associative_view" kindref="compound">VariantAssociativeView</ref> &gt;</type>
        <definition>std::enable_if_t&lt; Detail::IsAssociativeContainer&lt; T &gt;::value, VariantAssociativeView &gt; Bvr::Meta::Detail::CreateVariantAssociativeView</definition>
        <argsstring>(T &amp;&amp;val)</argsstring>
        <name>CreateVariantAssociativeView</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="404" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="404" bodyend="406" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1a44607a0eeebbc1ad96283542d7298450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!Detail::IsAssociativeContainer&lt; T &gt;::value, <ref refid="class_bvr_1_1_meta_1_1_variant_associative_view" kindref="compound">VariantAssociativeView</ref> &gt;</type>
        <definition>std::enable_if_t&lt;!Detail::IsAssociativeContainer&lt; T &gt;::value, VariantAssociativeView &gt; Bvr::Meta::Detail::CreateVariantAssociativeView</definition>
        <argsstring>(T &amp;&amp;val)</argsstring>
        <name>CreateVariantAssociativeView</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="411" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="411" bodyend="413" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1a8439dae7726b57a04ca76f63702e8e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>std::remove_cv_t&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_copy_constructible_v&lt; Tp &gt; &amp;&amp;IsWrapper&lt; T &gt;::value, <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &gt;</type>
        <definition>std::enable_if_t&lt;std::is_copy_constructible_v&lt;Tp&gt; &amp;&amp; IsWrapper&lt;T&gt;::value, Variant&gt; Bvr::Meta::Detail::GetWrappedValue</definition>
        <argsstring>(T &amp;value)</argsstring>
        <name>GetWrappedValue</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="55" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_variant_policy_8hpp_1a6df44ad94959b56381459f23b559a38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>std::remove_cv_t&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_copy_constructible_v&lt; Tp &gt;||!IsWrapper&lt; T &gt;::value, <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &gt;</type>
        <definition>std::enable_if_t&lt;!std::is_copy_constructible_v&lt;Tp&gt; || !IsWrapper&lt;T&gt;::value, Variant&gt; Bvr::Meta::Detail::GetWrappedValue</definition>
        <argsstring>(T &amp;)</argsstring>
        <name>GetWrappedValue</name>
        <param>
          <type>T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="64" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_object_memory_storage_8hpp_1ac09dd5efedc3d45eabdd89bd1fa6a41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_object_memory_storage" kindref="compound">ObjectMemoryStorage</ref></type>
        <definition>ObjectMemoryStorage Bvr::Meta::Detail::GetVariantObjectMemoryStorage</definition>
        <argsstring>(const Variant &amp;variant)</argsstring>
        <name>GetVariantObjectMemoryStorage</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ObjectMemoryStorage.hpp" line="25" column="21" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ObjectMemoryStorage.hpp" declline="25" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="_meta_2_utils_8hpp_1a9b22bb9845e8131494fc4147df724718" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>RawAddressofReturnTypeT&lt; T &gt;</type>
        <definition>static RawAddressofReturnTypeT&lt;T&gt; Bvr::Meta::Detail::RawAddressOf</definition>
        <argsstring>(T &amp;data)</argsstring>
        <name>RawAddressOf</name>
        <param>
          <type>T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="82" column="43" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_meta_2_utils_8hpp_1a9c511abe9e8dcf5cf3105e015d489118" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>RawAddressofReturnTypeT&lt; T &gt;</type>
        <definition>static RawAddressofReturnTypeT&lt;T&gt; Bvr::Meta::Detail::RawAddressOf</definition>
        <argsstring>(T *data)</argsstring>
        <name>RawAddressOf</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" line="86" column="43" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Utils.hpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="_wrapper_binder_8hpp_1ac0c821e90811149e4711a076a19f24c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Bvr::Meta::Detail::WrappedRawAddressOf</definition>
        <argsstring>(T &amp;obj)</argsstring>
        <name>WrappedRawAddressOf</name>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" line="66" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/WrapperBinder.hpp" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1ae31fa7c8f8ca2612223f0687805b5dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same_v&lt; From, To &gt;, bool &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same_v&lt;From, To&gt;, bool&gt;::type Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="21" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a31e36f681886209cb397718112af05ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; AreIntegrals&lt; From, To &gt;::value &amp;&amp;!std::is_signed_v&lt; From &gt; &amp;&amp;std::is_signed_v&lt; To &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;AreIntegrals&lt;From, To&gt;::value &amp;&amp; !std::is_signed_v&lt;From&gt; &amp;&amp; std::is_signed_v&lt;To&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="30" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a06d2ceb9733304ca5afe22778945a4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; AreIntegrals&lt; From, To &gt;::value &amp;&amp;std::is_signed_v&lt; From &gt; &amp;&amp;!std::is_signed_v&lt; To &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;AreIntegrals&lt;From, To&gt;::value &amp;&amp; std::is_signed_v&lt;From&gt; &amp;&amp; !std::is_signed_v&lt;To&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="43" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1ad388116194327160d4878eb7dd503d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; AreIntegrals&lt; From, To &gt;::value &amp;&amp;std::is_signed_v&lt; From &gt; &amp;&amp;std::is_signed_v&lt; To &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;AreIntegrals&lt;From, To&gt;::value &amp;&amp; std::is_signed_v&lt;From&gt; &amp;&amp; std::is_signed_v&lt;To&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="59" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="59" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1aa21b6f9ce653719b7a567664e4ab1115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; AreIntegrals&lt; From, To &gt;::value &amp;&amp;!std::is_signed_v&lt; From &gt; &amp;&amp;!std::is_signed_v&lt; To &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;AreIntegrals&lt;From, To&gt;::value &amp;&amp; !std::is_signed_v&lt;From&gt; &amp;&amp; !std::is_signed_v&lt;To&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="73" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a08fc6e4a00f89184e3cd779e49aaf283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; From &gt; &amp;&amp;std::is_integral_v&lt; To &gt; &amp;&amp;!std::is_signed_v&lt; To &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_floating_point_v&lt;From&gt; &amp;&amp; std::is_integral_v&lt;To&gt; &amp;&amp; !std::is_signed_v&lt;To&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="87" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1ad2b0deacbd70c972bfb924b872f46a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; From &gt; &amp;&amp;std::is_integral_v&lt; To &gt; &amp;&amp;std::is_signed_v&lt; To &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_floating_point_v&lt;From&gt; &amp;&amp; std::is_integral_v&lt;To&gt; &amp;&amp; std::is_signed_v&lt;To&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="100" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a22bde013928303ef2e27347a37e5068b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>BVRMETA_API bool Bvr::Meta::Detail::IsWrappedEnum</definition>
        <argsstring>(const Argument &amp;from)</argsstring>
        <name>IsWrappedEnum</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="112" column="18" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="112" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a6e8b870c317f900b111c6e9479e1abe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>BVRMETA_API bool Bvr::Meta::Detail::ToEnumeration</definition>
        <argsstring>(std::string_view name, Argument &amp;to)</argsstring>
        <name>ToEnumeration</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="114" column="18" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="114" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a382985fdcb6fb1327d8820204b93e8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>BVRMETA_API bool Bvr::Meta::Detail::ToEnumeration</definition>
        <argsstring>(const Variant &amp;from, Argument &amp;to)</argsstring>
        <name>ToEnumeration</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="116" column="18" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="116" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a015c87d8aa9e06c48f06be9a48ae8297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const bool val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const bool</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="120" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="120" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1aba7ab9078d5bef726f5e7c88d079c890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const int val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="122" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="122" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a5a65d1dd388f9794e953a922d016971c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const std::uint32_t val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="124" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="124" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a5492556f29b5e9cf85100c717645fee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const std::int64_t val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const std::int64_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="126" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="126" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1ae6e0514abdf3c6024711cee0da0ca975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const std::uint64_t val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const std::uint64_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="128" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="128" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a1f7880ca9f928904193a75d1a269c3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const float val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="130" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="130" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a7390c33e508fdb75ab17ec215ebb0c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::ToString</definition>
        <argsstring>(const double val, bool *isOk)</argsstring>
        <name>ToString</name>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="132" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="132" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a0eff3d1bfa0a70efdd8eba1d798e836f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::string</type>
        <definition>BVRMETA_API std::string Bvr::Meta::Detail::EnumToString</definition>
        <argsstring>(const Argument &amp;from, bool *isOk)</argsstring>
        <name>EnumToString</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="134" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="134" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1ad2e66b008212d28aef6a7dc8f4f943fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>BVRMETA_API bool Bvr::Meta::Detail::StringToBool</definition>
        <argsstring>(std::string src, bool *isOk)</argsstring>
        <name>StringToBool</name>
        <param>
          <type>std::string</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="136" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="136" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a61d4f061fa2009571cdfb6b8c6fbe830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API int</type>
        <definition>BVRMETA_API int Bvr::Meta::Detail::StringToI32</definition>
        <argsstring>(const std::string &amp;src, bool *isOk)</argsstring>
        <name>StringToI32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="138" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="138" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a084d8164a5f5155e3996b8353838104d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::uint32_t</type>
        <definition>BVRMETA_API std::uint32_t Bvr::Meta::Detail::StringToU32</definition>
        <argsstring>(const std::string &amp;src, bool *isOk)</argsstring>
        <name>StringToU32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="140" column="27" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="140" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a0a693f1b2c39fd16a4f4eb0d32b0bce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::int64_t</type>
        <definition>BVRMETA_API std::int64_t Bvr::Meta::Detail::StringToI64</definition>
        <argsstring>(const std::string &amp;src, bool *isOk)</argsstring>
        <name>StringToI64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="142" column="26" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="142" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a00048132805e76e3bbe76db90f7e15ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API std::uint64_t</type>
        <definition>BVRMETA_API std::uint64_t Bvr::Meta::Detail::StringToU64</definition>
        <argsstring>(const std::string &amp;src, bool *isOk)</argsstring>
        <name>StringToU64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="144" column="27" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="144" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a6d68467ba5d3bdac0cfb65e91cc25b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API float</type>
        <definition>BVRMETA_API float Bvr::Meta::Detail::StringToF32</definition>
        <argsstring>(const std::string &amp;src, bool *isOk)</argsstring>
        <name>StringToF32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="146" column="27" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="146" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a92280cb672b8c7ddbbf9fca0fac1b42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API double</type>
        <definition>BVRMETA_API double Bvr::Meta::Detail::StringToF64</definition>
        <argsstring>(const std::string &amp;src, bool *isOk)</argsstring>
        <name>StringToF64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="148" column="27" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" declline="148" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="_casting_helpers_8hpp_1a3787110e1cf70335d687595b1e9f3c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same_v&lt; To, std::string &gt;, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same_v&lt;To, std::string&gt;, bool&gt; Bvr::Meta::Detail::CastTo</definition>
        <argsstring>(const From &amp;from, To &amp;to)</argsstring>
        <name>CastTo</name>
        <param>
          <type>const From &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>To &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" line="152" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/CastingHelpers.hpp" bodystart="152" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a5eab46a77a37ebc820350ab093adc16c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>TypeTraitsInfos</type>
            <declname>Trait</declname>
            <defname>Trait</defname>
          </param>
          <param>
            <type>typename StdTrait</type>
          </param>
        </templateparamlist>
        <type>constexpr TypeTraitVal</type>
        <definition>constexpr TypeTraitVal Bvr::Meta::Detail::TestTrait</definition>
        <argsstring>()</argsstring>
        <name>TestTrait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="87" column="35" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1aa017307843c0e8ea6f62351318c74c28" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>TypeTraitsInfos</type>
            <declname>Trait</declname>
            <defname>Trait</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Bvr::Meta::Detail::TestTrait</definition>
        <argsstring>(TypeData *pType)</argsstring>
        <name>TestTrait</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="93" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a973e079c6bd88105e6f2539b965260e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename WrapperT</type>
          </param>
          <param>
            <type>typename WrappedTypeT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Meta::Detail::CreateWrapper</definition>
        <argsstring>(const Argument &amp;arg, Variant &amp;out)</argsstring>
        <name>CreateWrapper</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="120" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a0ad8b8c72dba410b67b4dec31036dc19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename WrapperT</type>
          </param>
          <param>
            <type>typename T</type>
            <defval>WrapperBinderT&lt;WrapperT&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; IsWrapper&lt; WrapperT &gt;::value &amp;&amp;std::is_copy_constructible_v&lt; WrapperT &gt; &amp;&amp;std::is_default_constructible_v&lt; WrapperT &gt;, Interface::CreateWrapperFn &gt;</type>
        <definition>std::enable_if_t&lt;IsWrapper&lt;WrapperT&gt;::value &amp;&amp; std::is_copy_constructible_v&lt;WrapperT&gt; &amp;&amp; std::is_default_constructible_v&lt;WrapperT&gt;, Interface::CreateWrapperFn&gt; Bvr::Meta::Detail::GetCreateWrapperFn</definition>
        <argsstring>()</argsstring>
        <name>GetCreateWrapperFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="133" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1ac0333876d007c9e81dc6bd5535c11d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename WrapperT</type>
          </param>
          <param>
            <type>typename T</type>
            <defval>WrapperBinderT&lt;WrapperT&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!IsWrapper&lt; WrapperT &gt;::value||!std::is_copy_constructible_v&lt; WrapperT &gt;||!std::is_default_constructible_v&lt; WrapperT &gt;, Interface::CreateWrapperFn &gt;</type>
        <definition>std::enable_if_t&lt;!IsWrapper&lt;WrapperT&gt;::value || !std::is_copy_constructible_v&lt;WrapperT&gt; || !std::is_default_constructible_v&lt;WrapperT&gt;, Interface::CreateWrapperFn&gt; Bvr::Meta::Detail::GetCreateWrapperFn</definition>
        <argsstring>()</argsstring>
        <name>GetCreateWrapperFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="142" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1ad1751616dcf1e0da90ca84777e475e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="class_bvr_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref> &gt; &amp;</type>
        <definition>std::vector&lt;Attribute&gt;&amp; Bvr::Meta::Detail::GetAttributes</definition>
        <argsstring>()</argsstring>
        <name>GetAttributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="146" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a55bfc04a15a6d22be97161ac8906ec56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Interface::GetAttributesFn</type>
        <definition>Interface::GetAttributesFn Bvr::Meta::Detail::CreateGetAttributesFn</definition>
        <argsstring>()</argsstring>
        <name>CreateGetAttributesFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="151" column="44" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a60c17300ec5f7d2586d39a711cf53fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData* Bvr::Meta::Detail::GetWrappedType</definition>
        <argsstring>()</argsstring>
        <name>GetWrappedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="156" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1af563ee9653236179049eeee234c1d344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &amp;</type>
        <definition>TypeData&amp; Bvr::Meta::Detail::MakeInvalidTypeData</definition>
        <argsstring>()</argsstring>
        <name>MakeInvalidTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="182" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="182" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1acb5c1eee66a32586e849a56973da28e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Bvr::Meta::Detail::SizeOfHelper</definition>
        <argsstring>()</argsstring>
        <name>SizeOfHelper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="199" column="31" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a839244f445ddcb7afe643996c33f4731" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData* Bvr::Meta::Detail::GetRawTypeData</definition>
        <argsstring>()</argsstring>
        <name>GetRawTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="207" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="207" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="15" column="1"/>
  </compounddef>
</doxygen>
