<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_function_traits_8hpp" kind="file" language="C++">
    <compoundname>FunctionTraits.hpp</compoundname>
    <includes local="no">type_traits</includes>
    <includes refid="_property_traits_8hpp" local="no">Meta/PropertyTraits.hpp</includes>
    <includedby refid="_invokable_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Invokable.hpp</includedby>
    <includedby refid="_registry_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Registry.hpp</includedby>
    <includedby refid="_type_reg_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp</includedby>
    <includedby refid="_method_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Method.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp</label>
        <link refid="_function_traits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Meta/PropertyTraits.hpp</label>
        <link refid="_property_traits_8hpp_source"/>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/Archive.hpp</label>
        <link refid="_archive_8hpp_source"/>
      </node>
      <node id="11">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Method.hpp</label>
        <link refid="_method_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp</label>
        <link refid="_function_traits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Registry.hpp</label>
        <link refid="_registry_8hpp_source"/>
      </node>
      <node id="7">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/IniRW.hpp</label>
        <link refid="_ini_r_w_8hpp_source"/>
      </node>
      <node id="5">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Meta.hpp</label>
        <link refid="_meta_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp</label>
        <link refid="_type_reg_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/LocalRegSink.hpp</label>
        <link refid="_local_reg_sink_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Invokable.hpp</label>
        <link refid="_invokable_8hpp_source"/>
      </node>
      <node id="6">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp</label>
        <link refid="_base_type_refl_8hpp_source"/>
      </node>
      <node id="10">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp</label>
        <link refid="_type_desc_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_bvr_1_1_detail_1_1make__void" prot="public">Bvr::Detail::make_void</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_helper" prot="public">Bvr::Detail::Helper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_composed_helper" prot="public">Bvr::Detail::ComposedHelper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_member_function_holder" prot="public">Bvr::Detail::MemberFunctionHolder</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_impl" prot="public">Bvr::Detail::IsFunctorImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_impl_3_01_t_00_01_member_function_holder_3_6_composed_helpe6ddea77d77bc53d89ead58900f3ea14f" prot="public">Bvr::Detail::IsFunctorImpl&lt; T, MemberFunctionHolder&lt;&amp;ComposedHelper&lt; T &gt;::operator()&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor" prot="public">Bvr::Detail::IsFunctor</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::IsFunctor&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::IsFunctor&lt; R(*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::IsFunctor&lt; R(&amp;)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::IsFunctor&lt; R(&amp;)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits" prot="public">Bvr::Detail::TFunctionTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) volatile &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const volatile &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(&amp;)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) volatile noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const volatile noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(&amp;)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_void_member_fn" prot="public">Bvr::Detail::VoidMemberFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_return_member_fn" prot="public">Bvr::Detail::ReturnMemberFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_void_fn" prot="public">Bvr::Detail::VoidFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_return_fn" prot="public">Bvr::Detail::ReturnFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_function_type" prot="public">Bvr::Detail::FunctionType</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_detail">Bvr::Detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Meta/PropertyTraits.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr::Detail<sp/>{</highlight></codeline>
<codeline lineno="8" refid="struct_bvr_1_1_detail_1_1make__void" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1make__void" kindref="compound">make_void</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>void_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_detail_1_1make__void" kindref="compound">make_void</ref>&lt;Ts...&gt;::type;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="struct_bvr_1_1_detail_1_1_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_helper" kindref="compound">Helper</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(...);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="struct_bvr_1_1_detail_1_1_composed_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_composed_helper" kindref="compound">ComposedHelper</ref><sp/>:<sp/>T,<sp/><ref refid="struct_bvr_1_1_detail_1_1_helper" kindref="compound">Helper</ref><sp/>{};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="struct_bvr_1_1_detail_1_1_member_function_holder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;void<sp/>(<ref refid="struct_bvr_1_1_detail_1_1_helper" kindref="compound">Helper</ref>::*)(...)&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_member_function_holder" kindref="compound">MemberFunctionHolder</ref><sp/>{};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F<sp/>=<sp/>MemberFunctionHolder&lt;&amp;Helper::operator()&gt;&gt;</highlight></codeline>
<codeline lineno="20" refid="struct_bvr_1_1_detail_1_1_is_functor_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor_impl" kindref="compound">IsFunctorImpl</ref><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="23" refid="struct_bvr_1_1_detail_1_1_is_functor_impl_3_01_t_00_01_member_function_holder_3_6_composed_helpe6ddea77d77bc53d89ead58900f3ea14f" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor_impl" kindref="compound">IsFunctorImpl</ref>&lt;T,<sp/><ref refid="struct_bvr_1_1_detail_1_1_member_function_holder" kindref="compound">MemberFunctionHolder</ref>&lt;&amp;<ref refid="struct_bvr_1_1_detail_1_1_composed_helper" kindref="compound">ComposedHelper&lt;T&gt;::operator</ref>()&gt;&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27" refid="struct_bvr_1_1_detail_1_1_is_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref><sp/>:<sp/>std::conditional_t&lt;std::is_class_v&lt;T&gt;,<sp/>IsFunctorImpl&lt;T&gt;,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="31" refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref>&lt;R<sp/>(*)(Args...)&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="33" refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref>&lt;R<sp/>(*)(Args...)<sp/>noexcept&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="35" refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref>&lt;R<sp/>(&amp;)(Args...)&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="37" refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref>&lt;R<sp/>(&amp;)(Args...)<sp/>noexcept&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40" refid="struct_bvr_1_1_detail_1_1_t_function_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;decltype(&amp;T::operator())&gt;<sp/>{};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ArgC<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ReturnT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TArgs</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">Meta::TypeList</ref>&lt;Args...&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="50" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="55" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>const&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="60" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>volatile&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="66" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>const<sp/>volatile&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>functions<sp/>and<sp/>lambdas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="73" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(*)(Args...)&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="75" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(&amp;)(Args...)&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>noexcept<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="78" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>noexcept&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="84" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>const<sp/>noexcept&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="90" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>volatile<sp/>noexcept&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="96" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(C::*)(Args...)<sp/>const<sp/>volatile<sp/>noexcept&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClassT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>functions<sp/>and<sp/>lambdas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="103" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(*)(Args...)<sp/>noexcept&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="106" refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R<sp/>(&amp;)(Args...)<sp/>noexcept&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IsFunction<sp/>=</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>std::is_member_function_pointer&lt;F&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_function&lt;F&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor&lt;F&gt;::value</ref>&gt;;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">concept<sp/>Invokable<sp/>=<sp/>IsFunction&lt;F&gt;::value;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IsVoidFunction<sp/>=<sp/>std::integral_constant&lt;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>bool,<sp/>std::is_same_v&lt;typename<sp/>TFunctionTraits&lt;F&gt;::ReturnT,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="struct_bvr_1_1_detail_1_1_void_member_fn" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_void_member_fn" kindref="compound">VoidMemberFn</ref><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_detail_1_1_void_member_fn" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_detail_1_1_void_member_fn" kindref="compound">VoidMemberFn</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">};</highlight></codeline>
<codeline lineno="125" refid="struct_bvr_1_1_detail_1_1_return_member_fn" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_return_member_fn" kindref="compound">ReturnMemberFn</ref><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_detail_1_1_return_member_fn" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_detail_1_1_return_member_fn" kindref="compound">ReturnMemberFn</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128" refid="struct_bvr_1_1_detail_1_1_void_fn" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_void_fn" kindref="compound">VoidFn</ref><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_detail_1_1_void_fn" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_detail_1_1_void_fn" kindref="compound">VoidFn</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131" refid="struct_bvr_1_1_detail_1_1_return_fn" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_return_fn" kindref="compound">ReturnFn</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_detail_1_1_return_fn" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_detail_1_1_return_fn" kindref="compound">ReturnFn</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="136" refid="struct_bvr_1_1_detail_1_1_function_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_detail_1_1_function_type" kindref="compound">FunctionType</ref></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::conditional_t&lt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_member_function_pointer_v&lt;Fn&gt;,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conditional_t&lt;IsVoidFunction&lt;Fn&gt;::value,<sp/>VoidMemberFn,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnMemberFn&gt;,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conditional_t&lt;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsFunctor&lt;Fn&gt;::value,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conditional_t&lt;IsVoidFunction&lt;Fn&gt;::value,<sp/>VoidFn,<sp/>ReturnFn&gt;,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::Detail</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp"/>
  </compounddef>
</doxygen>
