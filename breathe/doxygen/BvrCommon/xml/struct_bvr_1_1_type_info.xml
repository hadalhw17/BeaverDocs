<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_type_info" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::TypeInfo</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_bvr_1_1_type_info_1aeaa76be40928d8f87af669b240ff83db" prot="private" static="no" mutable="no">
        <type><ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">Bvr::TTypeName</ref></type>
        <definition>Bvr::TTypeName Bvr::TypeInfo::m_typeName</definition>
        <argsstring></argsstring>
        <name>m_typeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="132" column="20" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1ac803545467acf49463682ca1b9658574" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr Bvr::TypeInfo::TypeInfo</definition>
        <argsstring>(Detail::TypeConstructorProxy&lt; Type &gt;) noexcept</argsstring>
        <name>TypeInfo</name>
        <param>
          <type><ref refid="struct_bvr_1_1_detail_1_1_type_constructor_proxy" kindref="compound">Detail::TypeConstructorProxy</ref>&lt; Type &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="102" column="15" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1a06854d181c5bd924eba61c952308d8a0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr std::string_view</type>
        <definition>constexpr std::string_view Bvr::TypeInfo::GetName</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="106" column="40" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1af5a3222e3c9eaee6799974aa6462ecbe" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr Bvr::TTypeHash</type>
        <definition>constexpr Bvr::TTypeHash Bvr::TypeInfo::GetHash</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="110" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1abd76a932616e64dd5f351b38970bae0a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Bvr::TypeInfo::operator==</definition>
        <argsstring>(const TypeInfo &amp;info) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="115" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1a474fdf418bb82194dda6fbc994804881" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Bvr::TypeInfo::operator&gt;</definition>
        <argsstring>(const TypeInfo &amp;info) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="119" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1a9bb34c67258c0cdc4f8d49cf67ae2965" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool Bvr::TypeInfo::operator&lt;</definition>
        <argsstring>(const TypeInfo &amp;info) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="122" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_type_info_1af12b36053d285e8fd88d5aeb849cec34" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr Bvr::TypeInfo::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="127" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="127" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="100" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="100" bodyend="133"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_type_info_1af5a3222e3c9eaee6799974aa6462ecbe" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>GetHash</name></member>
      <member refid="struct_bvr_1_1_type_info_1a06854d181c5bd924eba61c952308d8a0" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>GetName</name></member>
      <member refid="struct_bvr_1_1_type_info_1aeaa76be40928d8f87af669b240ff83db" prot="private" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>m_typeName</name></member>
      <member refid="struct_bvr_1_1_type_info_1af12b36053d285e8fd88d5aeb849cec34" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>operator bool</name></member>
      <member refid="struct_bvr_1_1_type_info_1a9bb34c67258c0cdc4f8d49cf67ae2965" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>operator&lt;</name></member>
      <member refid="struct_bvr_1_1_type_info_1abd76a932616e64dd5f351b38970bae0a" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>operator==</name></member>
      <member refid="struct_bvr_1_1_type_info_1a474fdf418bb82194dda6fbc994804881" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>operator&gt;</name></member>
      <member refid="struct_bvr_1_1_type_info_1ac803545467acf49463682ca1b9658574" prot="public" virt="non-virtual"><scope>Bvr::TypeInfo</scope><name>TypeInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
