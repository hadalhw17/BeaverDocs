<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_meta" kind="namespace" language="C++">
    <compoundname>Bvr::Meta</compoundname>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned" prot="public">Bvr::Meta::_Aligned</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01char_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, char, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, double, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01int_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, int, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01short_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, short, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01_t_00_01true_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, T, true &gt;</innerclass>
    <innerclass refid="union_bvr_1_1_meta_1_1___align_type" prot="public">Bvr::Meta::_AlignType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_aligned_storage" prot="public">Bvr::Meta::AlignedStorage</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_argument" prot="public">Bvr::Meta::Argument</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_argument_extractor" prot="public">Bvr::Meta::ArgumentExtractor</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_argument_wrapper" prot="public">Bvr::Meta::ArgumentWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_as_type_list" prot="public">Bvr::Meta::AsTypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_as_type_list_3_01_type___list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::AsTypeList&lt; Type_List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_attribute" prot="public">Bvr::Meta::Attribute</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_attribute_storage" prot="public">Bvr::Meta::AttributeStorage</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_class_data" prot="public">Bvr::Meta::ClassData</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_conversion_method" prot="public">Bvr::Meta::ConversionMethod</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_conversion_method_base" prot="public">Bvr::Meta::ConversionMethodBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl" prot="public">Bvr::Meta::CountArgsImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_01_list_8_8_8_01_4_01_4" prot="public">Bvr::Meta::CountArgsImpl&lt; FilterT, TypeList&lt; List... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_4_01_4" prot="public">Bvr::Meta::CountArgsImpl&lt; FilterT, TypeList&lt;&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_decay_except_array" prot="public">Bvr::Meta::DecayExceptArray</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_enum" prot="public">Bvr::Meta::Enum</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_fn_arg" prot="public">Bvr::Meta::FnArg</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_global_scope" prot="public">Bvr::Meta::GlobalScope</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq" prot="public">Bvr::Meta::HasCmpEq</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" prot="public">Bvr::Meta::HasCmpEqImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl_3_01std_1_1pair_3_01_t_f_00_01_t_s_01_4_00_01std_1_1pair_3_01_t_f_00_01_t_s_01_4_01_4" prot="public">Bvr::Meta::HasCmpEqImpl&lt; std::pair&lt; TF, TS &gt;, std::pair&lt; TF, TS &gt; &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_instance" prot="public">Bvr::Meta::Instance</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_is_property_of" prot="public">Bvr::Meta::IsPropertyOf</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_local_reg_sink" prot="public">Bvr::Meta::LocalRegSink</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" prot="public">Bvr::Meta::MaxAlignOfListImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_t_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" prot="public">Bvr::Meta::MaxSizeOfListImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_t_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_member_method_wrapper" prot="public">Bvr::Meta::MemberMethodWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_member_property_wrapper" prot="public">Bvr::Meta::MemberPropertyWrapper</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_method" prot="public">Bvr::Meta::Method</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" prot="public">Bvr::Meta::MethodWrapperBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_overload" prot="public">Bvr::Meta::Overload</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_overload_3_01_t_ret_07_t_args_8_8_8_08_01const_01_4" prot="public">Bvr::Meta::Overload&lt; TRet(TArgs...) const &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_overload_3_01_t_ret_07_t_args_8_8_8_08_4" prot="public">Bvr::Meta::Overload&lt; TRet(TArgs...)&gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_property" prot="public">Bvr::Meta::Property</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_traits" prot="public">Bvr::Meta::PropertyTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_traits_3_01_t_07_b_1_1_5_08_4" prot="public">Bvr::Meta::PropertyTraits&lt; T(B::*)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" prot="public">Bvr::Meta::PropertyWrapperBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type" prot="public">Bvr::Meta::RawArrayType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type_3_01_t_00_01typename_01std_1_1enable__if__t_3_01std_1_1isa086d1001e183f9a3b6b298080ac7d18" prot="public">Bvr::Meta::RawArrayType&lt; T, typename std::enable_if_t&lt; std::is_array_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type_impl" prot="public">Bvr::Meta::RawArrayTypeImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type_impl_3_01_t_0fsize_0e_4" prot="public">Bvr::Meta::RawArrayTypeImpl&lt; T[size]&gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_registry_replayer" prot="public">Bvr::Meta::RegistryReplayer</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_static_method_wrapper" prot="public">Bvr::Meta::StaticMethodWrapper</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type" prot="public">Bvr::Meta::Type</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_data" prot="public">Bvr::Meta::TypeData</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_typed_conversion_method" prot="public">Bvr::Meta::TypedConversionMethod</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list" prot="public">Bvr::Meta::TypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat" prot="public">Bvr::Meta::TypeListCat</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_01_type_list_3_01_components_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListCat&lt; TypeList&lt; Components... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_01_type_list_3_01_components_8_8_8_01_4_00_01_type_list_0536c8889d93e8e79c0a3aec326f9217" prot="public">Bvr::Meta::TypeListCat&lt; TypeList&lt; Components... &gt;, TypeList&lt; OtherComponents... &gt;, ExtraLists... &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_4" prot="public">Bvr::Meta::TypeListCat&lt;&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element" prot="public">Bvr::Meta::TypeListElement</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_010_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; 0, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_i_00_01_type_list_3_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; I, TypeList&lt;&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_s_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; S, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_reg_impl" prot="public">Bvr::Meta::TypeRegImpl</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry" prot="public">Bvr::Meta::TypeRegistry</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_variant" prot="public">Bvr::Meta::Variant</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_variant_associative_view" prot="public">Bvr::Meta::VariantAssociativeView</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_data_policy_base" prot="public">Bvr::Meta::VariantDataPolicyBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_aritmetic" prot="public">Bvr::Meta::VariantPolicyAritmetic</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_big" prot="public">Bvr::Meta::VariantPolicyBig</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_empty" prot="public">Bvr::Meta::VariantPolicyEmpty</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_nullptr_t" prot="public">Bvr::Meta::VariantPolicyNullptrT</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_small" prot="public">Bvr::Meta::VariantPolicySmall</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_string" prot="public">Bvr::Meta::VariantPolicyString</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_void" prot="public">Bvr::Meta::VariantPolicyVoid</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_variant_sequential_view" prot="public">Bvr::Meta::VariantSequentialView</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_visitor" prot="public">Bvr::Meta::Visitor</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_void_variant_t" prot="public">Bvr::Meta::VoidVariantT</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder" prot="public">Bvr::Meta::WrapperBinder</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1reference__wrapper_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1unique__ptr_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::unique_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1weak__ptr_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::weak_ptr&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="namespace_bvr_1_1_meta_1_1_detail">Bvr::Meta::Detail</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta_1_1_interface">Bvr::Meta::Interface</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721c" prot="public" static="no" strong="yes">
        <type>TypeTraitVal</type>
        <name>TypeTraitsInfos</name>
        <qualifiedname>Bvr::Meta::TypeTraitsInfos</qualifiedname>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cab90ce872303feba1276016190c93fd8e" prot="public">
          <name>IsEmpty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca1a5acf64c04cc9860de0ebd9bbf175cc" prot="public">
          <name>IsClass</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cad9631ec4533424aa46f8253d0ced130e" prot="public">
          <name>IsEnum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca7515d3a3055b2139844aa9e06fce46cf" prot="public">
          <name>IsArray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca19f24dd953415de0a5f45a41b2067669" prot="public">
          <name>IsPointer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca95964b0637d80f3e2d6a23745f15fbdc" prot="public">
          <name>IsArithmetic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721caf455b17ec8e8c2ce0315df7c275a4930" prot="public">
          <name>IsSequentialContainer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cabf9bb1af3b4c603c2585a40eac62b1a6" prot="public">
          <name>IsAssociativeContainer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cae93f994f01c537c4e2f7d8528c3eb5e9" prot="public">
          <name>Count</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="31" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="31" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0" prot="public" static="no" strong="yes">
        <type></type>
        <name>EVariantPolicyOP</name>
        <qualifiedname>Bvr::Meta::EVariantPolicyOP</qualifiedname>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a0e181f89f47654b86f3beb42f5cc08b8" prot="public">
          <name>Destroy</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0acf00271107fced5ef15ebc057d09eb7d" prot="public">
          <name>IsValid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0aff24590464659ee8cdec688128c35f89" prot="public">
          <name>Clone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a8778f5cc5ee1685fb97ad92e33e63225" prot="public">
          <name>Swap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a6bf4bc98130395b9474498c5e921f062" prot="public">
          <name>GetValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a789469f913a23c20d6ca549a4de03d32" prot="public">
          <name>CreateWrappedValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a19b28d3ca39577cc844d542b6a7ff000" prot="public">
          <name>ExtractWrappedValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0abe784e48d0174367297b636456c7bcf1" prot="public">
          <name>GetType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a29b22cf62c4f94e3a12de6424a5dca0a" prot="public">
          <name>GetRawPtr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a3f1d984495cbfacd1a9c7cfd91dfc8ce" prot="public">
          <name>CmpEq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a4cd9f3996d60790cd11c04f842ebc43c" prot="public">
          <name>Cast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0ac8be2b508837fe06cf1e422b300380ac" prot="public">
          <name>CreateSequentialView</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a79bafe3c870188a2d8e615cbd6e7593d" prot="public">
          <name>CreateAssociativeView</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0aea4f157950228b8f869a6387d7d6a6a7" prot="public">
          <name>GetObjectStorage</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="60" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="60" bodyend="75"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_property_traits_8hpp_1acde3f003514a0d58ece94733f66322d1" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Bvr::Meta::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <qualifiedname>Bvr::Meta::size_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="4" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a529a8c121c081fde57e66a5b34fb470a" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using Bvr::Meta::ptrdiff_t = typedef std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>ptrdiff_t</name>
        <qualifiedname>Bvr::Meta::ptrdiff_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="5" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a19e1683ad25c01fd4300683749273abe" prot="public" static="no">
        <type>std::uintptr_t</type>
        <definition>typedef std::uintptr_t Bvr::Meta::ptr_t</definition>
        <argsstring></argsstring>
        <name>ptr_t</name>
        <qualifiedname>Bvr::Meta::ptr_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="6" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a91d8431bdc95eb74fe0f848ad2aad767" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_meta_1_1_as_type_list" kindref="compound">AsTypeList</ref>&lt; T... &gt;::Type</type>
        <definition>using Bvr::Meta::AsTypeListT = typedef typename AsTypeList&lt;T...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>AsTypeListT</name>
        <qualifiedname>Bvr::Meta::AsTypeListT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="83" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1ac35042bfac1e43a01ca4d11441fe37a2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Components</declname>
            <defname>Components</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>&lt; Components... &gt;::Type</type>
        <definition>using Bvr::Meta::TypeListCatT = typedef typename TypeListCat&lt;Components...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>TypeListCatT</name>
        <qualifiedname>Bvr::Meta::TypeListCatT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="101" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a8184e8b72b8fced61b11722a73d46697" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt; S, List &gt;::Type</type>
        <definition>using Bvr::Meta::TypeListElementT = typedef typename TypeListElement&lt;S, List&gt;::Type</definition>
        <argsstring></argsstring>
        <name>TypeListElementT</name>
        <qualifiedname>Bvr::Meta::TypeListElementT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="118" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a3cb9fa3d473771bcdb453f033ab34cd4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt; Ts... &gt;::type</type>
        <definition>using Bvr::Meta::MaxSizeOfList = typedef MaxSizeOfListImpl&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>MaxSizeOfList</name>
        <qualifiedname>Bvr::Meta::MaxSizeOfList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="130" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1abba63a8fc410e70e3dfd90c4ddbc7eb0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt; Ts... &gt;::type</type>
        <definition>using Bvr::Meta::MaxAlignOfList = typedef MaxAlignOfListImpl&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>MaxAlignOfList</name>
        <qualifiedname>Bvr::Meta::MaxAlignOfList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="144" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_argument_8hpp_1acdf6e64de6b6858fd8d1ffc4973ea28c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref>, std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt; &gt;</type>
        <definition>using Bvr::Meta::IsVariant = typedef std::is_same&lt;Variant, std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>IsVariant</name>
        <qualifiedname>Bvr::Meta::IsVariant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp" line="11" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1adf2cd026e2649e6c4bc35cd48262b195" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Bvr::Meta::TypeTraitVal = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>TypeTraitVal</name>
        <qualifiedname>Bvr::Meta::TypeTraitVal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="30" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1ae55a1020172e55266b3352c39db5597b" prot="public" static="no">
        <type>std::bitset&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">static_cast</ref>&lt; std::size_t &gt;(TypeTraitsInfos::Count)&gt;</type>
        <definition>using Bvr::Meta::TypeTraits = typedef std::bitset&lt;static_cast&lt;std::size_t&gt;(TypeTraitsInfos::Count)&gt;</definition>
        <argsstring></argsstring>
        <name>TypeTraits</name>
        <qualifiedname>Bvr::Meta::TypeTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="44" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1a669251e9532a322dd268849cafa44d4e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; std::is_same_v&lt; T, <ref refid="struct_bvr_1_1_events" kindref="compound">void</ref> &gt;, <ref refid="class_bvr_1_1_meta_1_1_type_registry" kindref="compound">TypeRegistry</ref>, <ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">TypeRegistry::Class_</ref>&lt; T &gt; &gt;</type>
        <definition>using Bvr::Meta::BinderBase = typedef std::conditional_t&lt;std::is_same_v&lt;T, void&gt;, TypeRegistry, TypeRegistry::Class_&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BinderBase</name>
        <qualifiedname>Bvr::Meta::BinderBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="379" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_data_8hpp_1afa6442145b5bd080706c4eaab39e8200" prot="public" static="no">
        <type>AsTypeListT&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">long</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">float</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">double</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">unsigned</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">unsigned</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">long</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">signed</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">char</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">unsigned</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">char</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">signed</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">short</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">unsigned</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">short</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">long</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">unsigned</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">long</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">long</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">long</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">double</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">void</ref> * &gt;</type>
        <definition>using Bvr::Meta::VariantBaseTypes = typedef AsTypeListT&lt;int, long int, float, double, unsigned int, unsigned long int, signed char, unsigned char, signed short int, unsigned short int, long int, unsigned long long int, long double, void*&gt;</definition>
        <argsstring></argsstring>
        <name>VariantBaseTypes</name>
        <qualifiedname>Bvr::Meta::VariantBaseTypes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" line="7" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_data_8hpp_1a8d7ffc3a2d2bc2df16e9e5da79917561" prot="public" static="no">
        <type><ref refid="struct_bvr_1_1_meta_1_1_aligned_storage" kindref="compound">AlignedStorage</ref>&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">MaxSizeOfList</ref>&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">VariantBaseTypes</ref> &gt;::value, <ref refid="struct_bvr_1_1_events" kindref="compound">MaxAlignOfList</ref>&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">VariantBaseTypes</ref> &gt;::value &gt;::Type</type>
        <definition>using Bvr::Meta::VariantData = typedef AlignedStorage&lt;MaxSizeOfList&lt;VariantBaseTypes&gt;::value, MaxAlignOfList&lt;VariantBaseTypes&gt;::value&gt;::Type</definition>
        <argsstring></argsstring>
        <name>VariantData</name>
        <qualifiedname>Bvr::Meta::VariantData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" line="13" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1a2e8649d4b7c67360495fb1b6d84f5160" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_meta_1_1_decay_except_array" kindref="compound">DecayExceptArray</ref>&lt; T &gt;::Type</type>
        <definition>using Bvr::Meta::DecayExceptArrayT = typedef typename DecayExceptArray&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>DecayExceptArrayT</name>
        <qualifiedname>Bvr::Meta::DecayExceptArrayT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="30" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1ab52b7833952c292d8f63651398331f29" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Decayed</type>
            <defval>DecayExceptArrayT&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_same_v&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">Decayed</ref>, <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &gt;, <ref refid="struct_bvr_1_1_events" kindref="compound">Decayed</ref> &gt;</type>
        <definition>using Bvr::Meta::DecayVariantT = typedef std::enable_if_t&lt;!std::is_same_v&lt;Decayed, Variant&gt;, Decayed&gt;</definition>
        <argsstring></argsstring>
        <name>DecayVariantT</name>
        <qualifiedname>Bvr::Meta::DecayVariantT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="33" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_argument_extractor_8hpp_1a142f0b1631b96f63bc4fc681ab79f21d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FilterT</type>
          </param>
          <param>
            <type>typename ListT</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_bvr_1_1_meta_1_1_count_args_impl" kindref="compound">CountArgsImpl</ref>&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">FilterT</ref>, AsTypeListT&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">ListT</ref> &gt; &gt;::Value &gt;</type>
        <definition>using Bvr::Meta::CountArgs = typedef std::integral_constant&lt;std::size_t, CountArgsImpl&lt;FilterT, AsTypeListT&lt;ListT&gt; &gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>CountArgs</name>
        <qualifiedname>Bvr::Meta::CountArgs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" line="19" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a6e88a4615e262446c1656f367a95ecd9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>bCanPlace</declname>
            <defname>bCanPlace</defname>
            <defval>(sizeof(T) &lt;= sizeof(VariantData) &amp;&amp;                                        (std::alignment_of_v&lt;T&gt; &lt;=                                         std::alignment_of_v&lt;VariantData&gt;))</defval>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">bCanPlace</ref> &gt;</type>
        <definition>using Bvr::Meta::CanPlaceInVariant = typedef std::integral_constant&lt;bool, bCanPlace&gt;</definition>
        <argsstring></argsstring>
        <name>CanPlaceInVariant</name>
        <qualifiedname>Bvr::Meta::CanPlaceInVariant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="80" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a9e9eeb8f3b6885f5d872ec6369911545" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_meta_1_1_raw_array_type" kindref="compound">RawArrayType</ref>&lt; T &gt;::Type</type>
        <definition>using Bvr::Meta::RawArrayTypeT = typedef typename RawArrayType&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>RawArrayTypeT</name>
        <qualifiedname>Bvr::Meta::RawArrayTypeT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="97" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1aa73e11c5bccc641c9ce4e3c3a25256fb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref>, std::is_array_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">char</ref>, RawArrayTypeT&lt; T &gt; &gt; &amp;&amp;(std::rank&lt; T &gt;()==1)&gt;</type>
        <definition>using Bvr::Meta::Is1DCharArray = typedef std::integral_constant&lt;bool, std::is_array_v&lt;T&gt; &amp;&amp; std::is_same_v&lt;char, RawArrayTypeT&lt;T&gt; &gt; &amp;&amp; (std::rank&lt;T&gt;() == 1)&gt;</definition>
        <argsstring></argsstring>
        <name>Is1DCharArray</name>
        <qualifiedname>Bvr::Meta::Is1DCharArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="100" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a2c4ab96b01e97f62b2b54af9852eb16f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; std::is_same_v&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_void_variant_t" kindref="compound">VoidVariantT</ref> &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_void" kindref="compound">VariantPolicyVoid</ref>, std::conditional_t&lt; std::is_same_v&lt; T, std::nullptr_t &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_nullptr_t" kindref="compound">VariantPolicyNullptrT</ref>, std::conditional_t&lt; std::is_same_v&lt; T, std::string &gt;||Is1DCharArray&lt; T &gt;::value, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_string" kindref="compound">VariantPolicyString</ref>, std::conditional_t&lt; CanPlaceInVariant&lt; T &gt;::value, std::conditional_t&lt; std::is_arithmetic_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_aritmetic" kindref="compound">VariantPolicyAritmetic</ref>&lt; T &gt;, std::conditional_t&lt; std::is_enum_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_small" kindref="compound">VariantPolicySmall</ref>&lt; T, <ref refid="struct_bvr_1_1_events" kindref="compound">Detail::EnumCaster</ref>&lt; T &gt; &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_small" kindref="compound">VariantPolicySmall</ref>&lt; T &gt; &gt; &gt;, std::conditional_t&lt; std::is_enum_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_big" kindref="compound">VariantPolicyBig</ref>&lt; T, <ref refid="struct_bvr_1_1_events" kindref="compound">Detail::EnumCaster</ref>&lt; T &gt; &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_big" kindref="compound">VariantPolicyBig</ref>&lt; T &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>using Bvr::Meta::VariantPolicy = typedef std::conditional_t&lt; std::is_same_v&lt;T, VoidVariantT&gt;, VariantPolicyVoid, std::conditional_t&lt; std::is_same_v&lt;T, std::nullptr_t&gt;, VariantPolicyNullptrT, std::conditional_t&lt; std::is_same_v&lt;T, std::string&gt; || Is1DCharArray&lt;T&gt;::value, VariantPolicyString, std::conditional_t&lt; CanPlaceInVariant&lt;T&gt;::value, std::conditional_t&lt; std::is_arithmetic_v&lt;T&gt;, VariantPolicyAritmetic&lt;T&gt;, std::conditional_t&lt; std::is_enum_v&lt;T&gt;, VariantPolicySmall&lt;T, Detail::EnumCaster&lt;T&gt; &gt;, VariantPolicySmall&lt;T&gt; &gt;&gt;, std::conditional_t&lt;std::is_enum_v&lt;T&gt;, VariantPolicyBig&lt;T, Detail::EnumCaster&lt;T&gt; &gt;, VariantPolicyBig&lt;T&gt; &gt;&gt; &gt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicy</name>
        <qualifiedname>Bvr::Meta::VariantPolicy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="106" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_property_traits_8hpp_1af21f5b591e740f0dcfbfd3e616fa7db6" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> size_t</type>
        <definition>constexpr size_t Bvr::Meta::AlignmentOf_V</definition>
        <argsstring></argsstring>
        <name>AlignmentOf_V</name>
        <qualifiedname>Bvr::Meta::AlignmentOf_V</qualifiedname>
        <initializer>= <ref refid="struct_bvr_1_1_events" kindref="compound">alignof</ref>(T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="70" column="37" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1ab27c7eaed30c204fca59591cc9d55224" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicyAritmetic&lt; char &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicyAritmetic&lt; char &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicyAritmetic&lt; char &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="363" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1a067cd74a6d20edc7191e64c8fff263ff" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicyAritmetic&lt; bool &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicyAritmetic&lt; bool &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicyAritmetic&lt; bool &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="364" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1a60104954e74ce4c67644fcb9414040d3" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicyAritmetic&lt; float &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicyAritmetic&lt; float &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicyAritmetic&lt; float &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="365" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1a65235d9f2130725686938e5721630bb6" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicyAritmetic&lt; double &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicyAritmetic&lt; double &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicyAritmetic&lt; double &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="366" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1afeb33259e0d79b5bbff0f6d084c3ffdf" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicySmall&lt; char * &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicySmall&lt; char * &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicySmall&lt; char * &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="379" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1a7c61396e29e3bd263fef013887249eeb" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicySmall&lt; bool * &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicySmall&lt; bool * &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicySmall&lt; bool * &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="380" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1a6d400abc1a77c07907ae84edf6e5ec97" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicySmall&lt; float * &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicySmall&lt; float * &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicySmall&lt; float * &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="381" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_variant_policy_8hpp_1a72c984b25950036462b7dc01cc11d922" prot="public" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">template</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">struct</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_API</ref></type>
        <definition>template struct BVRMETA_API Bvr::Meta::VariantPolicySmall&lt; double * &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicySmall&lt; double * &gt;</name>
        <qualifiedname>Bvr::Meta::VariantPolicySmall&lt; double * &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="382" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="382" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_variant_impl_8hpp_1a9b60aacd8b612fb6db8a6260bd0fb6e3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * Bvr::Meta::unsafe_variant_cast</definition>
        <argsstring>(Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <qualifiedname>Bvr::Meta::unsafe_variant_cast</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" line="10" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" bodystart="10" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="_variant_impl_8hpp_1a0cd9245735c9aeda80d9f44de6088145" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T *</type>
        <definition>const T * Bvr::Meta::unsafe_variant_cast</definition>
        <argsstring>(const Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <qualifiedname>Bvr::Meta::unsafe_variant_cast</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" line="15" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="_variant_impl_8hpp_1ab72db80d49dfcac352440e25a8523da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Bvr::Meta::variant_cast</definition>
        <argsstring>(Variant &amp;variant)</argsstring>
        <name>variant_cast</name>
        <qualifiedname>Bvr::Meta::variant_cast</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" line="20" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_variant_impl_8hpp_1aa15aa6b2b8aead3b4fad8660edcf3396" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Bvr::Meta::variant_cast</definition>
        <argsstring>(Variant &amp;&amp;variant)</argsstring>
        <name>variant_cast</name>
        <qualifiedname>Bvr::Meta::variant_cast</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" line="30" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="_property_traits_8hpp_1a3667c94ee60a1257cc40cfb7ebef2808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ptr_t</type>
        <definition>ptr_t Bvr::Meta::AsPointer</definition>
        <argsstring>(const T &amp;obj)</argsstring>
        <name>AsPointer</name>
        <qualifiedname>Bvr::Meta::AsPointer</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="194" column="19" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a7f02eb0163b6def5f185ee6b005cdce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; TypeData &gt; Bvr::Meta::MakeTypeData</definition>
        <argsstring>()</argsstring>
        <name>MakeTypeData</name>
        <qualifiedname>Bvr::Meta::MakeTypeData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="293" column="25" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="293" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a38c35063843a6a8144b6babaa6d53647" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>AttributeCount</declname>
            <defname>AttributeCount</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; PropertyWrapperBase &gt; Bvr::Meta::MakePropertyData</definition>
        <argsstring>(std::string_view name, T prop, std::array&lt; Attribute, AttributeCount &gt; &amp;&amp;attributes)</argsstring>
        <name>MakePropertyData</name>
        <qualifiedname>Bvr::Meta::MakePropertyData</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="class_bvr_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">AttributeCount</ref> &gt; &amp;&amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="346" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="346" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1ae68d75ae8470be520a34b04d4065fef5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TParent</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>AttributeCount</declname>
            <defname>AttributeCount</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>NameCount</declname>
            <defname>NameCount</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; MethodWrapperBase &gt; Bvr::Meta::MakeMethodData</definition>
        <argsstring>(std::string_view name, T prop, std::array&lt; Attribute, AttributeCount &gt; &amp;&amp;attributes, std::array&lt; FnArg, NameCount &gt; &amp;&amp;names)</argsstring>
        <name>MakeMethodData</name>
        <qualifiedname>Bvr::Meta::MakeMethodData</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="class_bvr_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">AttributeCount</ref> &gt; &amp;&amp;</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="struct_bvr_1_1_meta_1_1_fn_arg" kindref="compound">FnArg</ref>, <ref refid="struct_bvr_1_1_events" kindref="compound">NameCount</ref> &gt; &amp;&amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="356" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="356" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a8a327de18af81df9e83254bb0d10b0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>auto Bvr::Meta::ExtractAttributes</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ExtractAttributes</name>
        <qualifiedname>Bvr::Meta::ExtractAttributes</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="370" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="370" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1aae0d6e6181f00a712e5f3775506f2dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>auto Bvr::Meta::ExtractFnNames</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ExtractFnNames</name>
        <qualifiedname>Bvr::Meta::ExtractFnNames</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="374" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="374" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="_enum_8hpp_1af2004a7559eb72bd1d6bf6f70233a256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_data" kindref="compound">Detail::EnumData</ref>&lt; EnumT &gt;</type>
        <definition>Detail::EnumData&lt; EnumT &gt; Bvr::Meta::Value</definition>
        <argsstring>(std::string_view name, EnumT val)</argsstring>
        <name>Value</name>
        <qualifiedname>Bvr::Meta::Value</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>EnumT</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enum.hpp" line="123" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enum.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="_argument_extractor_8hpp_1a750161383356bf5e164a2d0b88c42e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Bvr::Meta::ForwardToVector</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ForwardToVector</name>
        <qualifiedname>Bvr::Meta::ForwardToVector</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" line="58" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="_argument_extractor_8hpp_1a81a15796880adaa8d9b86576b10d0ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, CountArgs&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt; Args... &gt; &gt;::value &gt;</type>
        <definition>std::array&lt; T, CountArgs&lt; T, TypeList&lt; Args... &gt; &gt;::value &gt; Bvr::Meta::ForwardToArray</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ForwardToArray</name>
        <qualifiedname>Bvr::Meta::ForwardToArray</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" line="64" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_local_reg_sink_8hpp_1a4d97d48cfcdd263ce8bb2bdbc8f6e885" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Item</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">BVRMETA_LOCAL</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">decltype</ref>(<ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref>)</type>
        <definition>BVRMETA_LOCAL decltype(auto) Bvr::Meta::RegItem</definition>
        <argsstring>(Item item)</argsstring>
        <name>RegItem</name>
        <qualifiedname>Bvr::Meta::RegItem</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Item</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/LocalRegSink.hpp" line="125" column="31" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/LocalRegSink.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1a3f564772bbafc562e75fcd4244b6f8c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>bool Bvr::Meta::IsTypedHandle</definition>
        <argsstring>(Type t)</argsstring>
        <name>IsTypedHandle</name>
        <qualifiedname>Bvr::Meta::IsTypedHandle</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="8" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="8" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1a5eefc64510f0aeb0b49e5c1e85c6453b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>bool Bvr::Meta::IsUntypedHandle</definition>
        <argsstring>(Type t)</argsstring>
        <name>IsUntypedHandle</name>
        <qualifiedname>Bvr::Meta::IsUntypedHandle</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="18" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1a4aeda5552d724a7936327c7de50fdc78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>bool Bvr::Meta::TryConvertUntypedHandle</definition>
        <argsstring>(const Type &amp;dstType, const Instance &amp;untyped, Variant &amp;dst)</argsstring>
        <name>TryConvertUntypedHandle</name>
        <qualifiedname>Bvr::Meta::TryConvertUntypedHandle</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>untyped</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="23" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="23" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1aa104cdc32ab5931106766ffb1fc33f87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>bool Bvr::Meta::TryConvertTypedHandle</definition>
        <argsstring>(const Instance &amp;typed, Variant &amp;dst)</argsstring>
        <name>TryConvertTypedHandle</name>
        <qualifiedname>Bvr::Meta::TryConvertTypedHandle</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>typed</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="54" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="54" bodyend="68"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Attribute.hpp" line="3" column="1"/>
  </compounddef>
</doxygen>
