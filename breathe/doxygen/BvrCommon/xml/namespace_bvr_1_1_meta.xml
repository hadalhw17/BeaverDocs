<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_meta" kind="namespace" language="C++">
    <compoundname>Bvr::Meta</compoundname>
    <innerclass refid="class_bvr_1_1_meta_1_1_type" prot="public">Bvr::Meta::Type</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_aritmetic" prot="public">Bvr::Meta::VariantPolicyAritmetic</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_small" prot="public">Bvr::Meta::VariantPolicySmall</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_big" prot="public">Bvr::Meta::VariantPolicyBig</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type" prot="public">Bvr::Meta::RawArrayType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type_impl" prot="public">Bvr::Meta::RawArrayTypeImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type_impl_3_01_t_0fsize_0e_4" prot="public">Bvr::Meta::RawArrayTypeImpl&lt; T[size]&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_raw_array_type_3_01_t_00_01typename_01std_1_1enable__if__t_3_01std_1_1isa086d1001e183f9a3b6b298080ac7d18" prot="public">Bvr::Meta::RawArrayType&lt; T, typename std::enable_if_t&lt; std::is_array_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_data_policy_base" prot="public">Bvr::Meta::VariantDataPolicyBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_string" prot="public">Bvr::Meta::VariantPolicyString</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_void" prot="public">Bvr::Meta::VariantPolicyVoid</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_nullptr_t" prot="public">Bvr::Meta::VariantPolicyNullptrT</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_variant_policy_empty" prot="public">Bvr::Meta::VariantPolicyEmpty</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_void_variant_t" prot="public">Bvr::Meta::VoidVariantT</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_argument_wrapper" prot="public">Bvr::Meta::ArgumentWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_global_scope" prot="public">Bvr::Meta::GlobalScope</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry" prot="public">Bvr::Meta::TypeRegistry</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_variant_associative_view" prot="public">Bvr::Meta::VariantAssociativeView</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_enum" prot="public">Bvr::Meta::Enum</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder" prot="public">Bvr::Meta::WrapperBinder</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1reference__wrapper_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1unique__ptr_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::unique_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_wrapper_binder_3_01std_1_1weak__ptr_3_01_t_01_4_01_4" prot="public">Bvr::Meta::WrapperBinder&lt; std::weak_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_variant_sequential_view" prot="public">Bvr::Meta::VariantSequentialView</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_visitor" prot="public">Bvr::Meta::Visitor</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_class_data" prot="public">Bvr::Meta::ClassData</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_data" prot="public">Bvr::Meta::TypeData</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" prot="public">Bvr::Meta::PropertyWrapperBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_member_property_wrapper" prot="public">Bvr::Meta::MemberPropertyWrapper</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_property" prot="public">Bvr::Meta::Property</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_attribute" prot="public">Bvr::Meta::Attribute</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_attribute_storage" prot="public">Bvr::Meta::AttributeStorage</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl" prot="public">Bvr::Meta::CountArgsImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_4_01_4" prot="public">Bvr::Meta::CountArgsImpl&lt; FilterT, TypeList&lt;&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_01_filter_t_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::CountArgsImpl&lt; FilterT, TypeList&lt; FilterT, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_01_other_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::CountArgsImpl&lt; FilterT, TypeList&lt; Other, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_argument_extractor" prot="public">Bvr::Meta::ArgumentExtractor</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_decay_except_array" prot="public">Bvr::Meta::DecayExceptArray</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_variant" prot="public">Bvr::Meta::Variant</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_instance" prot="public">Bvr::Meta::Instance</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" prot="public">Bvr::Meta::MethodWrapperBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_member_method_wrapper" prot="public">Bvr::Meta::MemberMethodWrapper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_static_method_wrapper" prot="public">Bvr::Meta::StaticMethodWrapper</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_method" prot="public">Bvr::Meta::Method</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_registry_replayer" prot="public">Bvr::Meta::RegistryReplayer</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_conversion_method_base" prot="public">Bvr::Meta::ConversionMethodBase</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_typed_conversion_method" prot="public">Bvr::Meta::TypedConversionMethod</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_conversion_method" prot="public">Bvr::Meta::ConversionMethod</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_argument" prot="public">Bvr::Meta::Argument</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" prot="public">Bvr::Meta::HasCmpEqImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq" prot="public">Bvr::Meta::HasCmpEq</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_traits" prot="public">Bvr::Meta::PropertyTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_traits_3_01_t_07_b_1_1_5_08_4" prot="public">Bvr::Meta::PropertyTraits&lt; T(B::*)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_is_property_of" prot="public">Bvr::Meta::IsPropertyOf</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list" prot="public">Bvr::Meta::TypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_as_type_list" prot="public">Bvr::Meta::AsTypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_as_type_list_3_01_type___list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::AsTypeList&lt; Type_List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element" prot="public">Bvr::Meta::TypeListElement</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_s_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; S, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_010_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; 0, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" prot="public">Bvr::Meta::MaxSizeOfListImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_t_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_t0_00_01_t1_00_01_u_8_8_8_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; T0, T1, U... &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" prot="public">Bvr::Meta::MaxAlignOfListImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_t_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_t0_00_01_t1_00_01_u_8_8_8_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; T0, T1, U... &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="union_bvr_1_1_meta_1_1___align_type" prot="public">Bvr::Meta::_AlignType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned" prot="public">Bvr::Meta::_Aligned</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01_t_00_01true_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, T, true &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, double, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01int_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, int, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01short_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, short, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01char_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, char, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_aligned_storage" prot="public">Bvr::Meta::AlignedStorage</innerclass>
    <innernamespace refid="namespace_bvr_1_1_meta_1_1_detail">Bvr::Meta::Detail</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta_1_1_interface">Bvr::Meta::Interface</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0" prot="public" static="no" strong="yes">
        <type></type>
        <name>EVariantPolicyOP</name>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a0e181f89f47654b86f3beb42f5cc08b8" prot="public">
          <name>Destroy</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0acf00271107fced5ef15ebc057d09eb7d" prot="public">
          <name>IsValid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0aff24590464659ee8cdec688128c35f89" prot="public">
          <name>Clone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a8778f5cc5ee1685fb97ad92e33e63225" prot="public">
          <name>Swap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a6bf4bc98130395b9474498c5e921f062" prot="public">
          <name>GetValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a789469f913a23c20d6ca549a4de03d32" prot="public">
          <name>CreateWrappedValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a19b28d3ca39577cc844d542b6a7ff000" prot="public">
          <name>ExtractWrappedValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0abe784e48d0174367297b636456c7bcf1" prot="public">
          <name>GetType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a29b22cf62c4f94e3a12de6424a5dca0a" prot="public">
          <name>GetRawPtr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a3f1d984495cbfacd1a9c7cfd91dfc8ce" prot="public">
          <name>CmpEq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a4cd9f3996d60790cd11c04f842ebc43c" prot="public">
          <name>Cast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0ac8be2b508837fe06cf1e422b300380ac" prot="public">
          <name>CreateSequentialView</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0a79bafe3c870188a2d8e615cbd6e7593d" prot="public">
          <name>CreateAssociativeView</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1ab51851a60a29e0d06f7a48e35d0b6df0aea4f157950228b8f869a6387d7d6a6a7" prot="public">
          <name>GetObjectStorage</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="77" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="77" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721c" prot="public" static="no" strong="yes">
        <type>TypeTraitVal</type>
        <name>TypeTraitsInfos</name>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cab90ce872303feba1276016190c93fd8e" prot="public">
          <name>IsEmpty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca1a5acf64c04cc9860de0ebd9bbf175cc" prot="public">
          <name>IsClass</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cad9631ec4533424aa46f8253d0ced130e" prot="public">
          <name>IsEnum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca7515d3a3055b2139844aa9e06fce46cf" prot="public">
          <name>IsArray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca19f24dd953415de0a5f45a41b2067669" prot="public">
          <name>IsPointer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721ca95964b0637d80f3e2d6a23745f15fbdc" prot="public">
          <name>IsArithmetic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721caf455b17ec8e8c2ce0315df7c275a4930" prot="public">
          <name>IsSequentialContainer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cabf9bb1af3b4c603c2585a40eac62b1a6" prot="public">
          <name>IsAssociativeContainer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1ac5bbe0babfd3aab238904ec92c4c721cae93f994f01c537c4e2f7d8528c3eb5e9" prot="public">
          <name>Count</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="27" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="27" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_type_8hpp_1a19e1683ad25c01fd4300683749273abe" prot="public" static="no">
        <type>std::uintptr_t</type>
        <definition>typedef std::uintptr_t Bvr::Meta::ptr_t</definition>
        <argsstring></argsstring>
        <name>ptr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="6" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1ad79c7c713bbbcfa8fe4efdc113490fc8" prot="public" static="no">
        <type>bool(*)(EVariantPolicyOP, const VariantData &amp;data, <ref refid="struct_bvr_1_1_meta_1_1_argument_wrapper" kindref="compound">ArgumentWrapper</ref>)</type>
        <definition>using Bvr::Meta::VariantPolicyFN = typedef bool (*)(EVariantPolicyOP, const VariantData&amp; data, ArgumentWrapper)</definition>
        <argsstring></argsstring>
        <name>VariantPolicyFN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="94" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a6e88a4615e262446c1656f367a95ecd9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>bCanPlace</declname>
            <defname>bCanPlace</defname>
            <defval>(sizeof(T) &lt;= sizeof(VariantData) &amp;&amp;                                        (std::alignment_of_v&lt;T&gt; &lt;=                                         std::alignment_of_v&lt;VariantData&gt;))</defval>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, bCanPlace &gt;</type>
        <definition>using Bvr::Meta::CanPlaceInVariant = typedef std::integral_constant&lt;bool, bCanPlace&gt;</definition>
        <argsstring></argsstring>
        <name>CanPlaceInVariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="100" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a9e9eeb8f3b6885f5d872ec6369911545" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_raw_array_type" kindref="compound">RawArrayType</ref>&lt; T &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::RawArrayTypeT = typedef typename RawArrayType&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>RawArrayTypeT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="117" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1aa73e11c5bccc641c9ce4e3c3a25256fb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, std::is_array_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; char, RawArrayTypeT&lt; T &gt; &gt; &amp;&amp;(std::rank&lt; T &gt;()==1)&gt;</type>
        <definition>using Bvr::Meta::Is1DCharArray = typedef std::integral_constant&lt;bool, std::is_array_v&lt;T&gt; &amp;&amp; std::is_same_v&lt;char, RawArrayTypeT&lt;T&gt; &gt; &amp;&amp; (std::rank&lt;T&gt;() == 1)&gt;</definition>
        <argsstring></argsstring>
        <name>Is1DCharArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="120" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a2c4ab96b01e97f62b2b54af9852eb16f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; std::is_same_v&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_void_variant_t" kindref="compound">VoidVariantT</ref> &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_void" kindref="compound">VariantPolicyVoid</ref>, std::conditional_t&lt; std::is_same_v&lt; T, std::nullptr_t &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_nullptr_t" kindref="compound">VariantPolicyNullptrT</ref>, std::conditional_t&lt; std::is_same_v&lt; T, std::string &gt;||Is1DCharArray&lt; T &gt;::value, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_string" kindref="compound">VariantPolicyString</ref>, std::conditional_t&lt; CanPlaceInVariant&lt; T &gt;::value, std::conditional_t&lt; std::is_arithmetic_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_aritmetic" kindref="compound">VariantPolicyAritmetic</ref>&lt; T &gt;, std::conditional_t&lt; std::is_enum_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_small" kindref="compound">VariantPolicySmall</ref>&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_default_caster" kindref="compound">Detail::EnumCaster</ref>&lt; T &gt; &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_small" kindref="compound">VariantPolicySmall</ref>&lt; T &gt; &gt;&gt;, std::conditional_t&lt; std::is_enum_v&lt; T &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_big" kindref="compound">VariantPolicyBig</ref>&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_default_caster" kindref="compound">Detail::EnumCaster</ref>&lt; T &gt; &gt;, <ref refid="struct_bvr_1_1_meta_1_1_variant_policy_big" kindref="compound">VariantPolicyBig</ref>&lt; T &gt; &gt;&gt; &gt;&gt; &gt;</type>
        <definition>using Bvr::Meta::VariantPolicy = typedef std::conditional_t&lt; std::is_same_v&lt;T, VoidVariantT&gt;, VariantPolicyVoid, std::conditional_t&lt; std::is_same_v&lt;T, std::nullptr_t&gt;, VariantPolicyNullptrT, std::conditional_t&lt; std::is_same_v&lt;T, std::string&gt; || Is1DCharArray&lt;T&gt;::value, VariantPolicyString, std::conditional_t&lt; CanPlaceInVariant&lt;T&gt;::value, std::conditional_t&lt; std::is_arithmetic_v&lt;T&gt;, VariantPolicyAritmetic&lt;T&gt;, std::conditional_t&lt; std::is_enum_v&lt;T&gt;, VariantPolicySmall&lt;T, Detail::EnumCaster&lt;T&gt; &gt;, VariantPolicySmall&lt;T&gt; &gt;&gt;, std::conditional_t&lt;std::is_enum_v&lt;T&gt;, VariantPolicyBig&lt;T, Detail::EnumCaster&lt;T&gt; &gt;, VariantPolicyBig&lt;T&gt; &gt;&gt; &gt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="126" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_data_8hpp_1afa6442145b5bd080706c4eaab39e8200" prot="public" static="no">
        <type>AsTypeListT&lt; int, long int, float, double, unsigned int, unsigned long int, signed char, unsigned char, signed short int, unsigned short int, long int, unsigned long long int, long double, void * &gt;</type>
        <definition>using Bvr::Meta::VariantBaseTypes = typedef AsTypeListT&lt;int, long int, float, double, unsigned int, unsigned long int, signed char, unsigned char, signed short int, unsigned short int, long int, unsigned long long int, long double, void*&gt;</definition>
        <argsstring></argsstring>
        <name>VariantBaseTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" line="7" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_data_8hpp_1a8d7ffc3a2d2bc2df16e9e5da79917561" prot="public" static="no">
        <type><ref refid="struct_bvr_1_1_meta_1_1_aligned_storage" kindref="compound">AlignedStorage</ref>&lt; MaxSizeOfList&lt; VariantBaseTypes &gt;::value, MaxAlignOfList&lt; VariantBaseTypes &gt;::value &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::VariantData = typedef AlignedStorage&lt;MaxSizeOfList&lt;VariantBaseTypes&gt;::value, MaxAlignOfList&lt;VariantBaseTypes&gt;::value&gt;::Type</definition>
        <argsstring></argsstring>
        <name>VariantData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" line="13" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1adf2cd026e2649e6c4bc35cd48262b195" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Bvr::Meta::TypeTraitVal = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>TypeTraitVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="26" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1ae55a1020172e55266b3352c39db5597b" prot="public" static="no">
        <type>std::bitset&lt; static_cast&lt; std::size_t &gt;(TypeTraitsInfos::Count)&gt;</type>
        <definition>using Bvr::Meta::TypeTraits = typedef std::bitset&lt;static_cast&lt;std::size_t&gt;(TypeTraitsInfos::Count)&gt;</definition>
        <argsstring></argsstring>
        <name>TypeTraits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="40" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1a669251e9532a322dd268849cafa44d4e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; std::is_same_v&lt; T, void &gt;, <ref refid="class_bvr_1_1_meta_1_1_type_registry" kindref="compound">TypeRegistry</ref>, <ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">TypeRegistry::Class_</ref>&lt; T &gt; &gt;</type>
        <definition>using Bvr::Meta::BinderBase = typedef std::conditional_t&lt;std::is_same_v&lt;T, void&gt;, TypeRegistry, TypeRegistry::Class_&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BinderBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="531" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_argument_extractor_8hpp_1a142f0b1631b96f63bc4fc681ab79f21d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FilterT</type>
          </param>
          <param>
            <type>typename ListT</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_bvr_1_1_meta_1_1_count_args_impl" kindref="compound">CountArgsImpl</ref>&lt; FilterT, AsTypeListT&lt; ListT &gt; &gt;::Value &gt;</type>
        <definition>using Bvr::Meta::CountArgs = typedef std::integral_constant&lt;std::size_t, CountArgsImpl&lt;FilterT, AsTypeListT&lt;ListT&gt; &gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>CountArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" line="23" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1a2e8649d4b7c67360495fb1b6d84f5160" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_decay_except_array" kindref="compound">DecayExceptArray</ref>&lt; T &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::DecayExceptArrayT = typedef typename DecayExceptArray&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>DecayExceptArrayT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="17" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1ab52b7833952c292d8f63651398331f29" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Decayed</type>
            <defval>DecayExceptArrayT&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_same_v&lt; Decayed, <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &gt;, Decayed &gt;</type>
        <definition>using Bvr::Meta::DecayVariantT = typedef std::enable_if_t&lt;!std::is_same_v&lt;Decayed, Variant&gt;, Decayed&gt;</definition>
        <argsstring></argsstring>
        <name>DecayVariantT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="20" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_argument_8hpp_1acdf6e64de6b6858fd8d1ffc4973ea28c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref>, std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;</type>
        <definition>using Bvr::Meta::IsVariant = typedef std::is_same&lt;Variant, std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>IsVariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp" line="10" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1acde3f003514a0d58ece94733f66322d1" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Bvr::Meta::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="4" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a529a8c121c081fde57e66a5b34fb470a" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using Bvr::Meta::ptrdiff_t = typedef std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>ptrdiff_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="5" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a91d8431bdc95eb74fe0f848ad2aad767" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_as_type_list" kindref="compound">AsTypeList</ref>&lt; T... &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::AsTypeListT = typedef typename AsTypeList&lt;T...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>AsTypeListT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="77" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a8184e8b72b8fced61b11722a73d46697" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt; S, List &gt;::<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Bvr::Meta::TypeListElementT = typedef typename TypeListElement&lt;S, List&gt;::Type</definition>
        <argsstring></argsstring>
        <name>TypeListElementT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="91" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a8643f3a5264078266b2228bf45e833fd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt; Ts... &gt;::Value &gt;</type>
        <definition>using Bvr::Meta::MaxSizeOfList = typedef std::integral_constant&lt;std::size_t, MaxSizeOfListImpl&lt;Ts...&gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>MaxSizeOfList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="114" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1ac08642a06295181728d8c2bc2ea1bc84" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt; Ts... &gt;::Value &gt;</type>
        <definition>using Bvr::Meta::MaxAlignOfList = typedef std::integral_constant&lt;std::size_t, MaxAlignOfListImpl&lt;Ts...&gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>MaxAlignOfList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="138" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_instance_8hpp_1aae44eef2023bd7b003a25b905df56bb6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>typename std::decay&lt;T&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept Bvr::Meta::Instanceable</definition>
        <argsstring></argsstring>
        <name>Instanceable</name>
        <initializer>=
    !std::is_same_v&lt;<ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref>, Tp&gt; &amp;&amp; !std::is_same_v&lt;<ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref>, Tp&gt; &amp;&amp;
    !std::is_same_v&lt;<ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_object_memory_storage" kindref="compound">Detail::ObjectMemoryStorage</ref>, Tp&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Instance.hpp" line="7" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Instance.hpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_argument_8hpp_1a60892f28a772443ae08d033f283b38a6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept Bvr::Meta::Argumentable</definition>
        <argsstring></argsstring>
        <name>Argumentable</name>
        <initializer>= !std::is_same_v&lt;T, <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref>&gt; &amp;&amp; !IsVariant&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp" line="14" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_property_traits_8hpp_1a363574ff9c51f5451aacb756978c6d64" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Prop</type>
          </param>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept Bvr::Meta::MemberOf</definition>
        <argsstring></argsstring>
        <name>MemberOf</name>
        <initializer>= <ref refid="struct_bvr_1_1_meta_1_1_is_property_of" kindref="compound">IsPropertyOf</ref>&lt;Base, Prop&gt;::Value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="62" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_property_traits_8hpp_1af21f5b591e740f0dcfbfd3e616fa7db6" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t Bvr::Meta::AlignmentOf_V</definition>
        <argsstring></argsstring>
        <name>AlignmentOf_V</name>
        <initializer>= alignof(T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="64" column="37" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_type_8hpp_1a4a947ef3436397fab111bb8703ebba16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;TypeData&gt; Bvr::Meta::MakeTypeData</definition>
        <argsstring>()</argsstring>
        <name>MakeTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="19" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" declline="19" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_type_8hpp_1abb7406c8c57837eea303afac4fb89446" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t Bvr::Meta::OffsetOf</definition>
        <argsstring>(T member)</argsstring>
        <name>OffsetOf</name>
        <param>
          <type>T</type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="22" column="31" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="_enum_8hpp_1a9fbb26d41bacc24c7396e6db2c1653b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_data" kindref="compound">Detail::EnumData</ref>&lt; EnumT &gt;</type>
        <definition>Detail::EnumData&lt;EnumT&gt; Bvr::Meta::Value</definition>
        <argsstring>(std::string_view name, EnumT val)</argsstring>
        <name>Value</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>EnumT</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enum.hpp" line="124" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enum.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a4a947ef3436397fab111bb8703ebba16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;TypeData&gt; Bvr::Meta::MakeTypeData</definition>
        <argsstring>()</argsstring>
        <name>MakeTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="210" column="25" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="210" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a55073063ae3969f0f38f332e039c6a3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>AttributeCount</declname>
            <defname>AttributeCount</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;PropertyWrapperBase&gt; Bvr::Meta::MakePropertyData</definition>
        <argsstring>(std::string_view name, T prop, const std::array&lt; Attribute, AttributeCount &gt; &amp;attributes)</argsstring>
        <name>MakePropertyData</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="class_bvr_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref>, AttributeCount &gt; &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="429" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="429" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a10237321b5854f2e8d0c9b38ed5e2517" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TParent</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>AttributeCount</declname>
            <defname>AttributeCount</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;MethodWrapperBase&gt; Bvr::Meta::MakeMethodData</definition>
        <argsstring>(std::string_view name, T prop, const std::array&lt; Attribute, AttributeCount &gt; &amp;attributes)</argsstring>
        <name>MakeMethodData</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="class_bvr_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref>, AttributeCount &gt; &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="437" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="437" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a6112ea8a91cd7a339480e77414dfeb88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::AddProperty</definition>
        <argsstring>(TypeData *pData, Property prop)</argsstring>
        <name>AddProperty</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pData</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="449" column="15" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="449" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a8a327de18af81df9e83254bb0d10b0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Bvr::Meta::ExtractAttributes</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ExtractAttributes</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" line="526" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="526" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="_argument_extractor_8hpp_1ae12b394a6e1120a9835c64e5955fcd5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; Bvr::Meta::ForwardToVector</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ForwardToVector</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" line="76" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_argument_extractor_8hpp_1a73d1234ab69fea3ca94bf3aed584de40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, CountArgs&lt; T, <ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt; Args... &gt; &gt;::value &gt;</type>
        <definition>std::array&lt;T, CountArgs&lt;T, TypeList&lt;Args...&gt; &gt;::value&gt; Bvr::Meta::ForwardToArray</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ForwardToArray</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" line="82" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentExtractor.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1a05cfcc31de777ac479ffda8b7b60ae68" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* Bvr::Meta::unsafe_variant_cast</definition>
        <argsstring>(Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="240" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1a84a99598900331a1d6c704cdaf1ef216" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* Bvr::Meta::unsafe_variant_cast</definition>
        <argsstring>(const Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="247" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1ab72db80d49dfcac352440e25a8523da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Bvr::Meta::variant_cast</definition>
        <argsstring>(Variant &amp;variant)</argsstring>
        <name>variant_cast</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="252" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1aa15aa6b2b8aead3b4fad8660edcf3396" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Bvr::Meta::variant_cast</definition>
        <argsstring>(Variant &amp;&amp;variant)</argsstring>
        <name>variant_cast</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" line="262" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="_property_traits_8hpp_1a3667c94ee60a1257cc40cfb7ebef2808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ptr_t</type>
        <definition>ptr_t Bvr::Meta::AsPointer</definition>
        <argsstring>(const T &amp;obj)</argsstring>
        <name>AsPointer</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" line="189" column="19" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1a3f564772bbafc562e75fcd4244b6f8c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::IsTypedHandle</definition>
        <argsstring>(Type t)</argsstring>
        <name>IsTypedHandle</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="8" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="8" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1a5eefc64510f0aeb0b49e5c1e85c6453b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::IsUntypedHandle</definition>
        <argsstring>(Type t)</argsstring>
        <name>IsUntypedHandle</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="17" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1a4aeda5552d724a7936327c7de50fdc78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::TryConvertUntypedHandle</definition>
        <argsstring>(const Type &amp;dstType, const Instance &amp;untyped, Variant &amp;dst)</argsstring>
        <name>TryConvertUntypedHandle</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>untyped</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="21" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="21" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_asset_meta_helpers_8hpp_1aa104cdc32ab5931106766ffb1fc33f87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::TryConvertTypedHandle</definition>
        <argsstring>(const Instance &amp;typed, Variant &amp;dst)</argsstring>
        <name>TryConvertTypedHandle</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>typed</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" line="43" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetMetaHelpers.hpp" bodystart="43" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/MessageBox/FileDialogs.hpp" line="3" column="1"/>
  </compounddef>
</doxygen>
