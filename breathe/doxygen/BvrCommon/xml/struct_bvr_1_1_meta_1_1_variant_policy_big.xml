<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_meta_1_1_variant_policy_big" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::Meta::VariantPolicyBig</compoundname>
    <basecompoundref refid="struct_bvr_1_1_meta_1_1_variant_data_policy_base" prot="public" virt="non-virtual">Bvr::Meta::VariantDataPolicyBase&lt; T, VariantPolicyBig&lt; T &gt;, CasterT &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> T</type>
      </param>
      <param>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">CasterT</ref></type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_variant_policy_big_1a1051651aa6c2a57a1fc23f033c3725e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> U</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>static void Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;::Create</definition>
        <argsstring>(U &amp;&amp;value, VariantData &amp;dst)</argsstring>
        <name>Create</name>
        <qualifiedname>Bvr::Meta::VariantPolicyBig::Create</qualifiedname>
        <param>
          <type>U &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">VariantData</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="271" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_variant_policy_big_1a296619e5faacb5612c33deabb2b3c3fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>static void Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;::Destroy</definition>
        <argsstring>(T &amp;value)</argsstring>
        <name>Destroy</name>
        <qualifiedname>Bvr::Meta::VariantPolicyBig::Destroy</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="275" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_variant_policy_big_1a5803504f864cb5d620d9e05403a60acb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>static void Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;::Clone</definition>
        <argsstring>(const T &amp;value, VariantData &amp;dst)</argsstring>
        <name>Clone</name>
        <qualifiedname>Bvr::Meta::VariantPolicyBig::Clone</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">VariantData</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="277" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_variant_policy_big_1aaac920a42dbd555432a90f44d96b9fe0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>static void Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;::Swap</definition>
        <argsstring>(T &amp;value, VariantData &amp;dst)</argsstring>
        <name>Swap</name>
        <qualifiedname>Bvr::Meta::VariantPolicyBig::Swap</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">VariantData</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="281" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_variant_policy_big_1adb9cc5cd9537bd2653cfec6a57277fef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T &amp;</type>
        <definition>static const T &amp; Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;::GetValue</definition>
        <argsstring>(const VariantData &amp;data)</argsstring>
        <name>GetValue</name>
        <qualifiedname>Bvr::Meta::VariantPolicyBig::GetValue</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">VariantData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="285" column="20" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="285" bodyend="287"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_variant_policy_big"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Bvr::Meta::VariantDataPolicyBase&lt; T, VariantPolicyBig&lt; T &gt;, CasterT &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_variant_data_policy_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Bvr::Meta::VariantPolicyBig&lt; T, CasterT &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_variant_policy_big"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Bvr::Meta::VariantDataPolicyBase&lt; T, VariantPolicyBig&lt; T &gt;, CasterT &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_variant_data_policy_base"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" line="268" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp" bodystart="269" bodyend="288"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_meta_1_1_variant_policy_big_1a5803504f864cb5d620d9e05403a60acb" prot="public" virt="non-virtual"><scope>Bvr::Meta::VariantPolicyBig</scope><name>Clone</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_variant_policy_big_1a1051651aa6c2a57a1fc23f033c3725e0" prot="public" virt="non-virtual"><scope>Bvr::Meta::VariantPolicyBig</scope><name>Create</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_variant_policy_big_1a296619e5faacb5612c33deabb2b3c3fa" prot="public" virt="non-virtual"><scope>Bvr::Meta::VariantPolicyBig</scope><name>Destroy</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_variant_policy_big_1adb9cc5cd9537bd2653cfec6a57277fef" prot="public" virt="non-virtual"><scope>Bvr::Meta::VariantPolicyBig</scope><name>GetValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_variant_data_policy_base_1a4a24932aed53bb27858827a7e0ee9119" prot="public" virt="non-virtual"><scope>Bvr::Meta::VariantPolicyBig</scope><name>Invoke</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_variant_policy_big_1aaac920a42dbd555432a90f44d96b9fe0" prot="public" virt="non-virtual"><scope>Bvr::Meta::VariantPolicyBig</scope><name>Swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
