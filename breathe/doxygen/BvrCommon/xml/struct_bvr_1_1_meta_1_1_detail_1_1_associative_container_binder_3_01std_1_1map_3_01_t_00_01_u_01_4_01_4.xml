<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1map_3_01_t_00_01_u_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</compoundname>
    <basecompoundref refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map" prot="public" virt="non-virtual">Bvr::Meta::Detail::AssociativeContainerBinderBaseMap&lt; std::map&lt; T, U &gt; &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename U</type>
      </param>
    </templateparamlist>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBase&lt; T &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base"/>
      </node>
      <node id="2">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBaseMap&lt; std::map&lt; T, U &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1map_3_01_t_00_01_u_01_4_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBase&lt; T &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base"/>
      </node>
      <node id="2">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBaseMap&lt; std::map&lt; T, U &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1map_3_01_t_00_01_u_01_4_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="127" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="128" bodyend="128"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1a0b2e435699e93102dc89d5e3fc3e23b8" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>Base</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a4baf705caad6f2ffe200e59500564b6b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>begin</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a67eed5db6c173c05d4cfe71666ee77ea" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>begin</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1a3d2cd06c0225c0a05dab2ada27c02693" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>CIteratorT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a243e2a63a3b0ec6f7c22b0f609ed5fab" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>clear</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1ab3436d068a2b4d2c7be8f242d33f478f" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>ContainerT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a9028ab602d05ff7f79df217e9f39f54f" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>empty</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a2f5a7c652368c0acc2b28782bad8ea64" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>end</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a6d768dd1dc0fe8454282cd7be949516a" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>end</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a2ae4ebef207d167518be94e6df6ae505" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>erase</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1aa475cabbc83d7901468f15413b18a2b3" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>find</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a1f001818401982862677c2e2420a6a38" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>find</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1af2f554a58ae37ec2e30b612d3b2369a2" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>GetKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1a22e7d1b71f404121363d15e09bac51be" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>GetValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1a9dfb839847c8eeaf72775d5c2beffa41" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>GetValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a0da640bcf6ae8af69d9cbb129430dd3c" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>InsertKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1a0cbc0e1a6028b8b916c256ef4a9d9bc7" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>InsertKeyValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1a4f55c7d49d1e2234c6daf82472bc47fa" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>IteratorT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1ae590339e51279474b7342eb336889f7d" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>KeyT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a5e6e393f4a2f936d363e50422b2a23cb" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>size</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_map_1aa02c64694d5255575c40df75ce7fa9d7" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::map&lt; T, U &gt; &gt;</scope><name>ValueT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
