<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_property_traits_8hpp" kind="file" language="C++">
    <compoundname>PropertyTraits.hpp</compoundname>
    <includedby refid="_argument_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp</includedby>
    <includedby refid="_method_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Method.hpp</includedby>
    <includedby refid="_property_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Property.hpp</includedby>
    <includedby refid="_type_macros_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeMacros.hpp</includedby>
    <includedby refid="_type_reg_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp</includedby>
    <includedby refid="_variant_data_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp</includedby>
    <includedby refid="_function_traits_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp</includedby>
    <invincdepgraph>
      <node id="8">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetManager.hpp</label>
        <link refid="_asset_manager_8hpp_source"/>
      </node>
      <node id="9">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/IniRW.hpp</label>
        <link refid="_ini_r_w_8hpp_source"/>
      </node>
      <node id="2">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp</label>
        <link refid="_argument_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseClassInfo.hpp</label>
        <link refid="_base_class_info_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp</label>
        <link refid="_base_type_refl_8hpp_source"/>
      </node>
      <node id="3">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enum.hpp</label>
        <link refid="_enum_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/LocalRegSink.hpp</label>
        <link refid="_local_reg_sink_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Meta.hpp</label>
        <link refid="_meta_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Method.hpp</label>
        <link refid="_method_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Property.hpp</label>
        <link refid="_property_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp</label>
        <link refid="_property_traits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp</label>
        <link refid="_type_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp</label>
        <link refid="_type_desc_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp</label>
        <link refid="_type_impl_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeMacros.hpp</label>
        <link refid="_type_macros_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp</label>
        <link refid="_type_reg_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp</label>
        <link refid="_variant_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantData.hpp</label>
        <link refid="_variant_data_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp</label>
        <link refid="_variant_impl_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantPolicy.hpp</label>
        <link refid="_variant_policy_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Visitor.hpp</label>
        <link refid="_visitor_8hpp_source"/>
      </node>
      <node id="22">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp</label>
        <link refid="_function_traits_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Invokable.hpp</label>
        <link refid="_invokable_8hpp_source"/>
      </node>
      <node id="24">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Registry.hpp</label>
        <link refid="_registry_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_has_is_valid_alias" prot="public">Bvr::Meta::Detail::HasIsValidAlias</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" prot="public">Bvr::Meta::HasCmpEqImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl_3_01std_1_1pair_3_01_t_f_00_01_t_s_01_4_00_01std_1_1pair_3_01_t_f_00_01_t_s_01_4_01_4" prot="public">Bvr::Meta::HasCmpEqImpl&lt; std::pair&lt; TF, TS &gt;, std::pair&lt; TF, TS &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_has_cmp_eq" prot="public">Bvr::Meta::HasCmpEq</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_property_traits_3_01_t_07_b_1_1_5_08_4" prot="public">Bvr::Meta::PropertyTraits&lt; T(B::*)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_is_property_of" prot="public">Bvr::Meta::IsPropertyOf</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list" prot="public">Bvr::Meta::TypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_as_type_list" prot="public">Bvr::Meta::AsTypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_as_type_list_3_01_type___list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::AsTypeList&lt; Type_List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_4" prot="public">Bvr::Meta::TypeListCat&lt;&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_01_type_list_3_01_components_8_8_8_01_4_00_01_type_list_0536c8889d93e8e79c0a3aec326f9217" prot="public">Bvr::Meta::TypeListCat&lt; TypeList&lt; Components... &gt;, TypeList&lt; OtherComponents... &gt;, ExtraLists... &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_01_type_list_3_01_components_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListCat&lt; TypeList&lt; Components... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_s_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; S, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_010_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; 0, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_i_00_01_type_list_3_4_01_4" prot="public">Bvr::Meta::TypeListElement&lt; I, TypeList&lt;&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" prot="public">Bvr::Meta::MaxSizeOfListImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_t_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::MaxSizeOfListImpl&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" prot="public">Bvr::Meta::MaxAlignOfListImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_t_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Meta::MaxAlignOfListImpl&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="union_bvr_1_1_meta_1_1___align_type" prot="public">Bvr::Meta::_AlignType</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01_t_00_01true_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, T, true &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, double, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4_1_1_type" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, double, false &gt;::Type</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01int_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, int, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01short_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, short, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01char_00_01false_01_4" prot="public">Bvr::Meta::_Aligned&lt; Len, Align, char, false &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_aligned_storage" prot="public">Bvr::Meta::AlignedStorage</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta">Bvr::Meta</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta_1_1_detail">Bvr::Meta::Detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr::Meta<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">size_t<sp/><sp/><sp/><sp/>=<sp/>std::size_t;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ptrdiff_t<sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ptr_t<sp/><sp/><sp/><sp/><sp/>=<sp/>std::uintptr_t;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SequentialContainerBinder;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssociativeContainerBinder;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="struct_bvr_1_1_meta_1_1_detail_1_1_has_is_valid_alias" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_has_is_valid_alias" kindref="compound">HasIsValidAlias</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">YesType</ref><sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[1];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">NoType</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[2];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_events" kindref="compound">YesType</ref>&amp;<sp/>Check(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U::IsValid*);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_events" kindref="compound">NoType</ref>&amp;<sp/><sp/>Check(...);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_bvr_1_1_events" kindref="compound">Check&lt;T&gt;</ref>(0))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_bvr_1_1_events" kindref="compound">YesType</ref>));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tp<sp/>=<sp/>std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IsSequentialContainer<sp/>=<sp/>std::integral_constant&lt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref>,<sp/>!<ref refid="struct_bvr_1_1_events" kindref="compound">HasIsValidAlias&lt;SequentialContainerBinder&lt;Tp&gt;</ref>&gt;::Value&gt;;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tp<sp/>=<sp/>std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IsAssociativeContainer<sp/>=<sp/>std::integral_constant&lt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref>,<sp/>!<ref refid="struct_bvr_1_1_events" kindref="compound">HasIsValidAlias&lt;AssociativeContainerBinder&lt;Tp&gt;</ref>&gt;::Value&gt;;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EqualTo&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" kindref="compound">HasCmpEqImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(U*)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;U&gt;()<sp/>==<sp/>std::declval&lt;V&gt;());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::is_same&lt;bool,<sp/>decltype(test&lt;T,<sp/>EqualTo&gt;(0))&gt;::type;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TF,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TS&gt;</highlight></codeline>
<codeline lineno="45" refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl_3_01std_1_1pair_3_01_t_f_00_01_t_s_01_4_00_01std_1_1pair_3_01_t_f_00_01_t_s_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" kindref="compound">HasCmpEqImpl</ref>&lt;std::<ref refid="struct_bvr_1_1_events" kindref="compound">pair</ref>&lt;TF,<sp/>TS&gt;,<sp/>std::pair&lt;TF,<sp/>TS&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>std::bool_constant&lt;HasCmpEqImpl&lt;TF,<sp/>TF&gt;::type::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" kindref="compound">HasCmpEqImpl&lt;TS, TS&gt;::type::value</ref>&gt;;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="struct_bvr_1_1_meta_1_1_has_cmp_eq" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EqualTo<sp/>=<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_has_cmp_eq" kindref="compound">HasCmpEq</ref><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value<sp/>=</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_meta_1_1_has_cmp_eq_impl" kindref="compound">HasCmpEqImpl&lt;T, EqualTo&gt;::type::value</ref><sp/>||</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_arithmetic_v&lt;T&gt;<sp/>&amp;&amp;<sp/>std::is_arithmetic_v&lt;EqualTo&gt;);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct_bvr_1_1_meta_1_1_property_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_property_traits" kindref="compound">PropertyTraits</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="struct_bvr_1_1_meta_1_1_property_traits_3_01_t_07_b_1_1_5_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_property_traits" kindref="compound">PropertyTraits</ref>&lt;T(B::*)&gt;<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ObjectType<sp/><sp/><sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">PropertyType<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="struct_bvr_1_1_meta_1_1_is_property_of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Prop&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_is_property_of" kindref="compound">IsPropertyOf</ref><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value<sp/>=</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>PropertyTraits&lt;Prop&gt;::ObjectType,<sp/>Base&gt;;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Prop,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="68" refid="concept_bvr_1_1_meta_1_1_member_of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="concept_bvr_1_1_meta_1_1_member_of" kindref="compound">MemberOf</ref><sp/>=<sp/>IsPropertyOf&lt;Base,<sp/>Prop&gt;::Value;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>AlignmentOf_V<sp/>=<sp/></highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="struct_bvr_1_1_meta_1_1_type_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="struct_bvr_1_1_meta_1_1_as_type_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_as_type_list" kindref="compound">AsTypeList</ref><sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;T...&gt;;<sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type_List</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;</highlight></codeline>
<codeline lineno="79" refid="struct_bvr_1_1_meta_1_1_as_type_list_3_01_type___list_3_01_ts_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_as_type_list" kindref="compound">AsTypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Type_List</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>...&gt;;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">AsTypeListT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1_as_type_list" kindref="compound">AsTypeList</ref>&lt;T...&gt;::Type;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="struct_bvr_1_1_meta_1_1_type_list_cat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>&lt;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">TypeList&lt;&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">OtherComponents</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">ExtraLists</ref>&gt;</highlight></codeline>
<codeline lineno="89" refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_01_type_list_3_01_components_8_8_8_01_4_00_01_type_list_0536c8889d93e8e79c0a3aec326f9217" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>&lt;<ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>...&gt;,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">OtherComponents</ref>...&gt;,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">ExtraLists</ref>...&gt;<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>&lt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>...,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">OtherComponents</ref>...&gt;,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">ExtraLists</ref>...&gt;::Type;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>&gt;</highlight></codeline>
<codeline lineno="96" refid="struct_bvr_1_1_meta_1_1_type_list_cat_3_01_type_list_3_01_components_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>&lt;<ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>...&gt;;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TypeListCatT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">TypeListCat</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Components</ref>...&gt;::Type;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="struct_bvr_1_1_meta_1_1_type_list_element" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Head</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Tail</ref>&gt;</highlight></codeline>
<codeline lineno="106" refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_s_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt;S,<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Head</ref>,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Tail</ref>...&gt;&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt;S<sp/>-<sp/>1,<sp/>TypeList&lt;Tail...&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Head</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Tail</ref>&gt;</highlight></codeline>
<codeline lineno="110" refid="struct_bvr_1_1_meta_1_1_type_list_element_3_010_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt;0,<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Head</ref>,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Tail</ref>...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Head</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113" refid="struct_bvr_1_1_meta_1_1_type_list_element_3_01_i_00_01_type_list_3_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt;I,<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TypeListElementT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement&lt;S, List&gt;::Type</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;</highlight></codeline>
<codeline lineno="121" refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::integral_constant&lt;std::size_t,<sp/>std::max({sizeof(Ts)...})&gt;<sp/>{};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="125" refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt;T&gt;<sp/>:<sp/>std::integral_constant&lt;std::size_t,<sp/>sizeof(T)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;</highlight></codeline>
<codeline lineno="128" refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt;<ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>...&gt;&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt;Ts...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">MaxSizeOfList</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>...&gt;::type;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;</highlight></codeline>
<codeline lineno="133" refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::integral_constant&lt;std::size_t,<sp/>std::max({AlignmentOf_V&lt;Ts&gt;...})&gt;<sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137" refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::integral_constant&lt;std::size_t,<sp/>AlignmentOf_V&lt;T&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;</highlight></codeline>
<codeline lineno="141" refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt;<ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>...&gt;&gt;<sp/>:<sp/><ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt;Ts...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">MaxAlignOfList</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref>...&gt;::type;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="union_bvr_1_1_meta_1_1___align_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len&gt;<sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_bvr_1_1_meta_1_1___align_type" kindref="compound">_AlignType</ref><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/>_Val;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_Pad[<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>];</highlight></codeline>
<codeline lineno="149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOk&gt;</highlight></codeline>
<codeline lineno="152" refid="struct_bvr_1_1_meta_1_1___aligned" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="155" refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01_t_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>,<sp/>Align,<sp/>T,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">true</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">_AlignType&lt;T, Len&gt;</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align&gt;</highlight></codeline>
<codeline lineno="160" refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>,<sp/>Align,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">double</ref>,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">false</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="161" refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4_1_1_type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(Align)<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_Data[<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align&gt;</highlight></codeline>
<codeline lineno="167" refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01int_00_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>,<sp/>Align,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">false</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Next</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">double</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFits<sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Align &lt;= AlignmentOf_V&lt;Next&gt;</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned&lt;Len, Align, Next, bFits&gt;::Type</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align&gt;</highlight></codeline>
<codeline lineno="174" refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01short_00_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>,<sp/>Align,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">short</ref>,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">false</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Next</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">int</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFits<sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Align &lt;= AlignmentOf_V&lt;Next&gt;</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned&lt;Len, Align, Next, bFits&gt;::Type</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align&gt;</highlight></codeline>
<codeline lineno="181" refid="struct_bvr_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01char_00_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned</ref>&lt;<ref refid="struct_bvr_1_1_events" kindref="compound">Len</ref>,<sp/>Align,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">char</ref>,<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">false</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Next</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">short</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFits<sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Align &lt;= AlignmentOf_V&lt;Next&gt;</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned&lt;Len, Align, Next, bFits&gt;::Type</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Len,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Align<sp/>=<sp/>alignof(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;</highlight></codeline>
<codeline lineno="188" refid="struct_bvr_1_1_meta_1_1_aligned_storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_aligned_storage" kindref="compound">AlignedStorage</ref><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_events" kindref="compound">Next</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">char</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFits<sp/>=<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">Align &lt;= AlignmentOf_V&lt;Next&gt;</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_meta_1_1___aligned" kindref="compound">_Aligned&lt;Len, Align, Next, bFits&gt;::Type</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>ptr_t<sp/>AsPointer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="struct_bvr_1_1_events" kindref="compound">obj</ref>)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">ptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="struct_bvr_1_1_events" kindref="compound">obj</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::Meta</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/PropertyTraits.hpp"/>
  </compounddef>
</doxygen>
