<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_bvr_1_1_meta_1_1_type_registry" kind="class" language="C++" prot="public">
    <compoundname>Bvr::Meta::TypeRegistry</compoundname>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" prot="public">Bvr::Meta::TypeRegistry::Bind</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_enum___00_01_enum_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Enum_, EnumT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_meth___00_01_class_t_00_01_accessor_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Meth_, ClassT, AccessorT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_prop___00_01_class_t_00_01_accessor_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Prop_, ClassT, AccessorT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" prot="public">Bvr::Meta::TypeRegistry::Class_</innerclass>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a2594dd011b1dbc113ad9d61aa677e2a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">Bind</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_enum__" kindref="compound">Detail::Enum_</ref>, EnumT &gt;</type>
        <definition>static Bind&lt;Detail::Enum_, EnumT&gt; Bvr::Meta::TypeRegistry::Enum</definition>
        <argsstring>(std::string_view name)</argsstring>
        <name>Enum</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="class_bvr_1_1_meta_1_1_enum" kindref="compound">Enum</ref> registration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="56" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a1b2183c73e09b165ea51721c0f69dfa7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Bvr::Detail::Invokable</type>
            <declname>Meth</declname>
            <defname>Meth</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">Bind</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_meth__" kindref="compound">Detail::Meth_</ref>, <ref refid="struct_bvr_1_1_meta_1_1_global_scope" kindref="compound">GlobalScope</ref>, Meth &gt;</type>
        <definition>static Bind&lt;Detail::Meth_, GlobalScope, Meth&gt; Bvr::Meta::TypeRegistry::Function</definition>
        <argsstring>(Meth meth, std::string_view name)</argsstring>
        <name>Function</name>
        <param>
          <type>Meth</type>
          <declname>meth</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Global function registration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="63" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a9b4e31e094ff039725e84bfd8fafd93a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>static Type Bvr::Meta::TypeRegistry::GetTypeByName</definition>
        <argsstring>(std::string_view name)</argsstring>
        <name>GetTypeByName</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="67" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a2c445176fde6a984cb2ae5f8dfeec0bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>static Type Bvr::Meta::TypeRegistry::GetTypeByHash</definition>
        <argsstring>(const uint64_t hash)</argsstring>
        <name>GetTypeByHash</name>
        <param>
          <type>const uint64_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="68" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1aa8381e33ea7589c79849bcca1fa0f27d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>static Type Bvr::Meta::TypeRegistry::GetTypeByTypeInfo</definition>
        <argsstring>(TypeInfo info)</argsstring>
        <name>GetTypeByTypeInfo</name>
        <param>
          <type><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="69" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1af3aaa41341e2d05f95b45db0d0568311" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>static TypeData* Bvr::Meta::TypeRegistry::RegisterTypeData</definition>
        <argsstring>(TypeData *typeData)</argsstring>
        <name>RegisterTypeData</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>typeData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="71" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a06b0bca84ebe52475d2f9d7db819a240" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::TypeRegistry::RegisterProperty</definition>
        <argsstring>(PropertyWrapperBase *propertyData)</argsstring>
        <name>RegisterProperty</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> *</type>
          <declname>propertyData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="72" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a3bfab46de8e271780b94b28ae428d9a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::TypeRegistry::RegisterMethod</definition>
        <argsstring>(MethodWrapperBase *methData)</argsstring>
        <name>RegisterMethod</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> *</type>
          <declname>methData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="73" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a00487f2b8c71f276a9d48072475e22cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::TypeRegistry::RegisterEnum</definition>
        <argsstring>(Detail::EnumWrapperBase *enumData)</argsstring>
        <name>RegisterEnum</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> *</type>
          <declname>enumData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="74" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a4e6ff63088d784048d8e1675ec75dc62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::TypeRegistry::RegisterConversionMethod</definition>
        <argsstring>(ConversionMethodBase *conv)</argsstring>
        <name>RegisterConversionMethod</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="75" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a27dc744d2666f9816028dfc8d373a866" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::UnregisterTypeData</definition>
        <argsstring>(TypeData *typeData)</argsstring>
        <name>UnregisterTypeData</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>typeData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="77" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1ae025f3218f09991d19309823030f1ee3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::UnregisterProperty</definition>
        <argsstring>(PropertyWrapperBase *prop)</argsstring>
        <name>UnregisterProperty</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> *</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="78" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a74e06557f32e1aca60c9ca1924fc0811" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::UnregisterMethod</definition>
        <argsstring>(MethodWrapperBase *meth)</argsstring>
        <name>UnregisterMethod</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="79" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1aa673518ea2de771f8ed07e12b7ebcae3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::UnregisterEnum</definition>
        <argsstring>(Detail::EnumWrapperBase *enumData)</argsstring>
        <name>UnregisterEnum</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> *</type>
          <declname>enumData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="80" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a0310fe7b24d7daebfbd3045fdcd25410" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::UnregisterConversionMethod</definition>
        <argsstring>(ConversionMethodBase *conv)</argsstring>
        <name>UnregisterConversionMethod</name>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="81" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a88395ce336f0916a13fa58d2a591d966" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::RegisterSink</definition>
        <argsstring>(LocalRegSink *sink)</argsstring>
        <name>RegisterSink</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_local_reg_sink" kindref="compound">LocalRegSink</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="83" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1ab952e35888c625ab16ead763011babb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::UnregisterSink</definition>
        <argsstring>(LocalRegSink *sink)</argsstring>
        <name>UnregisterSink</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_local_reg_sink" kindref="compound">LocalRegSink</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="84" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a4174bf7e109c7201c3ccccb382e772fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::RegisterAlias</definition>
        <argsstring>(std::string_view name, TypeData *pType)</argsstring>
        <name>RegisterAlias</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="86" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a5723c60ff7a3fc435a7d64cf4c207836" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::TypeRegistry::Attributes</definition>
        <argsstring>(const Type &amp;type, std::vector&lt; Attribute &gt; attributes)</argsstring>
        <name>Attributes</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_bvr_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref> &gt;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="87" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="28" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="28" bodyend="88"/>
    <listofallmembers>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a5723c60ff7a3fc435a7d64cf4c207836" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Attributes</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a2594dd011b1dbc113ad9d61aa677e2a9" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Enum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a1b2183c73e09b165ea51721c0f69dfa7" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Function</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a2c445176fde6a984cb2ae5f8dfeec0bc" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByHash</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a9b4e31e094ff039725e84bfd8fafd93a" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByName</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa8381e33ea7589c79849bcca1fa0f27d" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByTypeInfo</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a4174bf7e109c7201c3ccccb382e772fb" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterAlias</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a4e6ff63088d784048d8e1675ec75dc62" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a00487f2b8c71f276a9d48072475e22cd" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a3bfab46de8e271780b94b28ae428d9a0" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a06b0bca84ebe52475d2f9d7db819a240" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a88395ce336f0916a13fa58d2a591d966" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterSink</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1af3aaa41341e2d05f95b45db0d0568311" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a0310fe7b24d7daebfbd3045fdcd25410" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>UnregisterConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa673518ea2de771f8ed07e12b7ebcae3" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>UnregisterEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a74e06557f32e1aca60c9ca1924fc0811" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>UnregisterMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ae025f3218f09991d19309823030f1ee3" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>UnregisterProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ab952e35888c625ab16ead763011babb2" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>UnregisterSink</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a27dc744d2666f9816028dfc8d373a866" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>UnregisterTypeData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
