<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_detail" kind="namespace" language="C++">
    <compoundname>Bvr::Detail</compoundname>
    <innerclass refid="struct_bvr_1_1_detail_1_1_composed_helper" prot="public">Bvr::Detail::ComposedHelper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_function_type" prot="public">Bvr::Detail::FunctionType</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_hash_traits" prot="public">Bvr::Detail::HashTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_hash_traits_3_01std_1_1uint32__t_01_4" prot="public">Bvr::Detail::HashTraits&lt; std::uint32_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_hash_traits_3_01std_1_1uint64__t_01_4" prot="public">Bvr::Detail::HashTraits&lt; std::uint64_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_helper" prot="public">Bvr::Detail::Helper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor" prot="public">Bvr::Detail::IsFunctor</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::IsFunctor&lt; R(&amp;)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::IsFunctor&lt; R(&amp;)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::IsFunctor&lt; R(*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::IsFunctor&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_impl" prot="public">Bvr::Detail::IsFunctorImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_impl_3_01_t_00_01_member_function_holder_3_6_composed_helpe6ddea77d77bc53d89ead58900f3ea14f" prot="public">Bvr::Detail::IsFunctorImpl&lt; T, MemberFunctionHolder&lt;&amp;ComposedHelper&lt; T &gt;::operator()&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_graph_node" prot="public">Bvr::Detail::IsGraphNode</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_graph_node_3_01_i_graph_node_3_01_t_01_4_01_4" prot="public">Bvr::Detail::IsGraphNode&lt; IGraphNode&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1make__void" prot="public">Bvr::Detail::make_void</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_member_function_holder" prot="public">Bvr::Detail::MemberFunctionHolder</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_return_fn" prot="public">Bvr::Detail::ReturnFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_return_member_fn" prot="public">Bvr::Detail::ReturnMemberFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_s_vertex_stream_storage" prot="public">Bvr::Detail::SVertexStreamStorage</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_table_formatter" prot="public">Bvr::Detail::TableFormatter</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_basic_hashed_string" prot="public">Bvr::Detail::TBasicHashedString</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits" prot="public">Bvr::Detail::TFunctionTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(&amp;)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(&amp;)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const volatile &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const volatile noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) volatile &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) volatile noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_type_constructor_proxy" prot="public">Bvr::Detail::TypeConstructorProxy</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_void_fn" prot="public">Bvr::Detail::VoidFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_void_member_fn" prot="public">Bvr::Detail::VoidMemberFn</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_function_traits_8hpp_1adc4469fa321533939ad9b1a2a74dc4a1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_detail_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using Bvr::Detail::void_t = typedef typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <qualifiedname>Bvr::Detail::void_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" line="9" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_function_traits_8hpp_1af2a9ed55ab42316b2f327abef8465235" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref>, std::is_member_function_pointer&lt; F &gt;::value||std::is_function&lt; F &gt;::value||<ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref>&lt; F &gt;::value &gt;</type>
        <definition>using Bvr::Detail::IsFunction = typedef std::integral_constant&lt;bool, std::is_member_function_pointer&lt;F&gt;::value || std::is_function&lt;F&gt;::value || IsFunctor&lt;F&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>IsFunction</name>
        <qualifiedname>Bvr::Detail::IsFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" line="110" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_function_traits_8hpp_1ab0f2a8d6d07021377370387f7401f226" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref>, std::is_same_v&lt; <ref refid="struct_bvr_1_1_events" kindref="compound">typename</ref> <ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt; F &gt;::ReturnT, <ref refid="struct_bvr_1_1_events" kindref="compound">void</ref> &gt; &gt;</type>
        <definition>using Bvr::Detail::IsVoidFunction = typedef std::integral_constant&lt; bool, std::is_same_v&lt;typename TFunctionTraits&lt;F&gt;::ReturnT, void&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>IsVoidFunction</name>
        <qualifiedname>Bvr::Detail::IsVoidFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" line="119" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_events_8hpp_1ad161fde31dd373d48373550a44f256dd" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>static constexpr bool Bvr::Detail::IsValid</definition>
        <argsstring>(const Events&lt; T &gt; &amp;item) noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Detail::IsValid</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">Events</ref>&lt; T &gt; &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Events/Events.hpp" line="82" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Events/Events.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_events_8hpp_1abdc28af00d67814bc9fee0c31fc9609c" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>static constexpr bool Bvr::Detail::IsValid</definition>
        <argsstring>(Events&lt; T &gt; &amp;item) noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Detail::IsValid</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Events</ref>&lt; T &gt; &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Events/Events.hpp" line="87" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Events/Events.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_events_8hpp_1ad02cd64183b75163b193a751597732f2" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">bool</ref></type>
        <definition>static constexpr bool Bvr::Detail::IsValid</definition>
        <argsstring>(const EventReader&lt; T &gt; &amp;item) noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Detail::IsValid</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> <ref refid="struct_bvr_1_1_event_reader" kindref="compound">EventReader</ref>&lt; T &gt; &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Events/Events.hpp" line="92" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Events/Events.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1aa89d94d26badb7ec4d8324dec5f8ecd2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>static constexpr auto Bvr::Detail::TypeNameStripped</definition>
        <argsstring>() noexcept</argsstring>
        <name>TypeNameStripped</name>
        <qualifiedname>Bvr::Detail::TypeNameStripped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="19" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="19" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a9c7a3199877335a0da1dabf9071dac90" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <defval>TypeNameStripped&lt;T&gt;().find_first_of(&apos;.&apos;)</defval>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">Bvr::TTypeName</ref></type>
        <definition>static constexpr Bvr::TTypeName Bvr::Detail::TypeName</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>TypeName</name>
        <qualifiedname>Bvr::Detail::TypeName</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="57" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a68e622206bc666a6cef8bca153276a3f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">Bvr::TTypeName</ref></type>
        <definition>static constexpr Bvr::TTypeName Bvr::Detail::TypeName</definition>
        <argsstring>(char) noexcept</argsstring>
        <name>TypeName</name>
        <qualifiedname>Bvr::Detail::TypeName</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">char</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="63" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a419c9b78e887f719a1d103b8649f3bac" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <defval>TypeNameStripped&lt;T&gt;().find_first_of(&apos;.&apos;)</defval>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> Bvr::TTypeHash</type>
        <definition>static constexpr Bvr::TTypeHash Bvr::Detail::TypeHash</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>TypeHash</name>
        <qualifiedname>Bvr::Detail::TypeHash</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="69" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a5f3feb7a7d6464a947c2bb614e5bc584" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> Bvr::TTypeHash</type>
        <definition>static constexpr Bvr::TTypeHash Bvr::Detail::TypeHash</definition>
        <argsstring>(char) noexcept</argsstring>
        <name>TypeHash</name>
        <qualifiedname>Bvr::Detail::TypeHash</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">char</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="75" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_assert_8hpp_1a5f87f1545995fedf60790584e8f7fdcd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> size_t</type>
        <definition>constexpr size_t Bvr::Detail::CountMarcoArgs</definition>
        <argsstring>(Ts... ts)</argsstring>
        <name>CountMarcoArgs</name>
        <qualifiedname>Bvr::Detail::CountMarcoArgs</qualifiedname>
        <param>
          <type>Ts...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" line="14" column="37" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="_assert_8hpp_1ab9b2b619c33d3673ecebb73b9a1b97eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>void Bvr::Detail::AssertMessage</definition>
        <argsstring>()</argsstring>
        <name>AssertMessage</name>
        <qualifiedname>Bvr::Detail::AssertMessage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" line="18" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="_assert_8hpp_1a5cfe5d9c1580afccb2a7a5fe535b46fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>void Bvr::Detail::AssertMessage</definition>
        <argsstring>(TFormatString&lt; Ts... &gt; formatter, Ts &amp;&amp;... ts)</argsstring>
        <name>AssertMessage</name>
        <qualifiedname>Bvr::Detail::AssertMessage</qualifiedname>
        <param>
          <type>TFormatString&lt; Ts... &gt;</type>
          <declname>formatter</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref> &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" line="21" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="_assert_8hpp_1ae4599045071156c0d9430d4b97e82af4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>auto Bvr::Detail::AssertMessageText</definition>
        <argsstring>(TFormatString&lt; Ts... &gt; formatter, Ts &amp;&amp;... ts)</argsstring>
        <name>AssertMessageText</name>
        <qualifiedname>Bvr::Detail::AssertMessageText</qualifiedname>
        <param>
          <type>TFormatString&lt; Ts... &gt;</type>
          <declname>formatter</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref> &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" line="26" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_assert_8hpp_1a8b86066afb4bac1b6bf69615b02fc5df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>void Bvr::Detail::AssertImpl</definition>
        <argsstring>(std::string_view expr, std::string_view file, int line)</argsstring>
        <name>AssertImpl</name>
        <qualifiedname>Bvr::Detail::AssertImpl</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">int</ref></type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" line="66" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_assert_8hpp_1a07de3aff08aba304fca0c15d4bbb7d6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">void</ref></type>
        <definition>void Bvr::Detail::AssertImpl</definition>
        <argsstring>(std::string_view expr, std::string_view file, int line, TFormatString&lt; Ts... &gt; format, Ts &amp;&amp;... ts)</argsstring>
        <name>AssertImpl</name>
        <qualifiedname>Bvr::Detail::AssertImpl</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>TFormatString&lt; Ts... &gt;</type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">Ts</ref> &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" line="77" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Assert.hpp" bodystart="77" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_dependency_graph_8hpp_1a7d717b5191cd24ce55895c8d5af8754e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>constexpr auto Bvr::Detail::GetBefore</definition>
        <argsstring>(const T &amp;node)</argsstring>
        <name>GetBefore</name>
        <qualifiedname>Bvr::Detail::GetBefore</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" line="18" column="39" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="_dependency_graph_8hpp_1a245674b004c07b3257b7c8bea2766174" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>constexpr auto Bvr::Detail::GetAfter</definition>
        <argsstring>(const T &amp;node)</argsstring>
        <name>GetAfter</name>
        <qualifiedname>Bvr::Detail::GetAfter</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" line="26" column="39" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="_dependency_graph_8hpp_1a5794db113ec566c84d4b9d79ad906e30" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_events" kindref="compound">constexpr</ref> <ref refid="struct_bvr_1_1_events" kindref="compound">auto</ref></type>
        <definition>constexpr auto Bvr::Detail::GetLabels</definition>
        <argsstring>(const T &amp;node)</argsstring>
        <name>GetLabels</name>
        <qualifiedname>Bvr::Detail::GetLabels</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_events" kindref="compound">const</ref> T &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" line="34" column="39" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" bodystart="34" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Mesh.hpp" line="8" column="1"/>
  </compounddef>
</doxygen>
