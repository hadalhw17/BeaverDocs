<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_util" kind="namespace" language="C++">
    <compoundname>Bvr::Util</compoundname>
    <innerclass refid="class_bvr_1_1_util_1_1_c_bump_allocator" prot="public">Bvr::Util::CBumpAllocator</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_c_temporary_memory_pool" prot="public">Bvr::Util::CTemporaryMemoryPool</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_t_span" prot="public">Bvr::Util::TSpan</innerclass>
    <innerclass refid="struct_bvr_1_1_util_1_1uuid" prot="public">Bvr::Util::uuid</innerclass>
    <innernamespace refid="namespace_bvr_1_1_util_1_1_detail">Bvr::Util::Detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="_span_8hpp_1a900ebeea74ef555f3637cedf4d824215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(T(&amp;)[N]) -&gt; TSpan&lt; T &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="268" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="268" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1ab657d852a2334a2a38da62206f8cd471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(T *, std::size_t) -&gt; TSpan&lt; T &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="270" column="12" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="270" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a023cd79bc522e340e2bca9090cda86f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(Container&lt; U &gt; &amp;) -&gt; TSpan&lt; U &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>Container&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="273" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a453ead7eef47676720505abc8e29697f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(const Container&lt; U &gt; &amp;) -&gt; TSpan&lt; U const &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>const Container&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="276" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a16430fea9d788b84962402fb2e0d1b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(std::initializer_list&lt; T &gt;) -&gt; TSpan&lt; T const &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="279" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a108b03fe6fc34a08e563870bad234e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;) -&gt; TSpan&lt; T const &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="282" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="282" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_enums_8hpp_1a71e340f962bacac37231cdfb013f7bf7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type>constexpr std::underlying_type_t&lt; EnumT &gt;</type>
        <definition>constexpr std::underlying_type_t&lt; EnumT &gt; Bvr::Util::to_underlying</definition>
        <argsstring>(const EnumT inEnum)</argsstring>
        <name>to_underlying</name>
        <qualifiedname>Bvr::Util::to_underlying</qualifiedname>
        <param>
          <type>const EnumT</type>
          <declname>inEnum</declname>
        </param>
    <requiresclause>std::is_enum_v&lt;EnumT&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" line="71" column="41" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_enums_8hpp_1a218b8414a4776d0c623f4c6ed1a37fa3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type>constexpr std::underlying_type_t&lt; EnumT &gt;</type>
        <definition>constexpr std::underlying_type_t&lt; EnumT &gt; Bvr::Util::Bit</definition>
        <argsstring>(const EnumT inEnum)</argsstring>
        <name>Bit</name>
        <qualifiedname>Bvr::Util::Bit</qualifiedname>
        <param>
          <type>const EnumT</type>
          <declname>inEnum</declname>
        </param>
    <requiresclause>std::is_enum_v&lt;EnumT&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" line="81" column="41" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" bodystart="81" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Public/BvrRenderer/FrameGraphDefs.hpp" line="8" column="1"/>
  </compounddef>
</doxygen>
