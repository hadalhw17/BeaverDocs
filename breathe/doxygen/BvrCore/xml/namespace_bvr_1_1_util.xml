<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_util" kind="namespace" language="C++">
    <compoundname>Bvr::Util</compoundname>
    <innerclass refid="class_bvr_1_1_util_1_1_c_multi_thread_counter" prot="public">Bvr::Util::CMultiThreadCounter</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_c_single_thread_counter" prot="public">Bvr::Util::CSingleThreadCounter</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_intrusive_hash_map" prot="public">Bvr::Util::IntrusiveHashMap</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_intrusive_hash_map_enabled" prot="public">Bvr::Util::IntrusiveHashMapEnabled</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_intrusive_hash_map_holder" prot="public">Bvr::Util::IntrusiveHashMapHolder</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_intrusive_list" prot="public">Bvr::Util::IntrusiveList</innerclass>
    <innerclass refid="struct_bvr_1_1_util_1_1_intrusive_list_enabled" prot="public">Bvr::Util::IntrusiveListEnabled</innerclass>
    <innerclass refid="struct_bvr_1_1_util_1_1_intrusive_p_o_d_wrapper" prot="public">Bvr::Util::IntrusivePODWrapper</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_intrusive_ptr" prot="public">Bvr::Util::IntrusivePtr</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_intrusive_ptr_enabled" prot="public">Bvr::Util::IntrusivePtrEnabled</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_temporary_hashmap" prot="public">Bvr::Util::TemporaryHashmap</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_temporary_hashmap_enabled" prot="public">Bvr::Util::TemporaryHashmapEnabled</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_thread_safe_intrusive_hash_map" prot="public">Bvr::Util::ThreadSafeIntrusiveHashMap</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_thread_safe_intrusive_hash_map_read_cached" prot="public">Bvr::Util::ThreadSafeIntrusiveHashMapReadCached</innerclass>
    <innerclass refid="class_bvr_1_1_util_1_1_t_span" prot="public">Bvr::Util::TSpan</innerclass>
    <innerclass refid="struct_bvr_1_1_util_1_1uuid" prot="public">Bvr::Util::uuid</innerclass>
    <innernamespace refid="namespace_bvr_1_1_util_1_1_detail">Bvr::Util::Detail</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_intrusive_8hpp_1a6aec80099cc32e7f4c54c6ab9af509e5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_util_1_1_intrusive_ptr" kindref="compound">IntrusivePtr</ref>&lt; Derived &gt;</type>
        <definition>using Bvr::Util::DerivedIntrusivePtrType = typedef IntrusivePtr&lt;Derived&gt;</definition>
        <argsstring></argsstring>
        <name>DerivedIntrusivePtrType</name>
        <qualifiedname>Bvr::Util::DerivedIntrusivePtrType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" line="174" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_intrusive_8hpp_1acd268b285b6e72a6f027902e96dd41a1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_util_1_1_intrusive_ptr_enabled" kindref="compound">IntrusivePtrEnabled</ref>&lt; T, std::default_delete&lt; T &gt;, <ref refid="class_bvr_1_1_util_1_1_c_multi_thread_counter" kindref="compound">CMultiThreadCounter</ref> &gt;</type>
        <definition>using Bvr::Util::ThreadSafeIntrusivePtrEnabled = typedef IntrusivePtrEnabled&lt;T, std::default_delete&lt;T&gt;, CMultiThreadCounter&gt;</definition>
        <argsstring></argsstring>
        <name>ThreadSafeIntrusivePtrEnabled</name>
        <qualifiedname>Bvr::Util::ThreadSafeIntrusivePtrEnabled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" line="187" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_intrusive_hash_map_8hpp_1a34f2757aa06e2b3fb9af21d208f29ae7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_util_1_1_intrusive_hash_map" kindref="compound">IntrusiveHashMap</ref>&lt; <ref refid="struct_bvr_1_1_util_1_1_intrusive_p_o_d_wrapper" kindref="compound">IntrusivePODWrapper</ref>&lt; T &gt; &gt;</type>
        <definition>using Bvr::Util::IntrusiveHashMapWrapper = typedef IntrusiveHashMap&lt;IntrusivePODWrapper&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>IntrusiveHashMapWrapper</name>
        <qualifiedname>Bvr::Util::IntrusiveHashMapWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Containers/IntrusiveHashMap.hpp" line="309" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Containers/IntrusiveHashMap.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_span_8hpp_1a900ebeea74ef555f3637cedf4d824215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(T(&amp;)[N]) -&gt; TSpan&lt; T &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="268" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="268" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1ab657d852a2334a2a38da62206f8cd471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(T *, std::size_t) -&gt; TSpan&lt; T &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="270" column="12" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="270" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a023cd79bc522e340e2bca9090cda86f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(Container&lt; U &gt; &amp;) -&gt; TSpan&lt; U &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>Container&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="273" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a453ead7eef47676720505abc8e29697f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(const Container&lt; U &gt; &amp;) -&gt; TSpan&lt; U const &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>const Container&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="276" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a16430fea9d788b84962402fb2e0d1b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(std::initializer_list&lt; T &gt;) -&gt; TSpan&lt; T const &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="279" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_span_8hpp_1a108b03fe6fc34a08e563870bad234e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Util::TSpan</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;) -&gt; TSpan&lt; T const &gt;</argsstring>
        <name>TSpan</name>
        <qualifiedname>Bvr::Util::TSpan</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="282" column="1" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" declline="282" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_intrusive_8hpp_1a7c63d903113a19c6d902f31c4c2b1674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_util_1_1_intrusive_ptr" kindref="compound">DerivedIntrusivePtrType</ref>&lt; T &gt;</type>
        <definition>DerivedIntrusivePtrType&lt; T &gt; Bvr::Util::MakeHandle</definition>
        <argsstring>(P &amp;&amp;... p)</argsstring>
        <name>MakeHandle</name>
        <qualifiedname>Bvr::Util::MakeHandle</qualifiedname>
        <param>
          <type>P &amp;&amp;...</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" line="177" column="25" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="_intrusive_8hpp_1ac0e7abc1c32260ef6b06182a3d3a7fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>Base::IntrusivePtrType</type>
        <definition>Base::IntrusivePtrType Bvr::Util::MakeDerrivedHandle</definition>
        <argsstring>(P &amp;&amp;... p)</argsstring>
        <name>MakeDerrivedHandle</name>
        <qualifiedname>Bvr::Util::MakeDerrivedHandle</qualifiedname>
        <param>
          <type>P &amp;&amp;...</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" line="182" column="33" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/Intrusive.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="_enums_8hpp_1a71e340f962bacac37231cdfb013f7bf7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type>constexpr std::underlying_type_t&lt; EnumT &gt;</type>
        <definition>constexpr std::underlying_type_t&lt; EnumT &gt; Bvr::Util::to_underlying</definition>
        <argsstring>(const EnumT inEnum)</argsstring>
        <name>to_underlying</name>
        <qualifiedname>Bvr::Util::to_underlying</qualifiedname>
        <param>
          <type>const EnumT</type>
          <declname>inEnum</declname>
        </param>
    <requiresclause>std::is_enum_v&lt;EnumT&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" line="71" column="41" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_enums_8hpp_1a218b8414a4776d0c623f4c6ed1a37fa3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type>constexpr std::underlying_type_t&lt; EnumT &gt;</type>
        <definition>constexpr std::underlying_type_t&lt; EnumT &gt; Bvr::Util::Bit</definition>
        <argsstring>(const EnumT inEnum)</argsstring>
        <name>Bit</name>
        <qualifiedname>Bvr::Util::Bit</qualifiedname>
        <param>
          <type>const EnumT</type>
          <declname>inEnum</declname>
        </param>
    <requiresclause>std::is_enum_v&lt;EnumT&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" line="81" column="41" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enums.hpp" bodystart="81" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/Span.hpp" line="7" column="1"/>
  </compounddef>
</doxygen>
