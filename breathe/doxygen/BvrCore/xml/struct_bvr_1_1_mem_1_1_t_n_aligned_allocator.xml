<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::Mem::TNAlignedAllocator</compoundname>
    <includes refid="_alligned_alloc_8hpp" local="no">AllignedAlloc.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>Alignment</declname>
        <defname>Alignment</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a22baa64c2125e72bd23736c58375bd88" prot="public" static="no">
        <type>T</type>
        <definition>using Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="28" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a7caad5e620c4c9504cbfdacefb3f6528" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="29" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a7c4c0c239763527b5fbc25d6ac348446" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="30" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a00cec5ad00d80c3f02115be990acd048" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::propagate_on_container_move_assignment =  std::true_type</definition>
        <argsstring></argsstring>
        <name>propagate_on_container_move_assignment</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::propagate_on_container_move_assignment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="31" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a036f47ae44d7332a313b9b3a17e23b83" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::is_always_equal =  std::true_type</definition>
        <argsstring></argsstring>
        <name>is_always_equal</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::is_always_equal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="32" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1abe993f856ff08ba00d397df0563a30af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::TNAlignedAllocator</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>TNAlignedAllocator</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::TNAlignedAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="34" column="5"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a874de7438a441191b7db05ec0ae34247" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::TNAlignedAllocator</definition>
        <argsstring>(const TNAlignedAllocator &amp;) noexcept=default</argsstring>
        <name>TNAlignedAllocator</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::TNAlignedAllocator</qualifiedname>
        <param>
          <type>const <ref refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator" kindref="compound">TNAlignedAllocator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a1cdfb5d43639117f3432f25a201f65d0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::TNAlignedAllocator</definition>
        <argsstring>(const TNAlignedAllocator&lt; U, A &gt; &amp;) noexcept</argsstring>
        <name>TNAlignedAllocator</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::TNAlignedAllocator</qualifiedname>
        <param>
          <type>const <ref refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator" kindref="compound">TNAlignedAllocator</ref>&lt; U, A &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="37" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a79a59ec06f8af7e4dc5365bb1e947ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::~TNAlignedAllocator</definition>
        <argsstring>()=default</argsstring>
        <name>~TNAlignedAllocator</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::~TNAlignedAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="38" column="5"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1ac79502bfcfb614749d4ed99c83421fea" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T * Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::allocate</definition>
        <argsstring>(size_type n)</argsstring>
        <name>allocate</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::allocate</qualifiedname>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="40" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a48cbb058c7f4a8318eaf4b71cab729bd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void Bvr::Mem::TNAlignedAllocator&lt; T, Alignment &gt;::deallocate</definition>
        <argsstring>(T *p, size_type)</argsstring>
        <name>deallocate</name>
        <qualifiedname>Bvr::Mem::TNAlignedAllocator::deallocate</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="45" column="20" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>C++ 20 compatible aligned allocator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" line="27" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Memory/AllignedAlloc.hpp" bodystart="27" bodyend="46"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1ac79502bfcfb614749d4ed99c83421fea" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>allocate</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a48cbb058c7f4a8318eaf4b71cab729bd" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>deallocate</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a7c4c0c239763527b5fbc25d6ac348446" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>difference_type</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a036f47ae44d7332a313b9b3a17e23b83" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>is_always_equal</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a00cec5ad00d80c3f02115be990acd048" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>propagate_on_container_move_assignment</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a7caad5e620c4c9504cbfdacefb3f6528" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>size_type</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1abe993f856ff08ba00d397df0563a30af" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>TNAlignedAllocator</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a874de7438a441191b7db05ec0ae34247" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>TNAlignedAllocator</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a1cdfb5d43639117f3432f25a201f65d0" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>TNAlignedAllocator</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a22baa64c2125e72bd23736c58375bd88" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>value_type</name></member>
      <member refid="struct_bvr_1_1_mem_1_1_t_n_aligned_allocator_1a79a59ec06f8af7e4dc5365bb1e947ad3" prot="public" virt="non-virtual"><scope>Bvr::Mem::TNAlignedAllocator</scope><name>~TNAlignedAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
