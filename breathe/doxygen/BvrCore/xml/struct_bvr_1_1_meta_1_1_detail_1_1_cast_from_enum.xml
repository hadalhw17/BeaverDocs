<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::Meta::Detail::CastFromEnum</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a7217dce30597fed64fd7c4f87b97765e" prot="public" static="no">
        <type>typename std::underlying_type_t&lt; T &gt;</type>
        <definition>using Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::EnumT =  typename std::underlying_type_t&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>EnumT</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::EnumT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1010" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1010" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a373a2a8a843a2c7dd7b40cd8fedcc31a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr EnumT</type>
        <definition>static constexpr EnumT Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::GetValue</definition>
        <argsstring>(const T &amp;from)</argsstring>
        <name>GetValue</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::GetValue</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1012" column="35" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1012" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ab6e86becd1761f5aba16f1dc4905f1e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, bool &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1016" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1016" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ab58e2f24f336db99f5b93d6959102ac0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, char &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>char &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1027" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1027" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a888b3d72142b0ec8c693d2eaba7b5391" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::int8_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::int8_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1031" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1031" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ad419de5a6c9fa7178af1d3f99b9cb682" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::uint8_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::uint8_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1035" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1035" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1af66e42e582ac65119a95513e97990378" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::int16_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::int16_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1039" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1039" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a80e8ee265212b5d0043deb1d242fd798" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::uint16_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::uint16_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1043" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1043" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a139679a26e766a87d8ee19b3e41469c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::int32_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::int32_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1047" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1047" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a20f1b1cc935d262efa835fb1e6b1275b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::uint32_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::uint32_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1051" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1051" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ab43f05697390dea8c33b1a2892f428fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::int64_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::int64_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1055" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1055" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a1864d36635822155fe9d2abe279fd68b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::uint64_t &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::uint64_t &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1059" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1059" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ae3b6f4d4ae9bc0656bc646796f5d2b4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, float &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1063" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1063" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1af11051396a665484b073911625760d40" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, double &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1067" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1067" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a7ef9a71eb4a2418d58556fc8db62fa88" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::To</definition>
        <argsstring>(const T &amp;from, std::string &amp;to)</argsstring>
        <name>To</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::To</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1071" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1071" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a4bc6fb1d354c9dd266663c282fdb5e06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::CastFromEnum&lt; T &gt;::ToEnum</definition>
        <argsstring>(const T &amp;from, Argument &amp;to)</argsstring>
        <name>ToEnum</name>
        <qualifiedname>Bvr::Meta::Detail::CastFromEnum::ToEnum</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1075" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1075" bodyend="1075"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" line="1009" column="12" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeCasting.hpp" bodystart="1009" bodyend="1076"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a7217dce30597fed64fd7c4f87b97765e" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>EnumT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a373a2a8a843a2c7dd7b40cd8fedcc31a" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>GetValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ab6e86becd1761f5aba16f1dc4905f1e7" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ab58e2f24f336db99f5b93d6959102ac0" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a888b3d72142b0ec8c693d2eaba7b5391" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ad419de5a6c9fa7178af1d3f99b9cb682" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1af66e42e582ac65119a95513e97990378" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a80e8ee265212b5d0043deb1d242fd798" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a139679a26e766a87d8ee19b3e41469c5" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a20f1b1cc935d262efa835fb1e6b1275b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ab43f05697390dea8c33b1a2892f428fc" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a1864d36635822155fe9d2abe279fd68b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1ae3b6f4d4ae9bc0656bc646796f5d2b4b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1af11051396a665484b073911625760d40" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a7ef9a71eb4a2418d58556fc8db62fa88" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>To</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_cast_from_enum_1a4bc6fb1d354c9dd266663c282fdb5e06" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::CastFromEnum</scope><name>ToEnum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
