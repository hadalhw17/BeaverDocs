<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_path_utils" kind="namespace" language="C++">
    <compoundname>Bvr::PathUtils</compoundname>
    <innerclass refid="struct_bvr_1_1_path_utils_1_1_path_traits" prot="public">Bvr::PathUtils::PathTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_path_utils_1_1_path_traits_3_01wchar__t_01_4" prot="public">Bvr::PathUtils::PathTraits&lt; wchar_t &gt;</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="_path_utils_8hpp_1a37640f306c34b723fdf47da97bf9aa04" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetParentPath</definition>
        <argsstring>(std::basic_string_view&lt; T &gt; path)</argsstring>
        <name>GetParentPath</name>
        <qualifiedname>Bvr::PathUtils::GetParentPath</qualifiedname>
        <param>
          <type>std::basic_string_view&lt; T &gt;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract parent path from path <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Parent path or empty string if no parent path </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="22" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1abf3ef42c9d6364528daa467f3dedce0f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetParentPath</definition>
        <argsstring>(const T *path)</argsstring>
        <name>GetParentPath</name>
        <qualifiedname>Bvr::PathUtils::GetParentPath</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="31" column="35" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1a6bc53c2c164fc136c866e74f73cfe04e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetParentPath</definition>
        <argsstring>(const std::basic_string&lt; T &gt; &amp;path)</argsstring>
        <name>GetParentPath</name>
        <qualifiedname>Bvr::PathUtils::GetParentPath</qualifiedname>
        <param>
          <type>const std::basic_string&lt; T &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="37" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1a7855281be2a000d917406aecf276eada" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetFileName</definition>
        <argsstring>(std::basic_string_view&lt; T &gt; path, const bool withExt=true)</argsstring>
        <name>GetFileName</name>
        <qualifiedname>Bvr::PathUtils::GetFileName</qualifiedname>
        <param>
          <type>std::basic_string_view&lt; T &gt;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>withExt</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract file name from path <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withExt</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, extension will be included </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="46" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="46" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1ab27fc518dfd84e232c4dd1edaca07733" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetFileName</definition>
        <argsstring>(const T *path, const bool withExt=true)</argsstring>
        <name>GetFileName</name>
        <qualifiedname>Bvr::PathUtils::GetFileName</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>withExt</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="61" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1a1129d60a1378ff081465b8275263cf8a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetFileName</definition>
        <argsstring>(const std::basic_string&lt; T &gt; &amp;path, const bool withExt=true)</argsstring>
        <name>GetFileName</name>
        <qualifiedname>Bvr::PathUtils::GetFileName</qualifiedname>
        <param>
          <type>const std::basic_string&lt; T &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>withExt</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="66" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1a0d6f7f44ac5fc9f5a5a09212b60f0dfd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetExtension</definition>
        <argsstring>(std::basic_string_view&lt; T &gt; path)</argsstring>
        <name>GetExtension</name>
        <qualifiedname>Bvr::PathUtils::GetExtension</qualifiedname>
        <param>
          <type>std::basic_string_view&lt; T &gt;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract extension from a path and remove all decorators <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="74" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1af9f5da68b97de803adbbe1a461aae763" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetExtension</definition>
        <argsstring>(const T *path)</argsstring>
        <name>GetExtension</name>
        <qualifiedname>Bvr::PathUtils::GetExtension</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="87" column="35" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_path_utils_8hpp_1af4fc4f1ce1b6a918955af21e3bf6d0e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; T &gt;</type>
        <definition>constexpr std::basic_string_view&lt; T &gt; Bvr::PathUtils::GetExtension</definition>
        <argsstring>(const std::basic_string&lt; T &gt; &amp;path)</argsstring>
        <name>GetExtension</name>
        <qualifiedname>Bvr::PathUtils::GetExtension</qualifiedname>
        <param>
          <type>const std::basic_string&lt; T &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="92" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/PathUtils.hpp" line="6" column="1"/>
  </compounddef>
</doxygen>
