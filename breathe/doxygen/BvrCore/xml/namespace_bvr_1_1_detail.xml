<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_bvr_1_1_detail" kind="namespace" language="C++">
    <compoundname>Bvr::Detail</compoundname>
    <innerclass refid="struct_bvr_1_1_detail_1_1_composed_helper" prot="public">Bvr::Detail::ComposedHelper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_copy_decorators" prot="public">Bvr::Detail::CopyDecorators</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_copy_decorators_3_01const_01_src_00_01_dst_01_4" prot="public">Bvr::Detail::CopyDecorators&lt; const Src, Dst &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_copy_decorators_3_01_src_01_6_00_01_dst_01_4" prot="public">Bvr::Detail::CopyDecorators&lt; Src &amp;, Dst &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_copy_decorators_3_01_src_01_5_00_01_dst_01_4" prot="public">Bvr::Detail::CopyDecorators&lt; Src *, Dst &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_function_type" prot="public">Bvr::Detail::FunctionType</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_hash_traits" prot="public">Bvr::Detail::HashTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_hash_traits_3_01std_1_1uint32__t_01_4" prot="public">Bvr::Detail::HashTraits&lt; std::uint32_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_hash_traits_3_01std_1_1uint64__t_01_4" prot="public">Bvr::Detail::HashTraits&lt; std::uint64_t &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_helper" prot="public">Bvr::Detail::Helper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_arg_arrgegate" prot="public">Bvr::Detail::IsArgArrgegate</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_arg_arrgegate_3_01_q_01_4" prot="public">Bvr::Detail::IsArgArrgegate&lt; Q &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_arg_arrgegate_3_01_t_sys_stack_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Detail::IsArgArrgegate&lt; TSysStack&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_from_res_map" prot="public">Bvr::Detail::IsFromResMap</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_from_res_map_3_01_w_res_3_01_t_01_4_01_4" prot="private">Bvr::Detail::IsFromResMap&lt; WRes&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor" prot="public">Bvr::Detail::IsFunctor</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::IsFunctor&lt; R(&amp;)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_6_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::IsFunctor&lt; R(&amp;)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::IsFunctor&lt; R(*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_3_01_r_07_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::IsFunctor&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_impl" prot="public">Bvr::Detail::IsFunctorImpl</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_functor_impl_3_01_t_00_01_member_function_holder_3_6_composed_helpe6ddea77d77bc53d89ead58900f3ea14f" prot="public">Bvr::Detail::IsFunctorImpl&lt; T, MemberFunctionHolder&lt;&amp;ComposedHelper&lt; T &gt;::operator()&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_graph_node" prot="public">Bvr::Detail::IsGraphNode</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_graph_node_3_01_i_graph_node_3_01_t_01_4_01_4" prot="public">Bvr::Detail::IsGraphNode&lt; IGraphNode&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_world_resource" prot="public">Bvr::Detail::IsWorldResource</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_world_resource_3_01_q_01_4" prot="public">Bvr::Detail::IsWorldResource&lt; Q &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_world_resource_3_01_t_01_4" prot="private">Bvr::Detail::IsWorldResource&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_is_world_resource_3_01_w_res_3_01_t_01_4_01_4" prot="private">Bvr::Detail::IsWorldResource&lt; WRes&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1make__void" prot="public">Bvr::Detail::make_void</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_member_function_holder" prot="public">Bvr::Detail::MemberFunctionHolder</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_return_fn" prot="public">Bvr::Detail::ReturnFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_return_member_fn" prot="public">Bvr::Detail::ReturnMemberFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_s_vertex_stream_storage" prot="public">Bvr::Detail::SVertexStreamStorage</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_system_traits_t" prot="public">Bvr::Detail::SystemTraitsT</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_are_tuple_args_world" prot="public">Bvr::Detail::TAreTupleArgsWorld</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_are_tuple_args_world_3_01_t_checked_helper_3_01_list_01_4_01_4" prot="public">Bvr::Detail::TAreTupleArgsWorld&lt; TCheckedHelper&lt; List &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_are_tuple_args_world_3_01_t_sys_stack_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TAreTupleArgsWorld&lt; TSysStack&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_are_tuple_args_world_3_01_type_list_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TAreTupleArgsWorld&lt; TypeList&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_detail_1_1_t_arg_group" prot="public">Bvr::Detail::TArgGroup</innerclass>
    <innerclass refid="class_bvr_1_1_detail_1_1_t_arg_group_3_01_t_00_01_rest_8_8_8_01_4" prot="public">Bvr::Detail::TArgGroup&lt; T, Rest... &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_detail_1_1_t_arg_group_3_4" prot="public">Bvr::Detail::TArgGroup&lt;&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_arg_idx" prot="public">Bvr::Detail::TArgIdx</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_arg_idx_3_01_t_00_01_type_list_3_01_u_00_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TArgIdx&lt; T, TypeList&lt; U, Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_arg_idx_3_01_t_00_01_type_list_3_4_01_4" prot="public">Bvr::Detail::TArgIdx&lt; T, TypeList&lt;&gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_args_count" prot="public">Bvr::Detail::TArgsCount</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_args_count_3_01_fn_01_4" prot="public">Bvr::Detail::TArgsCount&lt; Fn &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_args_count_3_01_q_01_4" prot="public">Bvr::Detail::TArgsCount&lt; Q &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_args_count_3_01_t_01_4" prot="public">Bvr::Detail::TArgsCount&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_args_count_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TArgsCount&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_args_count_3_4" prot="public">Bvr::Detail::TArgsCount&lt;&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_basic_hashed_string" prot="public">Bvr::Detail::TBasicHashedString</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_checked_helper" prot="public">Bvr::Detail::TCheckedHelper</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_checked_helper_3_01_t_sys_stack_3_01_args_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TCheckedHelper&lt; TSysStack&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_checked_helper_3_01_type_list_3_01_args_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TCheckedHelper&lt; TypeList&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_component_event" prot="public">Bvr::Detail::TComponentEvent</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_component_id_storage" prot="public">Bvr::Detail::TComponentIdStorage</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_extracted_type" prot="public">Bvr::Detail::TExtractedType</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_extracted_type_3_01_t_01_4" prot="public">Bvr::Detail::TExtractedType&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits" prot="public">Bvr::Detail::TFunctionTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(&amp;)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_6_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(&amp;)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const volatile &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01const_01volatile_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) const volatile noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) volatile &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_01volatile_01noexcept_01_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...) volatile noexcept &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_function_traits_3_01_r_07_c_1_1_5_08_07_args_8_8_8_08_4" prot="public">Bvr::Detail::TFunctionTraits&lt; R(C::*)(Args...)&gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_get_args_group" prot="public">Bvr::Detail::TGetArgsGroup</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_get_args_group_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TGetArgsGroup&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_has_type" prot="public">Bvr::Detail::THasType</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_has_type_3_01_t_00_01_type_list_3_01_us_8_8_8_01_4_01_4" prot="public">Bvr::Detail::THasType&lt; T, TypeList&lt; Us... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource" prot="public">Bvr::Detail::TIsValidResource</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource_3_01const_01_events_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TIsValidResource&lt; const Events&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource_3_01_event_reader_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TIsValidResource&lt; EventReader&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource_3_01_events_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TIsValidResource&lt; Events&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource_3_01_option_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TIsValidResource&lt; Option&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource_3_01_t_01_4" prot="public">Bvr::Detail::TIsValidResource&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_is_valid_resource_3_01_w_res_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TIsValidResource&lt; WRes&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_remove_duplicate_constants" prot="public">Bvr::Detail::TRemoveDuplicateConstants</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_remove_duplicate_constants_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TRemoveDuplicateConstants&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_signal_fn" prot="public">Bvr::Detail::TSignalFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits" prot="public">Bvr::Detail::TSystemArgTraits</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01const_01_event_reader_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TSystemArgTraits&lt; const EventReader&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01const_01_option_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TSystemArgTraits&lt; const Option&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01const_01_t_sys_stack_3_01_t_8_8_8_01_4_01_6_01_4" prot="public">Bvr::Detail::TSystemArgTraits&lt; const TSysStack&lt; T... &gt; &amp; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01const_01_w_res_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TSystemArgTraits&lt; const WRes&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_event_reader_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TSystemArgTraits&lt; EventReader&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_option_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TSystemArgTraits&lt; Option&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_t_01_4" prot="public">Bvr::Detail::TSystemArgTraits&lt; T &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_t_sys_stack_3_01_t_8_8_8_01_4_01_6_01_4" prot="public">Bvr::Detail::TSystemArgTraits&lt; TSysStack&lt; T... &gt; &amp; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_t_sys_stack_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TSystemArgTraits&lt; TSysStack&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_type_list_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TSystemArgTraits&lt; TypeList&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_arg_traits_3_01_w_res_3_01_t_01_4_01_4" prot="private">Bvr::Detail::TSystemArgTraits&lt; WRes&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_system_function" prot="public">Bvr::Detail::TSystemFunction</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_unique" prot="public">Bvr::Detail::TUnique</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_unique_3_01_type_list_3_01_ts_8_8_8_01_4_00_01_u_00_01_us_8_8_8_01_4" prot="public">Bvr::Detail::TUnique&lt; TypeList&lt; Ts... &gt;, U, Us... &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_unique_type_list" prot="public">Bvr::Detail::TUniqueTypeList</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_t_unique_type_list_3_01_type_list_3_01_t_8_8_8_01_4_01_4" prot="public">Bvr::Detail::TUniqueTypeList&lt; TypeList&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_type_constructor_proxy" prot="public">Bvr::Detail::TypeConstructorProxy</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_unpack_to_list" prot="public">Bvr::Detail::UnpackToList</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_unpack_to_list_3_01const_01_q_01_4" prot="public">Bvr::Detail::UnpackToList&lt; const Q &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_unpack_to_list_3_01const_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Detail::UnpackToList&lt; const TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_unpack_to_list_3_01_q_01_4" prot="public">Bvr::Detail::UnpackToList&lt; Q &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_unpack_to_list_3_01_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Bvr::Detail::UnpackToList&lt; TypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_void_fn" prot="public">Bvr::Detail::VoidFn</innerclass>
    <innerclass refid="struct_bvr_1_1_detail_1_1_void_member_fn" prot="public">Bvr::Detail::VoidMemberFn</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="_components_8hpp_1a141f44e6d3cce479ab0697a888cb6bd0" prot="public" static="no" strong="no">
        <type></type>
        <name>EComponentEvent</name>
        <qualifiedname>Bvr::Detail::EComponentEvent</qualifiedname>
        <enumvalue id="_components_8hpp_1a141f44e6d3cce479ab0697a888cb6bd0a7747756cf9d9a1da8119c59ae5fd7400" prot="public">
          <name>Init</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_components_8hpp_1a141f44e6d3cce479ab0697a888cb6bd0a210a08d97db10aecfe95772803aa5e96" prot="public">
          <name>Update</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_components_8hpp_1a141f44e6d3cce479ab0697a888cb6bd0a346add71efdba009aabc4e60bf814a45" prot="public">
          <name>Remove</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_components_8hpp_1a141f44e6d3cce479ab0697a888cb6bd0a208401a245ac2d64364a488a4b90fdc8" prot="public">
          <name>Count</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" line="16" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" bodystart="16" bodyend="22"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_function_traits_8hpp_1adc4469fa321533939ad9b1a2a74dc4a1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_detail_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using Bvr::Detail::void_t = typedef typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <qualifiedname>Bvr::Detail::void_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" line="9" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_function_traits_8hpp_1af2a9ed55ab42316b2f327abef8465235" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, std::is_member_function_pointer&lt; F &gt;::value||std::is_function&lt; F &gt;::value||<ref refid="struct_bvr_1_1_detail_1_1_is_functor" kindref="compound">IsFunctor</ref>&lt; F &gt;::value &gt;</type>
        <definition>using Bvr::Detail::IsFunction = typedef std::integral_constant&lt;bool, std::is_member_function_pointer&lt;F&gt;::value || std::is_function&lt;F&gt;::value || IsFunctor&lt;F&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>IsFunction</name>
        <qualifiedname>Bvr::Detail::IsFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" line="110" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_function_traits_8hpp_1ab0f2a8d6d07021377370387f7401f226" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, std::is_same_v&lt; typename <ref refid="struct_bvr_1_1_detail_1_1_t_function_traits" kindref="compound">TFunctionTraits</ref>&lt; F &gt;::ReturnT, void &gt; &gt;</type>
        <definition>using Bvr::Detail::IsVoidFunction = typedef std::integral_constant&lt; bool, std::is_same_v&lt;typename TFunctionTraits&lt;F&gt;::ReturnT, void&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>IsVoidFunction</name>
        <qualifiedname>Bvr::Detail::IsVoidFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" line="119" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/FunctionTraits.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1ab9240cb850179d8ce248b7053701fe36" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Src</type>
          </param>
          <param>
            <type>typename Dst</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_detail_1_1_copy_decorators" kindref="compound">CopyDecorators</ref>&lt; Src, Dst &gt;::Type</type>
        <definition>using Bvr::Detail::CopyDecoratorsT = typedef typename CopyDecorators&lt;Src, Dst&gt;::Type</definition>
        <argsstring></argsstring>
        <name>CopyDecoratorsT</name>
        <qualifiedname>Bvr::Detail::CopyDecoratorsT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="31" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1ac77dd17adaa4676ba5430a0170469995" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_pointer_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
        <definition>using Bvr::Detail::SysArgDecayT = typedef typename std::remove_pointer_t&lt;std::remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>SysArgDecayT</name>
        <qualifiedname>Bvr::Detail::SysArgDecayT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="34" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1a1caec776276324bd44f0cf28e119d86a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>CopyDecoratorsT&lt; T, typename Detail::SysArgDecayT&lt; T &gt;::TAppResource &gt;</type>
        <definition>using Bvr::Detail::TAppResource = typedef CopyDecoratorsT&lt;T, typename Detail::SysArgDecayT&lt;T&gt;::TAppResource&gt;</definition>
        <argsstring></argsstring>
        <name>TAppResource</name>
        <qualifiedname>Bvr::Detail::TAppResource</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="41" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1ab136481f47d0f598502d5ec2ef266bfa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>SysArgDecayT&lt; typename <ref refid="struct_bvr_1_1_detail_1_1_t_extracted_type" kindref="compound">TExtractedType</ref>&lt; T &gt;::Type &gt;</type>
        <definition>using Bvr::Detail::TDecayedExtractedArg = typedef SysArgDecayT&lt;typename TExtractedType&lt;T&gt;::Type&gt;</definition>
        <argsstring></argsstring>
        <name>TDecayedExtractedArg</name>
        <qualifiedname>Bvr::Detail::TDecayedExtractedArg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="52" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1a5935c59e3e219df4b763654a38de4162" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_detail_1_1_t_arg_group" kindref="compound">TArgGroup</ref>&lt; Ts... &gt;</type>
        <definition>using Bvr::Detail::TSysStack = typedef TArgGroup&lt;Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>TSysStack</name>
        <qualifiedname>Bvr::Detail::TSysStack</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="180" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1ad9fece5951674c7c3021a4066ba1e9f0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_detail_1_1_t_get_args_group" kindref="compound">TGetArgsGroup</ref>&lt; T... &gt;::Type</type>
        <definition>using Bvr::Detail::TArgGroupFor = typedef TGetArgsGroup&lt;T...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>TArgGroupFor</name>
        <qualifiedname>Bvr::Detail::TArgGroupFor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="190" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1aabad871200c3da11d1729ff472e8d41a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::disjunction&lt; <ref refid="struct_bvr_1_1_detail_1_1_is_arg_arrgegate" kindref="compound">IsArgArrgegate</ref>&lt; T &gt;... &gt;</type>
        <definition>using Bvr::Detail::TAreAnyArgAggregate = typedef std::disjunction&lt;IsArgArrgegate&lt;T&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>TAreAnyArgAggregate</name>
        <qualifiedname>Bvr::Detail::TAreAnyArgAggregate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="233" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1a69910443ec7859cabb514ebcce61f0bf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Components</declname>
            <defname>Components</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_bvr_1_1_meta_1_1_type_list_cat" kindref="compound">Meta::TypeListCat</ref>&lt; Components... &gt;::Type</type>
        <definition>using Bvr::Detail::ArgsListCatT = typedef typename Meta::TypeListCat&lt;Components...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>ArgsListCatT</name>
        <qualifiedname>Bvr::Detail::ArgsListCatT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="255" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1aec6dd074b4d135def7fd1ec22d49a565" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>ArgsListCatT&lt; typename <ref refid="struct_bvr_1_1_detail_1_1_unpack_to_list" kindref="compound">UnpackToList</ref>&lt; typename std::remove_reference_t&lt; Ts &gt; &gt;::Type... &gt;</type>
        <definition>using Bvr::Detail::TUnpacked = typedef ArgsListCatT&lt; typename UnpackToList&lt;typename std::remove_reference_t&lt;Ts&gt; &gt;::Type...&gt;</definition>
        <argsstring></argsstring>
        <name>TUnpacked</name>
        <qualifiedname>Bvr::Detail::TUnpacked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="262" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1a31b2fb852b93909ca6495a3a4b05a88d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>ArgsListCatT&lt; TUnpacked&lt; T... &gt; &gt;</type>
        <definition>using Bvr::Detail::TArgConcat = typedef ArgsListCatT&lt;TUnpacked&lt;T...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TArgConcat</name>
        <qualifiedname>Bvr::Detail::TArgConcat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="280" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1abcb3802466f0db8d16c7828ccafb38d6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::disjunction&lt; <ref refid="struct_bvr_1_1_detail_1_1_is_world_resource" kindref="compound">IsWorldResource</ref>&lt; Detail::SysArgDecayT&lt; T &gt; &gt;... &gt;</type>
        <definition>using Bvr::Detail::AreWorldArguments = typedef std::disjunction&lt;IsWorldResource&lt;Detail::SysArgDecayT&lt;T&gt; &gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>AreWorldArguments</name>
        <qualifiedname>Bvr::Detail::AreWorldArguments</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="319" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_app_traits_8hpp_1aba0b70fa51c20534ceba0cc7da42db2d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SysTraitsT</type>
            <defval>Detail::SystemTraitsT&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="struct_bvr_1_1_detail_1_1_t_are_tuple_args_world" kindref="compound">TAreTupleArgsWorld</ref>&lt; typename SysTraitsT::CheckT &gt;</type>
        <definition>using Bvr::Detail::TIsWorldSystem = typedef TAreTupleArgsWorld&lt;typename SysTraitsT::CheckT&gt;</definition>
        <argsstring></argsstring>
        <name>TIsWorldSystem</name>
        <qualifiedname>Bvr::Detail::TIsWorldSystem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="336" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_label_8hpp_1a20232edb565021a8844c94e775b9e5a0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::disjunction&lt; std::is_same&lt; <ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">HashedString</ref>, T &gt;, std::is_same&lt; <ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">HashedWString</ref>, T &gt;, std::is_constructible&lt; <ref refid="struct_bvr_1_1_detail_1_1_t_basic_hashed_string" kindref="compound">TBasicHashedString</ref>&lt; char &gt;, T &gt;, std::is_constructible&lt; <ref refid="struct_bvr_1_1_detail_1_1_t_basic_hashed_string" kindref="compound">TBasicHashedString</ref>&lt; wchar_t &gt;, T &gt; &gt;</type>
        <definition>using Bvr::Detail::IsStringHashable = typedef std::disjunction&lt;std::is_same&lt;HashedString, T&gt;, std::is_same&lt;HashedWString, T&gt;, std::is_constructible&lt;TBasicHashedString&lt;char&gt;, T&gt;, std::is_constructible&lt;TBasicHashedString&lt;wchar_t&gt;, T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>IsStringHashable</name>
        <qualifiedname>Bvr::Detail::IsStringHashable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/Label.hpp" line="12" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/Label.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_components_8hpp_1a8d432c878a9bba463612f8d4e828bd2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Bvr::Detail::DispatchComponentEvents</definition>
        <argsstring>(CWorld &amp;world, Query&lt; With&lt; TComponentEvent&lt; T &gt; &gt; &gt; events)</argsstring>
        <name>DispatchComponentEvents</name>
        <qualifiedname>Bvr::Detail::DispatchComponentEvents</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_e_c_s_1_1_t_query" kindref="compound">Query</ref>&lt; <ref refid="struct_bvr_1_1_e_c_s_1_1_with" kindref="compound">With</ref>&lt; <ref refid="struct_bvr_1_1_detail_1_1_t_component_event" kindref="compound">TComponentEvent</ref>&lt; T &gt; &gt; &gt;</type>
          <declname>events</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" line="27" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" bodystart="27" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_components_8hpp_1a8293726cf31abc03515b0aa807047ba2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Bvr::Detail::CleanUpComponentEvents</definition>
        <argsstring>(CWorld &amp;world, Query&lt; With&lt; T &gt; &gt; events)</argsstring>
        <name>CleanUpComponentEvents</name>
        <qualifiedname>Bvr::Detail::CleanUpComponentEvents</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_e_c_s_1_1_t_query" kindref="compound">Query</ref>&lt; <ref refid="struct_bvr_1_1_e_c_s_1_1_with" kindref="compound">With</ref>&lt; T &gt; &gt;</type>
          <declname>events</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" line="52" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="_world_archive_8hpp_1a05463ba9713e6c3ee7bd0ae51135acf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view Bvr::Detail::GetTypeName</definition>
        <argsstring>(const Meta::Type &amp;type)</argsstring>
        <name>GetTypeName</name>
        <qualifiedname>Bvr::Detail::GetTypeName</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Meta::Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" line="22" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="_world_archive_8hpp_1a0658b2e7004c578e0b6a7110b8fb2ab1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string_view</type>
        <definition>std::string_view Bvr::Detail::GetTypeName</definition>
        <argsstring>()</argsstring>
        <name>GetTypeName</name>
        <qualifiedname>Bvr::Detail::GetTypeName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" line="25" column="41" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="_world_archive_8hpp_1a6fb8781e639b876c39080588baba5e29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view Bvr::Detail::TryTypeNames</definition>
        <argsstring>(CArchiveBase &amp;arch, Meta::Type type)</argsstring>
        <name>TryTypeNames</name>
        <qualifiedname>Bvr::Detail::TryTypeNames</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_archive_base" kindref="compound">CArchiveBase</ref> &amp;</type>
          <declname>arch</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Meta::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" line="30" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="_world_archive_8hpp_1a5536d13c252d4504e427f15157cabc48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string_view</type>
        <definition>std::string_view Bvr::Detail::TryTypeNames</definition>
        <argsstring>(CArchiveBase &amp;arch)</argsstring>
        <name>TryTypeNames</name>
        <qualifiedname>Bvr::Detail::TryTypeNames</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_archive_base" kindref="compound">CArchiveBase</ref> &amp;</type>
          <declname>arch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" line="43" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/WorldArchive.hpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="_world_8hpp_1a6d85e989f748f4263d3e3ebaf095b723" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TRes</type>
          </param>
          <param>
            <type>typename TOut</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Detail::ExtractWorldResource</definition>
        <argsstring>(CWorld &amp;world, TOut &amp;out) noexcept</argsstring>
        <name>ExtractWorldResource</name>
        <qualifiedname>Bvr::Detail::ExtractWorldResource</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>TOut &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/World.hpp" line="277" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/World.hpp" bodystart="277" bodyend="279" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="_world_8hpp_1a5b5cc4e870583140fe302ce1af1e0469" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>CompT</declname>
            <defname>CompT</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>ExcludeT</declname>
            <defname>ExcludeT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Detail::ExtractQuery</definition>
        <argsstring>(CWorld &amp;pWorld, Query&lt; With&lt; CompT... &gt;, WithOut&lt; ExcludeT... &gt; &gt; &amp;out) noexcept</argsstring>
        <name>ExtractQuery</name>
        <qualifiedname>Bvr::Detail::ExtractQuery</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_e_c_s_1_1_t_query" kindref="compound">Query</ref>&lt; <ref refid="struct_bvr_1_1_e_c_s_1_1_with" kindref="compound">With</ref>&lt; CompT... &gt;, <ref refid="struct_bvr_1_1_e_c_s_1_1_with_out" kindref="compound">WithOut</ref>&lt; ExcludeT... &gt; &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/World.hpp" line="283" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/World.hpp" bodystart="283" bodyend="286" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_dependency_graph_8hpp_1a7d717b5191cd24ce55895c8d5af8754e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Bvr::Detail::GetBefore</definition>
        <argsstring>(const T &amp;node)</argsstring>
        <name>GetBefore</name>
        <qualifiedname>Bvr::Detail::GetBefore</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" line="16" column="39" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="_dependency_graph_8hpp_1a245674b004c07b3257b7c8bea2766174" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Bvr::Detail::GetAfter</definition>
        <argsstring>(const T &amp;node)</argsstring>
        <name>GetAfter</name>
        <qualifiedname>Bvr::Detail::GetAfter</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" line="24" column="39" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="_dependency_graph_8hpp_1a5794db113ec566c84d4b9d79ad906e30" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Bvr::Detail::GetLabels</definition>
        <argsstring>(const T &amp;node)</argsstring>
        <name>GetLabels</name>
        <qualifiedname>Bvr::Detail::GetLabels</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" line="32" column="39" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Utils/DependencyGraph.hpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1aa89d94d26badb7ec4d8324dec5f8ecd2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto Bvr::Detail::TypeNameStripped</definition>
        <argsstring>() noexcept</argsstring>
        <name>TypeNameStripped</name>
        <qualifiedname>Bvr::Detail::TypeNameStripped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="19" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="19" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a9c7a3199877335a0da1dabf9071dac90" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <defval>TypeNameStripped&lt;T&gt;().find_first_of(&apos;.&apos;)</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">Bvr::TTypeName</ref></type>
        <definition>static constexpr Bvr::TTypeName Bvr::Detail::TypeName</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>TypeName</name>
        <qualifiedname>Bvr::Detail::TypeName</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="57" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a68e622206bc666a6cef8bca153276a3f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="class_bvr_1_1_t_basic_hashed_string" kindref="compound">Bvr::TTypeName</ref></type>
        <definition>static constexpr Bvr::TTypeName Bvr::Detail::TypeName</definition>
        <argsstring>(char) noexcept</argsstring>
        <name>TypeName</name>
        <qualifiedname>Bvr::Detail::TypeName</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="63" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a419c9b78e887f719a1d103b8649f3bac" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <defval>TypeNameStripped&lt;T&gt;().find_first_of(&apos;.&apos;)</defval>
          </param>
        </templateparamlist>
        <type>constexpr Bvr::TTypeHash</type>
        <definition>static constexpr Bvr::TTypeHash Bvr::Detail::TypeHash</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>TypeHash</name>
        <qualifiedname>Bvr::Detail::TypeHash</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="69" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1a5f3feb7a7d6464a947c2bb614e5bc584" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr Bvr::TTypeHash</type>
        <definition>static constexpr Bvr::TTypeHash Bvr::Detail::TypeHash</definition>
        <argsstring>(char) noexcept</argsstring>
        <name>TypeHash</name>
        <qualifiedname>Bvr::Detail::TypeHash</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" line="75" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeInfo.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a2acd8ac22e8cc75d83fc75b278e0b6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Animation::TargetId</type>
        <definition>Animation::TargetId Bvr::Detail::MakeTargetId</definition>
        <argsstring>(CEntity ent)</argsstring>
        <name>MakeTargetId</name>
        <qualifiedname>Bvr::Detail::MakeTargetId</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="36" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="36" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1ab1e46df6d78d5ae26c6f39fd0203ea68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
        <definition>CEntity Bvr::Detail::FindAnimatedEntity</definition>
        <argsstring>(CEntity player, const Animation::TargetId &amp;targetId)</argsstring>
        <name>FindAnimatedEntity</name>
        <qualifiedname>Bvr::Detail::FindAnimatedEntity</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
          <declname>player</declname>
        </param>
        <param>
          <type>const Animation::TargetId &amp;</type>
          <declname>targetId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="38" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="38" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a11a52f82a9d2bcda6bcc3e62f81a5324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref></type>
        <definition>Meta::Variant Bvr::Detail::GetAsVariant</definition>
        <argsstring>(const PropertyCurve &amp;curve, const float *pVal)</argsstring>
        <name>GetAsVariant</name>
        <qualifiedname>Bvr::Detail::GetAsVariant</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>pVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="41" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="41" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1ac12abfd9a61b6d10a426b9a82f748d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Meta::Instance</ref></type>
        <definition>Meta::Instance Bvr::Detail::GetAsInstance</definition>
        <argsstring>(const PropertyCurve &amp;curve, const float *pVal)</argsstring>
        <name>GetAsInstance</name>
        <qualifiedname>Bvr::Detail::GetAsInstance</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>pVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="42" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="42" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a381f82eafcf6f0a80cff3c20dd2cbb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Detail::GetAsFloats</definition>
        <argsstring>(const PropertyCurve &amp;curve, const float *pVal, std::vector&lt; float &gt; &amp;out)</argsstring>
        <name>GetAsFloats</name>
        <qualifiedname>Bvr::Detail::GetAsFloats</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>pVal</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="44" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="44" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a24d38c6d7665dadb6ba9bbc351c1cfb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Detail::SetFromFloats</definition>
        <argsstring>(PropertyCurve &amp;curve, float *pVal, Span&lt; float const &gt; vals)</argsstring>
        <name>SetFromFloats</name>
        <qualifiedname>Bvr::Detail::SetFromFloats</qualifiedname>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pVal</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_util_1_1_t_span" kindref="compound">Span</ref>&lt; float const &gt;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="46" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="46" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a471c3a5d7068545f1cf1be2231a894e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Meta::Instance</ref></type>
        <definition>Meta::Instance Bvr::Detail::GetKeyframeSampleAsInstance</definition>
        <argsstring>(const PropertyCurve &amp;curve, uint32 keyframeIdx)</argsstring>
        <name>GetKeyframeSampleAsInstance</name>
        <qualifiedname>Bvr::Detail::GetKeyframeSampleAsInstance</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>keyframeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="49" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="49" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a17ec26556eaf23f38b66cccb7bb733fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref></type>
        <definition>Meta::Variant Bvr::Detail::GetKeyframeSampleAsVariant</definition>
        <argsstring>(const PropertyCurve &amp;curve, int32 keyframeIdx)</argsstring>
        <name>GetKeyframeSampleAsVariant</name>
        <qualifiedname>Bvr::Detail::GetKeyframeSampleAsVariant</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>keyframeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="52" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="52" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1ab007502b6b97bd62791a0243dfedfd4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref></type>
        <definition>Meta::Variant Bvr::Detail::GetInputTangentAsVariant</definition>
        <argsstring>(const PropertyCurve &amp;curve, int32 keyframeIdx)</argsstring>
        <name>GetInputTangentAsVariant</name>
        <qualifiedname>Bvr::Detail::GetInputTangentAsVariant</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>keyframeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="54" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="54" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a7c49663b6c53aa39668a45f792ad8ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref></type>
        <definition>Meta::Variant Bvr::Detail::GetOutputTangentAsVariant</definition>
        <argsstring>(const PropertyCurve &amp;curve, int32 keyframeIdx)</argsstring>
        <name>GetOutputTangentAsVariant</name>
        <qualifiedname>Bvr::Detail::GetOutputTangentAsVariant</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>keyframeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="56" column="20" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="56" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a436e618b61216322266b72c046271674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_curve_stride_info" kindref="compound">SCurveStrideInfo</ref></type>
        <definition>SCurveStrideInfo Bvr::Detail::GetCurveStride</definition>
        <argsstring>(const PropertyCurve &amp;curve)</argsstring>
        <name>GetCurveStride</name>
        <qualifiedname>Bvr::Detail::GetCurveStride</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="60" column="22" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="60" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a44664795800061cabe3a93f0001a01b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t Bvr::Detail::GetKeyframeIdx</definition>
        <argsstring>(const PropertyCurve &amp;curve, std::ptrdiff_t keyframe)</argsstring>
        <name>GetKeyframeIdx</name>
        <qualifiedname>Bvr::Detail::GetKeyframeIdx</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>keyframe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="62" column="22" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="62" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1af89998078ce8549c542c0f0f97b41f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_keyframe_c_ptr" kindref="compound">SKeyframeCPtr</ref></type>
        <definition>SKeyframeCPtr Bvr::Detail::GetKeyframePtr</definition>
        <argsstring>(const PropertyCurve &amp;curve, std::ptrdiff_t keyframeIdx)</argsstring>
        <name>GetKeyframePtr</name>
        <qualifiedname>Bvr::Detail::GetKeyframePtr</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>keyframeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="64" column="22" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="64" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1abb405602e93274b45a42c54536ccd689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_keyframe_ptr" kindref="compound">SKeyframePtr</ref></type>
        <definition>SKeyframePtr Bvr::Detail::GetKeyframePtr</definition>
        <argsstring>(PropertyCurve &amp;curve, std::ptrdiff_t keyframeIdx)</argsstring>
        <name>GetKeyframePtr</name>
        <qualifiedname>Bvr::Detail::GetKeyframePtr</qualifiedname>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>keyframeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="66" column="22" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="66" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a6208e3932c78aa43c53537e347a17c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Bvr::Detail::AdustTimeForMove</definition>
        <argsstring>(const PropertyCurve &amp;curve, float fromTime, float toTime)</argsstring>
        <name>AdustTimeForMove</name>
        <qualifiedname>Bvr::Detail::AdustTimeForMove</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fromTime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>toTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="69" column="11" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="69" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a9c28461b3a9099eeaa4587d3e1d19fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const PropertyCurve *</type>
        <definition>const PropertyCurve * Bvr::Detail::FindCurve</definition>
        <argsstring>(const Animation::Track &amp;track, const Animation::TargetId &amp;targetId, const Meta::Type compType, std::string_view propName)</argsstring>
        <name>FindCurve</name>
        <qualifiedname>Bvr::Detail::FindCurve</qualifiedname>
        <param>
          <type>const Animation::Track &amp;</type>
          <declname>track</declname>
        </param>
        <param>
          <type>const Animation::TargetId &amp;</type>
          <declname>targetId</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Meta::Type</ref></type>
          <declname>compType</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="72" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="72" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1acb11b683ebf58bfef67ff2981c8e4a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PropertyCurve *</type>
        <definition>PropertyCurve * Bvr::Detail::FindCurve</definition>
        <argsstring>(Animation::Track &amp;track, const Animation::TargetId &amp;targetId, const Meta::Type compType, std::string_view propName)</argsstring>
        <name>FindCurve</name>
        <qualifiedname>Bvr::Detail::FindCurve</qualifiedname>
        <param>
          <type>Animation::Track &amp;</type>
          <declname>track</declname>
        </param>
        <param>
          <type>const Animation::TargetId &amp;</type>
          <declname>targetId</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Meta::Type</ref></type>
          <declname>compType</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="77" column="25" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="77" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a0574765ead3b2ebc669f9332031ebac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t Bvr::Detail::FindTime</definition>
        <argsstring>(const PropertyCurve &amp;curve, float time)</argsstring>
        <name>FindTime</name>
        <qualifiedname>Bvr::Detail::FindTime</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="82" column="26" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="82" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a6c0319b7dcd99b0b943627910fadcb1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_keyframe_c_ptr" kindref="compound">SKeyframeCPtr</ref></type>
        <definition>SKeyframeCPtr Bvr::Detail::GetKeyframeFromTime</definition>
        <argsstring>(const PropertyCurve &amp;curve, float time)</argsstring>
        <name>GetKeyframeFromTime</name>
        <qualifiedname>Bvr::Detail::GetKeyframeFromTime</qualifiedname>
        <param>
          <type>const PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="83" column="19" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="83" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a2c72a61536ac1eaa2e22fa499451b67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_keyframe_ptr" kindref="compound">SKeyframePtr</ref></type>
        <definition>SKeyframePtr Bvr::Detail::GetKeyframeFromTime</definition>
        <argsstring>(PropertyCurve &amp;curve, float time)</argsstring>
        <name>GetKeyframeFromTime</name>
        <qualifiedname>Bvr::Detail::GetKeyframeFromTime</qualifiedname>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="84" column="19" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="84" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1ae5dacbf60f93fbead4ed7789b444115c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_keyframe_ptr" kindref="compound">SKeyframePtr</ref></type>
        <definition>SKeyframePtr Bvr::Detail::InsertEmptyKeyframe</definition>
        <argsstring>(PropertyCurve &amp;curve, float time)</argsstring>
        <name>InsertEmptyKeyframe</name>
        <qualifiedname>Bvr::Detail::InsertEmptyKeyframe</qualifiedname>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="85" column="19" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="85" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a9cfc768b3eee4c51e0eabb30679f4e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Detail::DeleteKeyframe</definition>
        <argsstring>(PropertyCurve &amp;curve, float time)</argsstring>
        <name>DeleteKeyframe</name>
        <qualifiedname>Bvr::Detail::DeleteKeyframe</qualifiedname>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="86" column="19" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="86" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a6831e225a34c0486da97766e438b564d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_s_keyframe_ptr" kindref="compound">SKeyframePtr</ref></type>
        <definition>SKeyframePtr Bvr::Detail::CopyKeyframe</definition>
        <argsstring>(PropertyCurve &amp;curve, float time, std::vector&lt; float &gt; &amp;out)</argsstring>
        <name>CopyKeyframe</name>
        <qualifiedname>Bvr::Detail::CopyKeyframe</qualifiedname>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="88" column="19" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="88" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a55fdb9ed2d60d5f1256bdef2018ccd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Detail::SampleAndWriteKeyframe</definition>
        <argsstring>(CEntity targetEntity, const IComponentBind &amp;compType, std::string_view propertyName, float *pPropData)</argsstring>
        <name>SampleAndWriteKeyframe</name>
        <qualifiedname>Bvr::Detail::SampleAndWriteKeyframe</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
          <declname>targetEntity</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bvr_1_1_i_component_bind" kindref="compound">IComponentBind</ref> &amp;</type>
          <declname>compType</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>propertyName</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pPropData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="91" column="19" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="91" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1a85486a0ebcac02083d5c18f3566b8296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Detail::SampleAndInsertKeyframe</definition>
        <argsstring>(CEntity targetEntity, Animation::Track &amp;track, const Animation::TargetId &amp;targetId, const IComponentBind &amp;compType, std::string_view propertyName, float time, Animation::EInterpolationMode mode)</argsstring>
        <name>SampleAndInsertKeyframe</name>
        <qualifiedname>Bvr::Detail::SampleAndInsertKeyframe</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
          <declname>targetEntity</declname>
        </param>
        <param>
          <type>Animation::Track &amp;</type>
          <declname>track</declname>
        </param>
        <param>
          <type>const Animation::TargetId &amp;</type>
          <declname>targetId</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bvr_1_1_i_component_bind" kindref="compound">IComponentBind</ref> &amp;</type>
          <declname>compType</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>propertyName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Animation::EInterpolationMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="96" column="10" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="96" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="_curve_commands_8hpp_1af58d2ed9071736e70ea2bf2b8f442477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Detail::SampleAndModifyKeyframe</definition>
        <argsstring>(CWorld &amp;world, TEntity hTargetEntity, PropertyCurve &amp;curve, float time)</argsstring>
        <name>SampleAndModifyKeyframe</name>
        <qualifiedname>Bvr::Detail::SampleAndModifyKeyframe</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_t_entity" kindref="compound">TEntity</ref></type>
          <declname>hTargetEntity</declname>
        </param>
        <param>
          <type>PropertyCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" line="102" column="10" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/AnimationEditing/CurveCommands.hpp" declline="102" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1a9f180f779ed2053aed693ff8256f5549" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
        <definition>CEntity Bvr::Detail::FindByUUID</definition>
        <argsstring>(CWorld &amp;world, const Utils::uuid &amp;uuid)</argsstring>
        <name>FindByUUID</name>
        <qualifiedname>Bvr::Detail::FindByUUID</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bvr_1_1_util_1_1uuid" kindref="compound">Utils::uuid</ref> &amp;</type>
          <declname>uuid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="7" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="7" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1ac4cd67ad314cd9db71a6bcce34420870" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_util_1_1uuid" kindref="compound">Utils::uuid</ref></type>
        <definition>Utils::uuid Bvr::Detail::GetParentUUID</definition>
        <argsstring>(const CEntity &amp;ent)</argsstring>
        <name>GetParentUUID</name>
        <qualifiedname>Bvr::Detail::GetParentUUID</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref> &amp;</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="20" column="20" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1a6519a664446e401517d15556d8cf95ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
        <definition>CEntity Bvr::Detail::AddToWorld</definition>
        <argsstring>(const CEntity &amp;srcEnt, CWorld &amp;dstWorld)</argsstring>
        <name>AddToWorld</name>
        <qualifiedname>Bvr::Detail::AddToWorld</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref> &amp;</type>
          <declname>srcEnt</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &amp;</type>
          <declname>dstWorld</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="30" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="30" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1a2c8db77cca0464e0073b8b77cfcfc143" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_util_1_1uuid" kindref="compound">Utils::uuid</ref></type>
        <definition>Utils::uuid Bvr::Detail::StoreEntity</definition>
        <argsstring>(const CEntity &amp;ent)</argsstring>
        <name>StoreEntity</name>
        <qualifiedname>Bvr::Detail::StoreEntity</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref> &amp;</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="60" column="20" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1ac547d614d87ff622df04486a6416eea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &gt;</type>
        <definition>Handle&lt; CWorld &gt; Bvr::Detail::StoreWorld</definition>
        <argsstring>(CWorld *pWorld)</argsstring>
        <name>StoreWorld</name>
        <qualifiedname>Bvr::Detail::StoreWorld</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> *</type>
          <declname>pWorld</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="64" column="15" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1a1ec7c4cb99eccf71d486cc6f516669fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> *</type>
        <definition>CWorld * Bvr::Detail::GetWorld</definition>
        <argsstring>(const Handle&lt; CWorld &gt; &amp;hWorld)</argsstring>
        <name>GetWorld</name>
        <qualifiedname>Bvr::Detail::GetWorld</qualifiedname>
        <param>
          <type>const <ref refid="struct_bvr_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &gt; &amp;</type>
          <declname>hWorld</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="68" column="15" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="_world_commands_common_8hpp_1a794d4a4585d8eb90549c956b4d3a815c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_c_entity" kindref="compound">CEntity</ref></type>
        <definition>CEntity Bvr::Detail::GetEntity</definition>
        <argsstring>(const Handle&lt; CWorld &gt; &amp;hWorld, Utils::uuid entityId)</argsstring>
        <name>GetEntity</name>
        <qualifiedname>Bvr::Detail::GetEntity</qualifiedname>
        <param>
          <type>const <ref refid="struct_bvr_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> &gt; &amp;</type>
          <declname>hWorld</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_util_1_1uuid" kindref="compound">Utils::uuid</ref></type>
          <declname>entityId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" line="72" column="16" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/Core/WorldCommandsCommon.hpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="_app_traits_8hpp_1a6e70b5d53333130afbf5171097900d65" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>static constexpr bool Bvr::Detail::IsValid</definition>
        <argsstring>(const T &amp;item) noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Detail::IsValid</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="67" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="_app_traits_8hpp_1a5a15dfc6449955653c1c5305bef14293" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Stack</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>static constexpr bool Bvr::Detail::IsValid</definition>
        <argsstring>(const Stack &amp;args, std::index_sequence&lt; I... &gt;) noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Detail::IsValid</qualifiedname>
        <param>
          <type>const Stack &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="343" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="_app_traits_8hpp_1abf5aa97678833e208e588e1214b38558" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>static constexpr bool Bvr::Detail::IsValid</definition>
        <argsstring>(const TSysStack&lt; T... &gt; &amp;args) noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Detail::IsValid</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_detail_1_1_t_arg_group" kindref="compound">TSysStack</ref>&lt; T... &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" line="349" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/AppTraits.hpp" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1ad8af0fab4f750ba5b4ae778eb2871e59" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Detail::ExtractToTuple</definition>
        <argsstring>(App &amp;app, CWorld *, T &amp;out) noexcept</argsstring>
        <name>ExtractToTuple</name>
        <qualifiedname>Bvr::Detail::ExtractToTuple</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> *</type>
          <defname>pWorld</defname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="20" column="10" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="20" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1af33f3a9ebe5a8efca9eaaaefa738174b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Stack</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>static T &amp; Bvr::Detail::Get</definition>
        <argsstring>(Stack &amp;args)</argsstring>
        <name>Get</name>
        <qualifiedname>Bvr::Detail::Get</qualifiedname>
        <param>
          <type>Stack &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="58" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1a46b52ff251c37325cb8305d5f8d5f5b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename Stack</type>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>static auto &amp; Bvr::Detail::Get</definition>
        <argsstring>(Stack &amp;args)</argsstring>
        <name>Get</name>
        <qualifiedname>Bvr::Detail::Get</qualifiedname>
        <param>
          <type>Stack &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="65" column="31" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1a6f7498e42aa658138b16e3bbb44f3e62" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Stack</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Detail::ExtractToTuple</definition>
        <argsstring>(App &amp;app, CWorld *pWorld, Stack &amp;out, std::index_sequence&lt; I... &gt;) noexcept</argsstring>
        <name>ExtractToTuple</name>
        <qualifiedname>Bvr::Detail::ExtractToTuple</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>Stack &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="75" column="10" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1a8102a42725bf924ec694b3d3460f30a3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Detail::ExtractToTuple</definition>
        <argsstring>(App &amp;app, CWorld *pWorld, TSysStack&lt; T... &gt; &amp;out) noexcept</argsstring>
        <name>ExtractToTuple</name>
        <qualifiedname>Bvr::Detail::ExtractToTuple</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_c_world" kindref="compound">CWorld</ref> *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_detail_1_1_t_arg_group" kindref="compound">TSysStack</ref>&lt; T... &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="81" column="10" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1aa387737c27b6ff2730dfa3ee2066cf0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Tp</declname>
            <defname>Tp</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Bvr::Detail::ApplyDefault</definition>
        <argsstring>(TSysStack&lt; Tp... &gt; &amp;out, const D &amp;def)</argsstring>
        <name>ApplyDefault</name>
        <qualifiedname>Bvr::Detail::ApplyDefault</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_detail_1_1_t_arg_group" kindref="compound">TSysStack</ref>&lt; Tp... &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const D &amp;</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="88" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1a60cb8f71360b0620290aee521263d836" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Tp</declname>
            <defname>Tp</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Defaults</declname>
            <defname>Defaults</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Bvr::Detail::ApplyDefaults</definition>
        <argsstring>(TSysStack&lt; Tp... &gt; &amp;out, const TSysStack&lt; Defaults... &gt; &amp;defaults={})</argsstring>
        <name>ApplyDefaults</name>
        <qualifiedname>Bvr::Detail::ApplyDefaults</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_detail_1_1_t_arg_group" kindref="compound">TSysStack</ref>&lt; Tp... &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_detail_1_1_t_arg_group" kindref="compound">TSysStack</ref>&lt; Defaults... &gt; &amp;</type>
          <declname>defaults</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="95" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="_system_8hpp_1a026b968db154a39ff5e5672ed88c5b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fn</type>
          </param>
          <param>
            <type>typename Stack</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Bvr::Detail::Invoke</definition>
        <argsstring>(const Fn &amp;fn, Stack &amp;args, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>Invoke</name>
        <qualifiedname>Bvr::Detail::Invoke</qualifiedname>
        <param>
          <type>const Fn &amp;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>Stack &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" line="101" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrApp/System.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrWorld/Components.hpp" line="10" column="1"/>
  </compounddef>
</doxygen>
