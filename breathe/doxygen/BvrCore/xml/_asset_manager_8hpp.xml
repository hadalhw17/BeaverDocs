<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_asset_manager_8hpp" kind="file" language="C++">
    <compoundname>AssetManager.hpp</compoundname>
    <includes local="no">BvrAssetExport.hpp</includes>
    <includes refid="_asset_system_8hpp" local="no">IO/AssetSystem.hpp</includes>
    <includes refid="_meta_8hpp" local="no">Meta/Meta.hpp</includes>
    <includes refid="_i_file_system_8hpp" local="no">IO/IFileSystem.hpp</includes>
    <includedby refid="_magica_vox_loader_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Bvr3DEngine/Voxel/MagicaVoxLoader.hpp</includedby>
    <includedby refid="_blend_space_loader_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrAnimation/AnimGraph/BlendSpaceLoader.hpp</includedby>
    <includedby refid="_graph_i_o_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrAnimation/AnimGraph/GraphIO.hpp</includedby>
    <includedby refid="_clip_loader_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrAnimation/ClipLoader.hpp</includedby>
    <includedby refid="_gltf_loader_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrGLTF/GltfLoader.hpp</includedby>
    <includedby refid="_d_d_s_loader_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrImage/DDSLoader.hpp</includedby>
    <includedby refid="_editor_tool_controller_8hpp" local="no">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Public/BvrEditor/EditorToolController.hpp</includedby>
    <incdepgraph>
      <node id="17">
        <label>BvrApp/AppTraits.hpp</label>
        <link refid="_app_traits_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>BaseTypes.hpp</label>
        <link refid="_base_types_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Events/Events.hpp</label>
        <link refid="_events_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>IO/AssetHandle.hpp</label>
        <link refid="_asset_handle_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetManager.hpp</label>
        <link refid="_asset_manager_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>IO/AssetSystem.hpp</label>
        <link refid="_asset_system_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>IO/IFileSystem.hpp</label>
        <link refid="_i_file_system_8hpp_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Argument.hpp</label>
        <link refid="_argument_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>ArgumentExtractor.hpp</label>
        <link refid="_argument_extractor_8hpp_source"/>
      </node>
      <node id="34">
        <label>ArgumentImpl.hpp</label>
        <link refid="_argument_impl_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>AssociativeContainerBinder.hpp</label>
        <link refid="_associative_container_binder_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>AssociativeContainerBinderImpl.hpp</label>
        <link refid="_associative_container_binder_impl_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>AssociativeContainerViewImpl.hpp</label>
        <link refid="_associative_container_view_impl_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>Attribute.hpp</label>
        <link refid="_attribute_8hpp_source"/>
      </node>
      <node id="60">
        <label>BaseClassInfo.hpp</label>
        <link refid="_base_class_info_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>CastingHelpers.hpp</label>
        <link refid="_casting_helpers_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>ContainerViewCreation.hpp</label>
        <link refid="_container_view_creation_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>ContainerViewCreationImpl.hpp</label>
        <link refid="_container_view_creation_impl_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>ConversionFunction.hpp</label>
        <link refid="_conversion_function_8hpp_source"/>
      </node>
      <node id="29">
        <label>Enum.hpp</label>
        <link refid="_enum_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>Instance.hpp</label>
        <link refid="_instance_8hpp_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>IteratorBinder.hpp</label>
        <link refid="_iterator_binder_8hpp_source"/>
      </node>
      <node id="57">
        <label>LocalRegSink.hpp</label>
        <link refid="_local_reg_sink_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Meta/Meta.hpp</label>
        <link refid="_meta_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>Method.hpp</label>
        <link refid="_method_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ObjectMemoryStorage.hpp</label>
        <link refid="_object_memory_storage_8hpp_source"/>
      </node>
      <node id="53">
        <label>Property.hpp</label>
        <link refid="_property_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Meta/PropertyTraits.hpp</label>
        <link refid="_property_traits_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>SequentialContainerBinder.hpp</label>
        <link refid="_sequential_container_binder_8hpp_source"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>SequentialContainerBinderImpl.hpp</label>
        <link refid="_sequential_container_binder_impl_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>SequentialContainerViewImpl.hpp</label>
        <link refid="_sequential_container_view_impl_8hpp_source"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Type.hpp</label>
        <link refid="_type_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>TypeCasting.hpp</label>
        <link refid="_type_casting_8hpp_source"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>TypeDesc.hpp</label>
        <link refid="_type_desc_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>TypeImpl.hpp</label>
        <link refid="_type_impl_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Meta/TypeInfo.hpp</label>
        <link refid="_type_info_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>TypeMacros.hpp</label>
        <link refid="_type_macros_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>TypeReg.hpp</label>
        <link refid="_type_reg_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Meta/Utils.hpp</label>
        <link refid="_meta_2_utils_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Variant.hpp</label>
        <link refid="_variant_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>VariantData.hpp</label>
        <link refid="_variant_data_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>VariantImpl.hpp</label>
        <link refid="_variant_impl_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>VariantPolicy.hpp</label>
        <link refid="_variant_policy_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>WrapperBinder.hpp</label>
        <link refid="_wrapper_binder_8hpp_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>WrapperBinderImpl.hpp</label>
        <link refid="_wrapper_binder_impl_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Platform/CompilerSettings.hpp</label>
        <link refid="_compiler_settings_8hpp_source"/>
      </node>
      <node id="5">
        <label>Utils/DenseStorage.hpp</label>
        <link refid="_dense_storage_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>EntityHandle.hpp</label>
        <link refid="_entity_handle_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Utils/FunctionTraits.hpp</label>
        <link refid="_function_traits_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>BvrCommon/Utils/Span.hpp</label>
        <link refid="_span_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>SparseSet.hpp</label>
        <link refid="_sparse_set_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Utils/StringHash.hpp</label>
        <link refid="_string_hash_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>BvrLog/Assert.hpp</label>
        <link refid="_assert_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>BvrWorld/WorldDefs.hpp</label>
        <link refid="_world_defs_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>BvrAssetExport.hpp</label>
      </node>
      <node id="22">
        <label>BvrCommon/Hash.h</label>
      </node>
      <node id="62">
        <label>BvrCoreExport.hpp</label>
      </node>
      <node id="12">
        <label>BvrLogExport.hpp</label>
      </node>
      <node id="25">
        <label>BvrMetaExport.hpp</label>
      </node>
      <node id="13">
        <label>Hash.h</label>
      </node>
      <node id="11">
        <label>signal.h</label>
      </node>
      <node id="4">
        <label>std</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Bvr3DEngine/Voxel/MagicaVoxLoader.hpp</label>
        <link refid="_magica_vox_loader_8hpp_source"/>
      </node>
      <node id="3">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrAnimation/AnimGraph/BlendSpaceLoader.hpp</label>
        <link refid="_blend_space_loader_8hpp_source"/>
      </node>
      <node id="4">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrAnimation/AnimGraph/GraphIO.hpp</label>
        <link refid="_graph_i_o_8hpp_source"/>
      </node>
      <node id="5">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrAnimation/ClipLoader.hpp</label>
        <link refid="_clip_loader_8hpp_source"/>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetManager.hpp</label>
        <link refid="_asset_manager_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrGLTF/GltfLoader.hpp</label>
        <link refid="_gltf_loader_8hpp_source"/>
      </node>
      <node id="7">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrImage/DDSLoader.hpp</label>
        <link refid="_d_d_s_loader_8hpp_source"/>
      </node>
      <node id="9">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrTerrain/TerrainEditor.hpp</label>
        <link refid="_terrain_editor_8hpp_source"/>
      </node>
      <node id="10">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Private/SelectionToolController.hpp</label>
        <link refid="_selection_tool_controller_8hpp_source"/>
      </node>
      <node id="8">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/Editor/Public/BvrEditor/EditorToolController.hpp</label>
        <link refid="_editor_tool_controller_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_bvr_1_1_i_asset_loader" prot="public">Bvr::IAssetLoader</innerclass>
    <innerclass refid="struct_bvr_1_1_i_asset_loader_1_1_child_asset" prot="public">Bvr::IAssetLoader::ChildAsset</innerclass>
    <innerclass refid="struct_bvr_1_1_i_asset_loader_1_1_context" prot="public">Bvr::IAssetLoader::Context</innerclass>
    <innerclass refid="struct_bvr_1_1_i_asset_loader_1_1_import_context" prot="public">Bvr::IAssetLoader::ImportContext</innerclass>
    <innerclass refid="struct_bvr_1_1_s_decoded_path" prot="public">Bvr::SDecodedPath</innerclass>
    <innerclass refid="struct_bvr_1_1_s_asset_manager" prot="public">Bvr::SAssetManager</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta">Bvr::Meta</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_m_t">Bvr::MT</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;BvrAssetExport.hpp&gt;;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;IO/AssetSystem.hpp&gt;;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;Meta/Meta.hpp&gt;;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;IO/IFileSystem.hpp&gt;;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Meta<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Variant;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Type;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Meta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">MT<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TaskContext;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="struct_bvr_1_1_i_asset_loader" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BVRASSET_API<sp/><ref refid="struct_bvr_1_1_i_asset_loader" kindref="compound">IAssetLoader</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="struct_bvr_1_1_i_asset_loader_1a633f0d522205cc50e67935a49ea4e2a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_t_loading_result" kindref="compound">Result</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_t_loading_result" kindref="compound">TLoadingResult&lt;HandleUntyped&gt;</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">AssetT<sp/>=<sp/>std::nullptr_t;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="struct_bvr_1_1_i_asset_loader_1_1_child_asset" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_i_asset_loader_1_1_child_asset" kindref="compound">ChildAsset</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_i_asset_loader_1_1_child_asset" kindref="compound">ChildAsset</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type<sp/>==<sp/>rhs.type<sp/>&amp;&amp;<sp/>link<sp/>==<sp/>rhs.link;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>link;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="struct_bvr_1_1_i_asset_loader_1_1_context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_i_asset_loader_1_1_context" kindref="compound">Context</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TChildAssets<sp/>=<sp/>std::vector&lt;ChildAsset&gt;;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterChild(std::string_view<sp/>link,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childAssets.emplace_back(<ref refid="struct_bvr_1_1_i_asset_loader_1_1_child_asset" kindref="compound">ChildAsset</ref>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.link<sp/>=<sp/>std::format(</highlight><highlight class="stringliteral">&quot;{}={}&quot;</highlight><highlight class="normal">,<sp/>link,<sp/>index),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>TypeId&lt;T&gt;(),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLoadingSubObject()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!internalPath.empty();<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ExtractSubObjectPath()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>link{};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idxIt<sp/>=<sp/>internalPath.find_first_of(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idxIt<sp/>!=<sp/>std::string_view::npos<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idxIt<sp/>+<sp/>1<sp/>&lt;<sp/>internalPath.size())<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><sp/><sp/>=<sp/>std::atoi(internalPath.substr(idxIt<sp/>+<sp/>1).data());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>internalPath.substr(0,<sp/>idxIt);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair{link,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>GetParams()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pLoadParams<sp/>&amp;&amp;<sp/>pLoadParams-&gt;IsType&lt;T&gt;()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>&amp;pLoadParams-&gt;GetValue&lt;T&gt;()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stream<sp/>of<sp/>bytes<sp/>loaded<sp/>from<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bvr_1_1_util_1_1_t_span" kindref="compound">Span&lt;uint8 const&gt;</ref><sp/>bytes;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Original<sp/>path<sp/>of<sp/>the<sp/>file<sp/>in<sp/>case<sp/>it<sp/>is<sp/>needed<sp/>for<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>absolutePath;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subpath<sp/>inside<sp/>of<sp/>the<sp/>asset(i.e.<sp/>//project:some_gltf.gltf;Mesh=0<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>in<sp/>internal<sp/>path<sp/>being<sp/>Mesh=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>internalPath;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="struct_bvr_1_1_i_asset_loader_1_1_context_1ac4ed58202214c1c2f6d6cb8230f014fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TChildAssets<sp/><sp/><ref refid="struct_bvr_1_1_i_asset_loader_1_1_context_1ac4ed58202214c1c2f6d6cb8230f014fa" kindref="member">childAssets</ref>;</highlight></codeline>
<codeline lineno="80" refid="struct_bvr_1_1_i_asset_loader_1_1_context_1a5dbeae26a0964b5bea11274fae3aa313" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref>*<sp/><ref refid="struct_bvr_1_1_i_asset_loader_1_1_context_1a5dbeae26a0964b5bea11274fae3aa313" kindref="member">pLoadParams</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="struct_bvr_1_1_i_asset_loader_1_1_import_context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_i_asset_loader_1_1_import_context" kindref="compound">ImportContext</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AbsoluteSrcPath;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AbsoluteDstPath;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DstDir;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetName;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;class<sp/>CResourceMetaFile&gt;<sp/>MetaFile;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_i_asset_loader" kindref="compound">~IAssetLoader</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96" refid="struct_bvr_1_1_i_asset_loader_1ab795074eee1d82d933fb66fc0564a0f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_t_loading_result" kindref="compound">Result</ref><sp/><ref refid="struct_bvr_1_1_i_asset_loader_1ab795074eee1d82d933fb66fc0564a0f4" kindref="member">Load</ref>(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/><ref refid="struct_bvr_1_1_i_asset_loader_1_1_context" kindref="compound">IAssetLoader::Context</ref>&amp;<sp/>ctx)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="struct_bvr_1_1_i_asset_loader_1ab9eb9793947d65293edb7382d18f4bf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_i_asset_loader_1ab9eb9793947d65293edb7382d18f4bf1" kindref="member">GetSupportedFormats</ref>(std::vector&lt;std::string_view&gt;&amp;<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>pair<sp/>of<sp/>a<sp/>name<sp/>+<sp/>default<sp/>value<sp/>of<sp/>an<sp/>option<sp/>(variant<sp/>will<sp/>contain<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ImportSettingT<sp/>=<sp/>std::pair&lt;std::string,<sp/>Meta::Variant&gt;;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GetImportSettings(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref>&amp;<sp/><sp/><sp/><sp/><sp/>options,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>resourcePath<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Import(App&amp;<sp/>app,<sp/>ImportContext&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="struct_bvr_1_1_s_decoded_path" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_s_decoded_path" kindref="compound">SDecodedPath</ref><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_absolutePath;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_subresourcePath;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="struct_bvr_1_1_s_asset_manager" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BVRASSET_API<sp/><ref refid="struct_bvr_1_1_s_asset_manager" kindref="compound">SAssetManager</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Result<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_t_loading_result" kindref="compound">IAssetLoader::Result</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_s_asset_manager" kindref="compound">SAssetManager</ref>(std::unique_ptr&lt;IAssetIO&gt;<sp/>assetIO);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetAssetIO(std::unique_ptr&lt;IAssetIO&gt;<sp/>assetIO);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_i_asset_i_o" kindref="compound">IAssetIO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetAssetIO()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;IAssetLoader::ChildAsset&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>GetSubAssets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle_untyped" kindref="compound">HandleUntyped</ref>&amp;<sp/>hAsset)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterAssetType(<ref refid="class_bvr_1_1_t_assets" kindref="compound">Assets&lt;T&gt;</ref>&amp;<sp/>assets)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegisterAssetType(&amp;assets,<sp/>TypeId&lt;T&gt;(),<sp/>assets.m_pSendFn);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>HDL_NODISCARD<sp/>Result<sp/>Load(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/>std::string_view<sp/>path,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref>&amp;<sp/>loadParams<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>HDL_NODISCARD<sp/>Result<sp/>LoadAsync(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/>std::string_view<sp/>path,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_m_t_1_1_task_context" kindref="compound">MT::TaskContext</ref>*<sp/><sp/><sp/><sp/><sp/>pState<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Meta::Variant</ref>&amp;<sp/>loadParams<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>IsFromFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle_untyped" kindref="compound">HandleUntyped</ref>&amp;<sp/>hAsset)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>std::string</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryFindingAssetPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle_untyped" kindref="compound">HandleUntyped</ref>&amp;<sp/>hAsset)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetAssetPath(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle_untyped" kindref="compound">HandleUntyped</ref>&amp;<sp/>hAsset,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>path);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetAssetPathIfUnset(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle_untyped" kindref="compound">HandleUntyped</ref>&amp;<sp/>hAsset,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>path);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/><ref refid="struct_bvr_1_1_i_asset_loader" kindref="compound">IAssetLoader</ref>*<sp/>GetLoader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>extension);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/><ref refid="struct_bvr_1_1_i_asset_loader" kindref="compound">IAssetLoader</ref>*</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLoaderForAssetType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Meta::Type</ref>&amp;<sp/>assetType);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/><ref refid="struct_bvr_1_1_i_asset_loader" kindref="compound">IAssetLoader</ref>*</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLoaderForAssetType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref>&amp;<sp/>assetType);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/><ref refid="struct_bvr_1_1_type_info" kindref="compound">Bvr::TypeInfo</ref></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>GetAssetType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>extension)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssetT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AssetT&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterLoader()<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pLoader<sp/><sp/><sp/>=<sp/>std::make_unique&lt;T&gt;();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>assetType<sp/>=<sp/>TypeId&lt;AssetT&gt;();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegisterLoader(std::move(pLoader),<sp/>assetType);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>System<sp/>to<sp/>update<sp/>ref<sp/>counting<sp/>and<sp/>dispatch<sp/>free<sp/>events<sp/>to<sp/>asset<sp/>storages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>run<sp/>before<sp/>Assets&lt;&gt;::UpdateAssetStorage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeUnusedAssetsSystem(<ref refid="struct_bvr_1_1_s_asset_manager" kindref="compound">SAssetManager</ref>&amp;<sp/>self);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlushDeferredUploads(<ref refid="struct_bvr_1_1_s_asset_manager" kindref="compound">SAssetManager</ref>&amp;<sp/>mgr);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_s_decoded_path" kindref="compound">SDecodedPath</ref><sp/><sp/><sp/><sp/><sp/>ResolvePath(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/>std::string_view<sp/>fullPath);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/>ForHashing(<ref refid="struct_bvr_1_1_app" kindref="compound">App</ref>&amp;<sp/>app,<sp/>std::string_view<sp/>fullPath);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string_view<sp/>PrepareExtension(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>path);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAsset&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAssetLoaded(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle" kindref="compound">Handle&lt;TAsset&gt;</ref>&amp;<sp/>hAsset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsAssetLoaded(hAsset.Index());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAssetLoaded(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_handle_untyped" kindref="compound">HandleUntyped</ref>&amp;<sp/>hAsset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsAssetLoaded(hAsset.Index());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_i_assets" kindref="compound">IAssets</ref>*<sp/>FindAssetPool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref>&amp;<sp/>type)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterLoader(std::unique_ptr&lt;IAssetLoader&gt;&amp;&amp;<sp/>pLoader,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assetType);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterAssetType(<ref refid="struct_bvr_1_1_i_assets" kindref="compound">IAssets</ref>*<sp/>pAssets,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref>&amp;<sp/>type,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAssetRefCounter::SendFnT&amp;<sp/>channel);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAssetLoaded(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_asset_id" kindref="compound">AssetId</ref>&amp;<sp/>hAsset)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Impl&gt;<sp/>m_pImpl;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TypeHash<sp/>=<sp/>TypeHash&lt;T&gt;;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/IO/AssetManager.hpp"/>
  </compounddef>
</doxygen>
