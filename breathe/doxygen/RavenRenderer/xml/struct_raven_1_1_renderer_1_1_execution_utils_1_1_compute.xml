<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute" kind="struct" language="C++" prot="public">
    <compoundname>Raven::Renderer::ExecutionUtils::Compute</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1aa67077d122a7686e61bcb8170771be1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ExtraFn</type>
            <defval><ref refid="struct_raven_1_1_renderer_1_1_no_op" kindref="compound">NoOp</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Raven::Renderer::ExecutionUtils::Compute::Dispatch</definition>
        <argsstring>(CCommandList *pCmd, const CFGNode &amp;node, const CShader *pShader, const CFrameContext &amp;ctx, int3 dispatchSize, const ExtraFn &amp;extraFn={})</argsstring>
        <name>Dispatch</name>
        <param>
          <type>CCommandList *</type>
          <declname>pCmd</declname>
        </param>
        <param>
          <type>const <ref refid="class_raven_1_1_renderer_1_1_c_f_g_node" kindref="compound">CFGNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const CShader *</type>
          <declname>pShader</declname>
        </param>
        <param>
          <type>const <ref refid="class_raven_1_1_renderer_1_1_c_frame_context" kindref="compound">CFrameContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int3</type>
          <declname>dispatchSize</declname>
        </param>
        <param>
          <type>const ExtraFn &amp;</type>
          <declname>extraFn</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" line="154" column="21" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" bodystart="154" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1a8b611115637efc32a608cfe670bf6e01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ExtraFn</type>
            <defval><ref refid="struct_raven_1_1_renderer_1_1_no_op" kindref="compound">NoOp</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_raven_1_1_renderer_1_1_c_f_g_node" kindref="compound">CFGNode</ref> &amp;</type>
        <definition>static CFGNode&amp; Raven::Renderer::ExecutionUtils::Compute::Dispatch</definition>
        <argsstring>(CRenderPassScheduler &amp;scheduler, std::string_view name, const STechniqueDesc &amp;tech, const int3 dispatchSize, const ExtraFn &amp;extraFn={})</argsstring>
        <name>Dispatch</name>
        <param>
          <type><ref refid="class_raven_1_1_renderer_1_1_c_render_pass_scheduler" kindref="compound">CRenderPassScheduler</ref> &amp;</type>
          <declname>scheduler</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_renderer_1_1_s_technique_desc" kindref="compound">STechniqueDesc</ref> &amp;</type>
          <declname>tech</declname>
        </param>
        <param>
          <type>const int3</type>
          <declname>dispatchSize</declname>
        </param>
        <param>
          <type>const ExtraFn &amp;</type>
          <declname>extraFn</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" line="166" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" bodystart="166" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1a8a6cad8dc37da7629dad4e9ad49308ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ExtraFn</type>
            <defval><ref refid="struct_raven_1_1_renderer_1_1_no_op" kindref="compound">NoOp</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void Raven::Renderer::ExecutionUtils::Compute::DispatchIndirect</definition>
        <argsstring>(CCommandList *pCmd, const CFGNode &amp;node, const CShader *pShader, const CFrameContext &amp;ctx, uint64 indirectOffset, const ExtraFn &amp;extraFn={})</argsstring>
        <name>DispatchIndirect</name>
        <param>
          <type>CCommandList *</type>
          <declname>pCmd</declname>
        </param>
        <param>
          <type>const <ref refid="class_raven_1_1_renderer_1_1_c_f_g_node" kindref="compound">CFGNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const CShader *</type>
          <declname>pShader</declname>
        </param>
        <param>
          <type>const <ref refid="class_raven_1_1_renderer_1_1_c_frame_context" kindref="compound">CFrameContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>indirectOffset</declname>
        </param>
        <param>
          <type>const ExtraFn &amp;</type>
          <declname>extraFn</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" line="181" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" bodystart="181" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1a2e9c50526caa1679547aa40457ca5e1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ExtraFn</type>
            <defval><ref refid="struct_raven_1_1_renderer_1_1_no_op" kindref="compound">NoOp</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_raven_1_1_renderer_1_1_c_f_g_node" kindref="compound">CFGNode</ref> &amp;</type>
        <definition>static CFGNode&amp; Raven::Renderer::ExecutionUtils::Compute::DispatchIndirect</definition>
        <argsstring>(CRenderPassScheduler &amp;scheduler, std::string_view name, const STechniqueDesc &amp;tech, const uint64 indirectOffset, const ExtraFn &amp;extraFn={})</argsstring>
        <name>DispatchIndirect</name>
        <param>
          <type><ref refid="class_raven_1_1_renderer_1_1_c_render_pass_scheduler" kindref="compound">CRenderPassScheduler</ref> &amp;</type>
          <declname>scheduler</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="struct_raven_1_1_renderer_1_1_s_technique_desc" kindref="compound">STechniqueDesc</ref> &amp;</type>
          <declname>tech</declname>
        </param>
        <param>
          <type>const uint64</type>
          <declname>indirectOffset</declname>
        </param>
        <param>
          <type>const ExtraFn &amp;</type>
          <declname>extraFn</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" line="195" column="24" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" bodystart="195" bodyend="209"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" line="152" column="5" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenRenderer/Public/RavenRenderer/RenderPassScheduler.hpp" bodystart="152" bodyend="210"/>
    <listofallmembers>
      <member refid="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1aa67077d122a7686e61bcb8170771be1e" prot="public" virt="non-virtual"><scope>Raven::Renderer::ExecutionUtils::Compute</scope><name>Dispatch</name></member>
      <member refid="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1a8b611115637efc32a608cfe670bf6e01" prot="public" virt="non-virtual"><scope>Raven::Renderer::ExecutionUtils::Compute</scope><name>Dispatch</name></member>
      <member refid="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1a8a6cad8dc37da7629dad4e9ad49308ad" prot="public" virt="non-virtual"><scope>Raven::Renderer::ExecutionUtils::Compute</scope><name>DispatchIndirect</name></member>
      <member refid="struct_raven_1_1_renderer_1_1_execution_utils_1_1_compute_1a2e9c50526caa1679547aa40457ca5e1e" prot="public" virt="non-virtual"><scope>Raven::Renderer::ExecutionUtils::Compute</scope><name>DispatchIndirect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
