<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_raven_1_1_meta_1_1_argument" kind="class" language="C++" prot="public">
    <compoundname>Raven::Meta::Argument</compoundname>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_raven_1_1_meta_1_1_argument_1a1baaa392121ed9941bffe92109c3d50f" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_rvalue_reference&lt; T &gt;::value &amp;&amp;!IsVariant&lt; T &gt;::value, T &gt;</type>
        <definition>using Raven::Meta::Argument::ArgValueT =  std::enable_if_t&lt;!std::is_rvalue_reference&lt;T&gt;::value &amp;&amp; !IsVariant&lt;T&gt;::value, T&gt;</definition>
        <argsstring></argsstring>
        <name>ArgValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="20" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_raven_1_1_meta_1_1_argument_1ae6433c8aa457be92f4b2182ccf33313c" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_rvalue_reference&lt; T &gt;::value &amp;&amp;!IsVariant&lt; T &gt;::value, std::remove_reference_t&lt; T &gt; &gt;</type>
        <definition>using Raven::Meta::Argument::ArgRValueT =  std::enable_if_t&lt;std::is_rvalue_reference&lt;T&gt;::value &amp;&amp; !IsVariant&lt;T&gt;::value, std::remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ArgRValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="23" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_raven_1_1_meta_1_1_argument_1a6f63881cce8774640ac5f2ef00914ea3" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_rvalue_reference&lt; T &gt;::value &amp;&amp;IsVariant&lt; T &gt;::value, T &gt;</type>
        <definition>using Raven::Meta::Argument::VariantArgValueT =  std::enable_if_t&lt;!std::is_rvalue_reference&lt;T&gt;::value &amp;&amp; IsVariant&lt;T&gt;::value, T&gt;</definition>
        <argsstring></argsstring>
        <name>VariantArgValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="26" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_raven_1_1_meta_1_1_argument_1a093f3e33bbbb324cd244848e45614501" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_rvalue_reference&lt; T &gt;::value &amp;&amp;IsVariant&lt; T &gt;::value, std::remove_reference_t&lt; T &gt; &gt;</type>
        <definition>using Raven::Meta::Argument::VariantArgRValueT =  std::enable_if_t&lt;std::is_rvalue_reference&lt;T&gt;::value &amp;&amp; IsVariant&lt;T&gt;::value, std::remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VariantArgRValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="29" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_raven_1_1_meta_1_1_argument_1a8ae01b5f838d82f004682a1118d3cdf2" prot="private" static="no" mutable="no">
        <type>ptr_t</type>
        <definition>ptr_t Raven::Meta::Argument::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="98" column="7" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_meta_1_1_argument_1a0e4f4f35b924c3379985d8822be93d6a" prot="private" static="no" mutable="no">
        <type><ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Raven::Meta::Argument::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="99" column="6" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_raven_1_1_meta_1_1_argument_1ae5ddd7899e37ef6ba5c8ad2ffbbc69f6" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
        <definition>const Variant* Raven::Meta::Argument::m_pVariant</definition>
        <argsstring></argsstring>
        <name>m_pVariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="100" column="15" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1ae45b2f10d61f8fb0bb45d06935c107be" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Raven::Meta::Argument::Argument</definition>
        <argsstring>(const T &amp;obj) noexcept requires Argumentable&lt; T &gt;</argsstring>
        <name>Argument</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="32" column="8" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1ab295f088722dfbac745e12a667de13ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Raven::Meta::Argument::Argument</definition>
        <argsstring>(T &amp;obj) noexcept requires Argumentable&lt; T &gt;</argsstring>
        <name>Argument</name>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="39" column="8" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1a563b5fb8906940ef6dd3397083f9d2f4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Argument::Argument</definition>
        <argsstring>(const Argument &amp;obj) noexcept</argsstring>
        <name>Argument</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="45" column="8" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1abedf0c0c7e1d85c0b3d3a9171967b590" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Argument::Argument</definition>
        <argsstring>(Argument &amp;obj) noexcept</argsstring>
        <name>Argument</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="51" column="8" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1a6d84e8eec47bd896e2bc079ea0a56f32" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Raven::Meta::Argument::Argument</definition>
        <argsstring>(const Variant &amp;var) noexcept</argsstring>
        <name>Argument</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="57" column="8" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1ae72584432dcce07d4f9da38422ba85e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Raven::Meta::Argument::GetType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="64" column="7" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1a791a261f7fd68c859647f5554a97c621" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Raven::Meta::Argument::IsType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="67" column="7" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1a8f86e51613788e4a6aa9963c6f48665d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ArgValueT&lt; T &gt; &amp;</type>
        <definition>ArgValueT&lt;T&gt;&amp; Raven::Meta::Argument::GetValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="70" column="19" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1a3cbe4827fbca047160df877d37337e0f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ArgRValueT&lt; T &gt; &amp;&amp;</type>
        <definition>ArgRValueT&lt;T&gt;&amp;&amp; Raven::Meta::Argument::GetValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="77" column="20" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1af5180409e23e44034c3c0852eb9f00dd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>VariantArgValueT&lt; T &gt; &amp;</type>
        <definition>VariantArgValueT&lt;T&gt;&amp; Raven::Meta::Argument::GetValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="84" column="26" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_raven_1_1_meta_1_1_argument_1a64bf839105dab928c1b4f0ca352e5770" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>VariantArgRValueT&lt; T &gt; &amp;&amp;</type>
        <definition>VariantArgRValueT&lt;T&gt;&amp;&amp; Raven::Meta::Argument::GetValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="91" column="27" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="91" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="16" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="17" bodyend="101"/>
    <listofallmembers>
      <member refid="class_raven_1_1_meta_1_1_argument_1ae6433c8aa457be92f4b2182ccf33313c" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>ArgRValueT</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1ae45b2f10d61f8fb0bb45d06935c107be" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>Argument</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1ab295f088722dfbac745e12a667de13ac" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>Argument</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a563b5fb8906940ef6dd3397083f9d2f4" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>Argument</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1abedf0c0c7e1d85c0b3d3a9171967b590" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>Argument</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a6d84e8eec47bd896e2bc079ea0a56f32" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>Argument</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a1baaa392121ed9941bffe92109c3d50f" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>ArgValueT</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1ae72584432dcce07d4f9da38422ba85e4" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>GetType</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a8f86e51613788e4a6aa9963c6f48665d" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>GetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a3cbe4827fbca047160df877d37337e0f" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>GetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1af5180409e23e44034c3c0852eb9f00dd" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>GetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a64bf839105dab928c1b4f0ca352e5770" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>GetValue</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a791a261f7fd68c859647f5554a97c621" prot="public" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>IsType</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a8ae01b5f838d82f004682a1118d3cdf2" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>m_data</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1ae5ddd7899e37ef6ba5c8ad2ffbbc69f6" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>m_pVariant</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a0e4f4f35b924c3379985d8822be93d6a" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>m_type</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a093f3e33bbbb324cd244848e45614501" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>VariantArgRValueT</name></member>
      <member refid="class_raven_1_1_meta_1_1_argument_1a6f63881cce8774640ac5f2ef00914ea3" prot="private" virt="non-virtual"><scope>Raven::Meta::Argument</scope><name>VariantArgValueT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
