<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespace_raven_1_1_meta" kind="namespace" language="C++">
    <compoundname>Raven::Meta</compoundname>
    <innerclass refid="class_raven_1_1_meta_1_1_attribute" prot="public">Raven::Meta::Attribute</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_attribute_storage" prot="public">Raven::Meta::AttributeStorage</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_argument" prot="public">Raven::Meta::Argument</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_has_cmp_eq_impl" prot="public">Raven::Meta::HasCmpEqImpl</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_has_cmp_eq" prot="public">Raven::Meta::HasCmpEq</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_property_traits" prot="public">Raven::Meta::PropertyTraits</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_property_traits_3_01_t_07_b_1_1_5_08_4" prot="public">Raven::Meta::PropertyTraits&lt; T(B::*)&gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_is_property_of" prot="public">Raven::Meta::IsPropertyOf</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_type_list" prot="public">Raven::Meta::TypeList</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_as_type_list" prot="public">Raven::Meta::AsTypeList</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_as_type_list_3_01_type___list_3_01_ts_8_8_8_01_4_01_4" prot="public">Raven::Meta::AsTypeList&lt; Type_List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_type_list_element" prot="public">Raven::Meta::TypeListElement</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_type_list_element_3_01_s_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Raven::Meta::TypeListElement&lt; S, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_type_list_element_3_010_00_01_type_list_3_01_head_00_01_tail_8_8_8_01_4_01_4" prot="public">Raven::Meta::TypeListElement&lt; 0, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_size_of_list_impl" prot="public">Raven::Meta::MaxSizeOfListImpl</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_size_of_list_impl_3_01_t_01_4" prot="public">Raven::Meta::MaxSizeOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_size_of_list_impl_3_01_t0_00_01_t1_00_01_u_8_8_8_01_4" prot="public">Raven::Meta::MaxSizeOfListImpl&lt; T0, T1, U... &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_size_of_list_impl_3_01_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Raven::Meta::MaxSizeOfListImpl&lt; List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_align_of_list_impl" prot="public">Raven::Meta::MaxAlignOfListImpl</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_align_of_list_impl_3_01_t_01_4" prot="public">Raven::Meta::MaxAlignOfListImpl&lt; T &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_align_of_list_impl_3_01_t0_00_01_t1_00_01_u_8_8_8_01_4" prot="public">Raven::Meta::MaxAlignOfListImpl&lt; T0, T1, U... &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_max_align_of_list_impl_3_01_list_3_01_ts_8_8_8_01_4_01_4" prot="public">Raven::Meta::MaxAlignOfListImpl&lt; List&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="union_raven_1_1_meta_1_1___align_type" prot="public">Raven::Meta::_AlignType</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1___aligned" prot="public">Raven::Meta::_Aligned</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01_t_00_01true_01_4" prot="public">Raven::Meta::_Aligned&lt; Len, Align, T, true &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01double_00_01false_01_4" prot="public">Raven::Meta::_Aligned&lt; Len, Align, double, false &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01int_00_01false_01_4" prot="public">Raven::Meta::_Aligned&lt; Len, Align, int, false &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01short_00_01false_01_4" prot="public">Raven::Meta::_Aligned&lt; Len, Align, short, false &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1___aligned_3_01_len_00_01_align_00_01char_00_01false_01_4" prot="public">Raven::Meta::_Aligned&lt; Len, Align, char, false &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_aligned_storage" prot="public">Raven::Meta::AlignedStorage</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_instance" prot="public">Raven::Meta::Instance</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_visitor" prot="public">Raven::Meta::Visitor</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_void_variant_t" prot="public">Raven::Meta::VoidVariantT</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_argument_wrapper" prot="public">Raven::Meta::ArgumentWrapper</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_class_data" prot="public">Raven::Meta::ClassData</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_type_data" prot="public">Raven::Meta::TypeData</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_property_wrapper_base" prot="public">Raven::Meta::PropertyWrapperBase</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_member_property_wrapper" prot="public">Raven::Meta::MemberPropertyWrapper</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_property" prot="public">Raven::Meta::Property</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_registry_replayer" prot="public">Raven::Meta::RegistryReplayer</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_decay_except_array" prot="public">Raven::Meta::DecayExceptArray</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_variant" prot="public">Raven::Meta::Variant</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_aritmetic" prot="public">Raven::Meta::VariantPolicyAritmetic</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_small" prot="public">Raven::Meta::VariantPolicySmall</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_big" prot="public">Raven::Meta::VariantPolicyBig</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_raw_array_type" prot="public">Raven::Meta::RawArrayType</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_raw_array_type_impl" prot="public">Raven::Meta::RawArrayTypeImpl</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_raw_array_type_impl_3_01_t_0fsize_0e_4" prot="public">Raven::Meta::RawArrayTypeImpl&lt; T[size]&gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_raw_array_type_3_01_t_00_01typename_01std_1_1enable__if__t_3_01std_1_1e8a3845fbf7ab7902b1373e2aee491e7" prot="public">Raven::Meta::RawArrayType&lt; T, typename std::enable_if_t&lt; std::is_array_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_data_policy_base" prot="public">Raven::Meta::VariantDataPolicyBase</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_string" prot="public">Raven::Meta::VariantPolicyString</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_void" prot="public">Raven::Meta::VariantPolicyVoid</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_nullptr_t" prot="public">Raven::Meta::VariantPolicyNullptrT</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_variant_policy_empty" prot="public">Raven::Meta::VariantPolicyEmpty</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_count_args_impl" prot="public">Raven::Meta::CountArgsImpl</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_4_01_4" prot="public">Raven::Meta::CountArgsImpl&lt; FilterT, TypeList&lt;&gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_01_filter_t_00_01_tail_8_8_8_01_4_01_4" prot="public">Raven::Meta::CountArgsImpl&lt; FilterT, TypeList&lt; FilterT, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_count_args_impl_3_01_filter_t_00_01_type_list_3_01_other_00_01_tail_8_8_8_01_4_01_4" prot="public">Raven::Meta::CountArgsImpl&lt; FilterT, TypeList&lt; Other, Tail... &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_argument_extractor" prot="public">Raven::Meta::ArgumentExtractor</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_type" prot="public">Raven::Meta::Type</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_variant_sequential_view" prot="public">Raven::Meta::VariantSequentialView</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_variant_associative_view" prot="public">Raven::Meta::VariantAssociativeView</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_type_registry" prot="public">Raven::Meta::TypeRegistry</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_wrapper_binder" prot="public">Raven::Meta::WrapperBinder</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_wrapper_binder_3_01std_1_1reference__wrapper_3_01_t_01_4_01_4" prot="public">Raven::Meta::WrapperBinder&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_wrapper_binder_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">Raven::Meta::WrapperBinder&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_wrapper_binder_3_01std_1_1unique__ptr_3_01_t_01_4_01_4" prot="public">Raven::Meta::WrapperBinder&lt; std::unique_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_raven_1_1_meta_1_1_wrapper_binder_3_01std_1_1weak__ptr_3_01_t_01_4_01_4" prot="public">Raven::Meta::WrapperBinder&lt; std::weak_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="class_raven_1_1_meta_1_1_enum" prot="public">Raven::Meta::Enum</innerclass>
    <innernamespace refid="namespace_raven_1_1_meta_1_1_detail">Raven::Meta::Detail</innernamespace>
    <innernamespace refid="namespace_raven_1_1_meta_1_1_interface">Raven::Meta::Interface</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6e" prot="public" static="no" strong="yes">
        <type>TypeTraitVal</type>
        <name>TypeTraitsInfos</name>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6eab90ce872303feba1276016190c93fd8e" prot="public">
          <name>IsEmpty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6ea1a5acf64c04cc9860de0ebd9bbf175cc" prot="public">
          <name>IsClass</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6ead9631ec4533424aa46f8253d0ced130e" prot="public">
          <name>IsEnum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6ea7515d3a3055b2139844aa9e06fce46cf" prot="public">
          <name>IsArray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6ea19f24dd953415de0a5f45a41b2067669" prot="public">
          <name>IsPointer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6ea95964b0637d80f3e2d6a23745f15fbdc" prot="public">
          <name>IsArithmetic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6eaf455b17ec8e8c2ce0315df7c275a4930" prot="public">
          <name>IsSequentialContainer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6eabf9bb1af3b4c603c2585a40eac62b1a6" prot="public">
          <name>IsAssociativeContainer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_type_desc_8hpp_1a8a1505cc2d352440a14ead98a24d6a6eae93f994f01c537c4e2f7d8528c3eb5e9" prot="public">
          <name>Count</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="29" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099c" prot="public" static="no" strong="yes">
        <type></type>
        <name>EVariantPolicyOP</name>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca0e181f89f47654b86f3beb42f5cc08b8" prot="public">
          <name>Destroy</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099cacf00271107fced5ef15ebc057d09eb7d" prot="public">
          <name>IsValid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099caff24590464659ee8cdec688128c35f89" prot="public">
          <name>Clone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca8778f5cc5ee1685fb97ad92e33e63225" prot="public">
          <name>Swap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca6bf4bc98130395b9474498c5e921f062" prot="public">
          <name>GetValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca789469f913a23c20d6ca549a4de03d32" prot="public">
          <name>CreateWrappedValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca19b28d3ca39577cc844d542b6a7ff000" prot="public">
          <name>ExtractWrappedValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099cabe784e48d0174367297b636456c7bcf1" prot="public">
          <name>GetType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca29b22cf62c4f94e3a12de6424a5dca0a" prot="public">
          <name>GetRawPtr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca3f1d984495cbfacd1a9c7cfd91dfc8ce" prot="public">
          <name>CmpEq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca4cd9f3996d60790cd11c04f842ebc43c" prot="public">
          <name>Cast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099cac8be2b508837fe06cf1e422b300380ac" prot="public">
          <name>CreateSequentialView</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_variant_policy_8hpp_1abf2f0362a5469389a3d89ccaa0c0099ca79bafe3c870188a2d8e615cbd6e7593d" prot="public">
          <name>CreateAssociativeView</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" line="67" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" bodystart="67" bodyend="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_argument_8hpp_1abd7219e4ec8402bbbb67644750cdc1d5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref>, std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;</type>
        <definition>using Raven::Meta::IsVariant = typedef std::is_same&lt;Variant, std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>IsVariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="13" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a107d3ded0691a7f87f24e422e94b20b0" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Raven::Meta::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="7" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a408b06bcef05ea532d5c61cac6d0b9ea" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using Raven::Meta::ptrdiff_t = typedef std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>ptrdiff_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="8" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1aa8e4ef34d7806fbc21229b7e68f9fde1" prot="public" static="no">
        <type>std::uintptr_t</type>
        <definition>typedef std::uintptr_t Raven::Meta::ptr_t</definition>
        <argsstring></argsstring>
        <name>ptr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="9" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a132741bc65e660627a765c1001520c86" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_raven_1_1_meta_1_1_as_type_list" kindref="compound">AsTypeList</ref>&lt; T... &gt;::<ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Raven::Meta::AsTypeListT = typedef typename AsTypeList&lt;T...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>AsTypeListT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="94" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1aab51d1da58fdea1166d5d5910f4c92c6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_raven_1_1_meta_1_1_type_list_element" kindref="compound">TypeListElement</ref>&lt; S, List &gt;::<ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Raven::Meta::TypeListElementT = typedef typename TypeListElement&lt;S, List&gt;::Type</definition>
        <argsstring></argsstring>
        <name>TypeListElementT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="111" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1a6304c26bedb331e65b8601495756ddf8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_raven_1_1_meta_1_1_max_size_of_list_impl" kindref="compound">MaxSizeOfListImpl</ref>&lt; Ts... &gt;::Value &gt;</type>
        <definition>using Raven::Meta::MaxSizeOfList = typedef std::integral_constant&lt;std::size_t, MaxSizeOfListImpl&lt;Ts...&gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>MaxSizeOfList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="139" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_property_traits_8hpp_1afc5641a3b0c9b146e93a645db7dcddc9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_raven_1_1_meta_1_1_max_align_of_list_impl" kindref="compound">MaxAlignOfListImpl</ref>&lt; Ts... &gt;::Value &gt;</type>
        <definition>using Raven::Meta::MaxAlignOfList = typedef std::integral_constant&lt;std::size_t, MaxAlignOfListImpl&lt;Ts...&gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>MaxAlignOfList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="166" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_data_8hpp_1a63fa0e90007ec52e91f4d53b3d987551" prot="public" static="no">
        <type>AsTypeListT&lt; int, long int, float, double, unsigned int, unsigned long int, signed char, unsigned char, signed short int, unsigned short int, long int, unsigned long long int, long double, void * &gt;</type>
        <definition>using Raven::Meta::VariantBaseTypes = typedef AsTypeListT&lt;int, long int, float, double, unsigned int, unsigned long int, signed char, unsigned char, signed short int, unsigned short int, long int, unsigned long long int, long double, void*&gt;</definition>
        <argsstring></argsstring>
        <name>VariantBaseTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantData.hpp" line="10" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantData.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_data_8hpp_1a18fbb367a4f737fd76fe862307d4386d" prot="public" static="no">
        <type><ref refid="struct_raven_1_1_meta_1_1_aligned_storage" kindref="compound">AlignedStorage</ref>&lt; MaxSizeOfList&lt; VariantBaseTypes &gt;::value, MaxAlignOfList&lt; VariantBaseTypes &gt;::value &gt;::<ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Raven::Meta::VariantData = typedef AlignedStorage&lt;MaxSizeOfList&lt;VariantBaseTypes&gt;::value, MaxAlignOfList&lt;VariantBaseTypes&gt;::value&gt;::Type</definition>
        <argsstring></argsstring>
        <name>VariantData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantData.hpp" line="12" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantData.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1abd8485de03a63aa2e5fcd9c6628febcb" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Raven::Meta::TypeTraitVal = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>TypeTraitVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="28" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1a6cf18d0a54a7cc14c8cb2a910435546f" prot="public" static="no">
        <type>std::bitset&lt; static_cast&lt; std::size_t &gt;(TypeTraitsInfos::Count)&gt;</type>
        <definition>using Raven::Meta::TypeTraits = typedef std::bitset&lt;static_cast&lt;std::size_t&gt;(TypeTraitsInfos::Count)&gt;</definition>
        <argsstring></argsstring>
        <name>TypeTraits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="43" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_desc_8hpp_1a796d22a091122e0271dd866a070affe4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; std::is_same_v&lt; T, void &gt;, <ref refid="class_raven_1_1_meta_1_1_type_registry" kindref="compound">TypeRegistry</ref>, <ref refid="class_raven_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">TypeRegistry::Class_</ref>&lt; T &gt; &gt;</type>
        <definition>using Raven::Meta::BinderBase = typedef std::conditional_t&lt;std::is_same_v&lt;T, void&gt;, TypeRegistry, TypeRegistry::Class_&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BinderBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="318" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1a675e80a97e95215349154f3bc6094516" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_raven_1_1_meta_1_1_decay_except_array" kindref="compound">DecayExceptArray</ref>&lt; T &gt;::<ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Raven::Meta::DecayExceptArrayT = typedef typename DecayExceptArray&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>DecayExceptArrayT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="18" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_8hpp_1a382ac6c7d2fb83d040e78ce212a23649" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Decayed</type>
            <defval>DecayExceptArrayT&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_same_v&lt; Decayed, <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &gt;, Decayed &gt;</type>
        <definition>using Raven::Meta::DecayVariantT = typedef std::enable_if_t&lt;!std::is_same_v&lt;Decayed, Variant&gt;, Decayed&gt;</definition>
        <argsstring></argsstring>
        <name>DecayVariantT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="21" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1ad134b7dba7199cd18f8132cd8834e202" prot="public" static="no">
        <type>bool(*)(EVariantPolicyOP, const VariantData &amp;data, <ref refid="struct_raven_1_1_meta_1_1_argument_wrapper" kindref="compound">ArgumentWrapper</ref>)</type>
        <definition>using Raven::Meta::VariantPolicyFN = typedef bool(*)(EVariantPolicyOP, const VariantData&amp; data, ArgumentWrapper)</definition>
        <argsstring></argsstring>
        <name>VariantPolicyFN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" line="83" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a2ebbe45bd8e6f9098064d37ff2875a02" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>bCanPlace</declname>
            <defname>bCanPlace</defname>
            <defval>(sizeof(T) &lt;= sizeof(VariantData) &amp;&amp; (std::alignment_of_v&lt;T&gt; &lt;= std::alignment_of_v&lt;VariantData&gt;))</defval>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, bCanPlace &gt;</type>
        <definition>using Raven::Meta::CanPlaceInVariant = typedef std::integral_constant&lt;bool, bCanPlace&gt;</definition>
        <argsstring></argsstring>
        <name>CanPlaceInVariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" line="86" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a739af689c8726ea4c46d3fcf77652b41" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_raven_1_1_meta_1_1_raw_array_type" kindref="compound">RawArrayType</ref>&lt; T &gt;::<ref refid="class_raven_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>using Raven::Meta::RawArrayTypeT = typedef typename RawArrayType&lt;T&gt;::Type</definition>
        <argsstring></argsstring>
        <name>RawArrayTypeT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" line="107" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a12665719487728fb06a71fdd7db920cd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, std::is_array_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; char, RawArrayTypeT&lt; T &gt; &gt; &amp;&amp;(std::rank&lt; T &gt;()==1)&gt;</type>
        <definition>using Raven::Meta::Is1DCharArray = typedef std::integral_constant&lt;bool, std::is_array_v&lt;T&gt;&amp;&amp; std::is_same_v&lt;char, RawArrayTypeT&lt;T&gt; &gt; &amp;&amp; (std::rank&lt;T&gt;() == 1)&gt;</definition>
        <argsstring></argsstring>
        <name>Is1DCharArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" line="110" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_variant_policy_8hpp_1a14f7faf29318ea6cf46188a5fbed8421" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; std::is_same_v&lt; T, <ref refid="struct_raven_1_1_meta_1_1_void_variant_t" kindref="compound">VoidVariantT</ref> &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_void" kindref="compound">VariantPolicyVoid</ref>, std::conditional_t&lt; std::is_same_v&lt; T, std::nullptr_t &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_nullptr_t" kindref="compound">VariantPolicyNullptrT</ref>, std::conditional_t&lt; std::is_same_v&lt; T, std::string &gt;||Is1DCharArray&lt; T &gt;::value, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_string" kindref="compound">VariantPolicyString</ref>, std::conditional_t&lt; CanPlaceInVariant&lt; T &gt;::value, std::conditional_t&lt; std::is_arithmetic_v&lt; T &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_aritmetic" kindref="compound">VariantPolicyAritmetic</ref>&lt; T &gt;, std::conditional_t&lt; std::is_enum_v&lt; T &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_small" kindref="compound">VariantPolicySmall</ref>&lt; T, <ref refid="struct_raven_1_1_meta_1_1_detail_1_1_default_caster" kindref="compound">Detail::EnumCaster</ref>&lt; T &gt; &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_small" kindref="compound">VariantPolicySmall</ref>&lt; T &gt; &gt;&gt;, std::conditional_t&lt; std::is_enum_v&lt; T &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_big" kindref="compound">VariantPolicyBig</ref>&lt; T, <ref refid="struct_raven_1_1_meta_1_1_detail_1_1_default_caster" kindref="compound">Detail::EnumCaster</ref>&lt; T &gt; &gt;, <ref refid="struct_raven_1_1_meta_1_1_variant_policy_big" kindref="compound">VariantPolicyBig</ref>&lt; T &gt; &gt; &gt; &gt;&gt; &gt;</type>
        <definition>using Raven::Meta::VariantPolicy = typedef std::conditional_t&lt;std::is_same_v&lt;T, VoidVariantT&gt;, VariantPolicyVoid, std::conditional_t&lt;std::is_same_v&lt;T, std::nullptr_t&gt;, VariantPolicyNullptrT, std::conditional_t&lt;std::is_same_v&lt;T, std::string&gt; || Is1DCharArray&lt;T&gt;::value, VariantPolicyString, std::conditional_t&lt;CanPlaceInVariant&lt;T&gt;::value, std::conditional_t&lt;std::is_arithmetic_v&lt;T&gt;, VariantPolicyAritmetic&lt;T&gt;, std::conditional_t&lt;std::is_enum_v&lt;T&gt;, VariantPolicySmall&lt;T, Detail::EnumCaster&lt;T&gt; &gt;, VariantPolicySmall&lt;T&gt; &gt;&gt;, std::conditional_t&lt;std::is_enum_v&lt;T&gt;, VariantPolicyBig&lt;T, Detail::EnumCaster&lt;T&gt; &gt;, VariantPolicyBig&lt;T&gt; &gt; &gt; &gt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VariantPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" line="115" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/VariantPolicy.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_argument_extractor_8hpp_1a4c7c6e277fcf648deb999ff4ee7b0293" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FilterT</type>
          </param>
          <param>
            <type>typename ListT</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; std::size_t, <ref refid="struct_raven_1_1_meta_1_1_count_args_impl" kindref="compound">CountArgsImpl</ref>&lt; FilterT, AsTypeListT&lt; ListT &gt; &gt;::Value &gt;</type>
        <definition>using Raven::Meta::CountArgs = typedef std::integral_constant&lt;std::size_t, CountArgsImpl&lt;FilterT, AsTypeListT&lt;ListT&gt; &gt;::Value&gt;</definition>
        <argsstring></argsstring>
        <name>CountArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/ArgumentExtractor.hpp" line="29" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/ArgumentExtractor.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_argument_8hpp_1a3ca15add2c2df9cf9b1101ab8bc7f328" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept Raven::Meta::Argumentable</definition>
        <argsstring></argsstring>
        <name>Argumentable</name>
        <initializer>= !std::is_same_v&lt;T, <ref refid="class_raven_1_1_meta_1_1_argument" kindref="compound">Argument</ref>&gt; &amp;&amp; !IsVariant&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" line="15" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Argument.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_property_traits_8hpp_1a49b850ed321a91816df0d3d8f74ac5d1" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename Prop</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept Raven::Meta::IsMember</definition>
        <argsstring></argsstring>
        <name>IsMember</name>
        <initializer>= <ref refid="struct_raven_1_1_meta_1_1_is_property_of" kindref="compound">IsPropertyOf</ref>&lt;Base, Prop&gt;::Value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="71" column="22" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_property_traits_8hpp_1ade3ef2edf3b471d0dc0266348c929c9d" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t Raven::Meta::AlignmentOf_V</definition>
        <argsstring></argsstring>
        <name>AlignmentOf_V</name>
        <initializer>= alignof (T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="73" column="36" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_instance_8hpp_1ac28e13043cd076dbe7d53bd3035385c5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Tp</type>
            <defval>typename std::decay&lt;T&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept Raven::Meta::Instanceable</definition>
        <argsstring></argsstring>
        <name>Instanceable</name>
        <initializer>= !std::is_same_v&lt;<ref refid="class_raven_1_1_meta_1_1_instance" kindref="compound">Instance</ref>, Tp&gt; &amp;&amp; !std::is_same_v&lt;<ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref>, Tp&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Instance.hpp" line="10" column="9" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Instance.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_property_traits_8hpp_1a7a11cb228f114d9686a102a5f914a0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ptr_t</type>
        <definition>ptr_t Raven::Meta::AsPointer</definition>
        <argsstring>(const T &amp;obj)</argsstring>
        <name>AsPointer</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" line="225" column="7" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/PropertyTraits.hpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a9073a9de20332d6cf61ba7fea8908d92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_raven_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;TypeData&gt; Raven::Meta::MakeTypeData</definition>
        <argsstring>()</argsstring>
        <name>MakeTypeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="168" column="25" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="168" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a6c4d5689ae18c233a6d781078bb8b52f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>AttributeCount</declname>
            <defname>AttributeCount</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="struct_raven_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;PropertyWrapperBase&gt; Raven::Meta::MakePropertyData</definition>
        <argsstring>(std::string_view name, T prop, const std::array&lt; Attribute, AttributeCount &gt; &amp;attributes)</argsstring>
        <name>MakePropertyData</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="class_raven_1_1_meta_1_1_attribute" kindref="compound">Attribute</ref>, AttributeCount &gt; &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="270" column="25" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a633cfb1c6df7358f708d3b513dbccf33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Raven::Meta::AddProperty</definition>
        <argsstring>(TypeData *pData, Property prop)</argsstring>
        <name>AddProperty</name>
        <param>
          <type><ref refid="struct_raven_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pData</declname>
        </param>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="276" column="15" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="276" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_type_desc_8hpp_1a4fac2008ee56fd4ec15befff48c13a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Raven::Meta::ExtractAttributes</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ExtractAttributes</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" line="312" column="6" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/TypeDesc.hpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1a8f34656046280f5e3095f2547158acdd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* Raven::Meta::unsafe_variant_cast</definition>
        <argsstring>(Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="235" column="22" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1affdd1f8ce135afc5b40ee436ac551afc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* Raven::Meta::unsafe_variant_cast</definition>
        <argsstring>(const Variant *variant) noexcept</argsstring>
        <name>unsafe_variant_cast</name>
        <param>
          <type>const <ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> *</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="242" column="16" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1a61654a3f113a1f4951a41c910e86d63f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Raven::Meta::variant_cast</definition>
        <argsstring>(Variant &amp;variant)</argsstring>
        <name>variant_cast</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="247" column="22" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="_variant_8hpp_1abe9a55c832954f8a375bb92206bef618" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Raven::Meta::variant_cast</definition>
        <argsstring>(Variant &amp;&amp;variant)</argsstring>
        <name>variant_cast</name>
        <param>
          <type><ref refid="class_raven_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" line="257" column="22" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Variant.hpp" bodystart="257" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="_argument_extractor_8hpp_1a2ff5fcef518d7418ebe78a6b18926a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; Raven::Meta::ForwardToVector</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ForwardToVector</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/ArgumentExtractor.hpp" line="84" column="13" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/ArgumentExtractor.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="_argument_extractor_8hpp_1a5e36b1c047800788b254fe9cf5b6da8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, CountArgs&lt; T, <ref refid="struct_raven_1_1_meta_1_1_type_list" kindref="compound">TypeList</ref>&lt; Args... &gt; &gt;::value &gt;</type>
        <definition>std::array&lt;T, CountArgs&lt;T, TypeList&lt;Args...&gt; &gt;::value&gt; Raven::Meta::ForwardToArray</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ForwardToArray</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/ArgumentExtractor.hpp" line="90" column="13" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/ArgumentExtractor.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="_type_8hpp_1a79ad0e479d654d9a28c4df12fce57f88" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t Raven::Meta::OffsetOf</definition>
        <argsstring>(T member)</argsstring>
        <name>OffsetOf</name>
        <param>
          <type>T</type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" line="22" column="31" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Type.hpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="_enum_8hpp_1a75d1b3a2cff1794b83810586e151b54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_raven_1_1_meta_1_1_detail_1_1_enum_data" kindref="compound">Detail::EnumData</ref>&lt; EnumT &gt;</type>
        <definition>Detail::EnumData&lt;EnumT&gt; Raven::Meta::Value</definition>
        <argsstring>(std::string_view name, EnumT val)</argsstring>
        <name>Value</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>EnumT</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Enum.hpp" line="121" column="18" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Enum.hpp" bodystart="121" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenCommon/Meta/Attribute.hpp" line="6" column="1"/>
  </compounddef>
</doxygen>
