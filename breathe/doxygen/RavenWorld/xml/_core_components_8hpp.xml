<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_core_components_8hpp" kind="file" language="C++">
    <compoundname>CoreComponents.hpp</compoundname>
    <includes refid="_world_defs_8hpp" local="yes">WorldDefs.hpp</includes>
    <includes local="no">RavenMath/RavenMath.h</includes>
    <includedby refid="_default_components_8hpp" local="yes">/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp</includedby>
    <includedby refid="_world_8hpp" local="yes">/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/World.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>WorldDefs.hpp</label>
        <link refid="_world_defs_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/CoreComponents.hpp</label>
        <link refid="_core_components_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Utils/Assert.hpp</label>
      </node>
      <node id="3">
        <label>entt.hpp</label>
      </node>
      <node id="5">
        <label>RavenMath/RavenMath.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/Components.hpp</label>
        <link refid="_components_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/World.hpp</label>
        <link refid="_world_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/CoreComponents.hpp</label>
        <link refid="_core_components_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/WorldArchive.hpp</label>
        <link refid="_world_archive_8hpp_source"/>
      </node>
      <node id="2">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp</label>
        <link refid="_default_components_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/Entity.hpp</label>
        <link refid="_entity_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_raven_1_1_tags_1_1_no_serialise" prot="public">Raven::Tags::NoSerialise</innerclass>
    <innerclass refid="struct_raven_1_1_tags_1_1_no_copy" prot="public">Raven::Tags::NoCopy</innerclass>
    <innerclass refid="struct_t_component" prot="public">TComponent</innerclass>
    <innerclass refid="struct_s_parent_component" prot="public">SParentComponent</innerclass>
    <innerclass refid="struct_s_hierarchy_component" prot="public">SHierarchyComponent</innerclass>
    <innerclass refid="struct_s2_d_transform_tag" prot="public">S2DTransformTag</innerclass>
    <innerclass refid="struct_s_transform_component" prot="public">STransformComponent</innerclass>
    <innerclass refid="struct_world_space_transform" prot="public">WorldSpaceTransform</innerclass>
    <innernamespace refid="namespace_raven">Raven</innernamespace>
    <innernamespace refid="namespace_raven_1_1_tags">Raven::Tags</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_core_components_8hpp_1a7e2010a017a5c63c1098efb80aa8a5c6" prot="public" static="no">
        <type><ref refid="struct_t_component" kindref="compound">TComponent</ref>&lt; std::string &gt;</type>
        <definition>using SNameComponent =  TComponent&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>SNameComponent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/CoreComponents.hpp" line="34" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/CoreComponents.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WorldDefs.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RavenMath/RavenMath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Raven<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="namespace_raven_1_1_tags" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Tags<sp/>{</highlight></codeline>
<codeline lineno="10" refid="struct_raven_1_1_tags_1_1_no_serialise" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_raven_1_1_tags_1_1_no_serialise" kindref="compound">NoSerialise</ref><sp/>{};</highlight></codeline>
<codeline lineno="12" refid="struct_raven_1_1_tags_1_1_no_copy" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_raven_1_1_tags_1_1_no_copy" kindref="compound">NoCopy</ref><sp/>{};</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Raven</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="struct_t_component" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_component" kindref="compound">TComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_t_component" kindref="compound">Self</ref><sp/>=<sp/><ref refid="struct_t_component" kindref="compound">TComponent&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>member;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_component" kindref="compound">TComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_component" kindref="compound">TComponent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>m)<sp/>:<sp/>member{m}<sp/>{};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_component" kindref="compound">TComponent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_component" kindref="compound">TComponent&lt;T&gt;</ref>&amp;<sp/>rhs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_component" kindref="compound">TComponent&lt;T&gt;</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_component" kindref="compound">TComponent&lt;T&gt;</ref>&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>member;<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>member;<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator-&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;member;<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;member;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_t_component" kindref="compound">SNameComponent</ref><sp/>=<sp/><ref refid="struct_t_component" kindref="compound">TComponent&lt;std::string&gt;</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="struct_s_parent_component" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_parent_component" kindref="compound">SParentComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_raven_1_1_t_entity" kindref="compound">Raven::TEntity</ref><sp/>first{};</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="struct_s_hierarchy_component" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_hierarchy_component" kindref="compound">SHierarchyComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="struct_s_hierarchy_component_1a0cf41fc10e0103c8bb8db7dd10281cfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_raven_1_1_t_entity" kindref="compound">Raven::TEntity</ref><sp/><ref refid="struct_s_hierarchy_component_1a0cf41fc10e0103c8bb8db7dd10281cfd" kindref="member">parentId</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="48" refid="struct_s_hierarchy_component_1aca86912c6d1c2b67534c4ceecf1214ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_raven_1_1_t_entity" kindref="compound">Raven::TEntity</ref><sp/><ref refid="struct_s_hierarchy_component_1aca86912c6d1c2b67534c4ceecf1214ab" kindref="member">next</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="50" refid="struct_s_hierarchy_component_1a4f16866ecf28303cc6437a1b9ea6f5f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_raven_1_1_t_entity" kindref="compound">Raven::TEntity</ref><sp/><ref refid="struct_s_hierarchy_component_1a4f16866ecf28303cc6437a1b9ea6f5f9" kindref="member">prev</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="52" refid="struct_s_hierarchy_component_1af4720a560401cd8fa913d665277de472" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mat4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_hierarchy_component_1af4720a560401cd8fa913d665277de472" kindref="member">parentInvWorld</ref><sp/>=<sp/>mat4{1.f};</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct_s2_d_transform_tag" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s2_d_transform_tag" kindref="compound">S2DTransformTag</ref><sp/>{};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="struct_s_transform_component" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat4<sp/>trns)<sp/>{<sp/>Decompose(trns);<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>mat4<sp/><sp/><sp/>GetTransform()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="struct_s_transform_component_1a96cc8261a405aeb4f26254c56d922647" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/><ref refid="struct_s_transform_component_1a96cc8261a405aeb4f26254c56d922647" kindref="member">Up</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>glm::rotate(glm::normalize(m_rotation),<sp/>MathConstants::UpVec);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="struct_s_transform_component_1a469618c1e9df1290b13ba5647e3852e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/><ref refid="struct_s_transform_component_1a469618c1e9df1290b13ba5647e3852e9" kindref="member">Front</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>glm::rotate(glm::normalize(m_rotation),<sp/>MathConstants::FrontVec);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="struct_s_transform_component_1a52a1a833348027f217ec8a965580cd3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/><ref refid="struct_s_transform_component_1a52a1a833348027f217ec8a965580cd3e" kindref="member">Right</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>glm::rotate(glm::normalize(m_rotation),<sp/>MathConstants::RightVec);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/>RotateAround(float3<sp/>pivotPoint,<sp/>float3<sp/>axis,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>vec<sp/><sp/><sp/><sp/>=<sp/>m_translation;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat<sp/><sp/><sp/>rot<sp/><sp/><sp/><sp/>=<sp/>glm::angleAxis(angle,<sp/>axis);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>vec2<sp/><sp/><sp/>=<sp/>vec<sp/>-<sp/>pivotPoint;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pivotPoint<sp/>+<sp/>vec2;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_translation<sp/>=<sp/>vec;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>*=<sp/>glm::angleAxis(angle,<sp/>axis);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/>SetTransform(mat4<sp/>trns)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decompose(trns);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/><ref refid="struct_s_transform_component_1a96cc8261a405aeb4f26254c56d922647" kindref="member">Up</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>=<sp/>glm::rotation(MathConstants::UpVec,<sp/>val);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/><ref refid="struct_s_transform_component_1a469618c1e9df1290b13ba5647e3852e9" kindref="member">Front</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>=<sp/>glm::rotation(MathConstants::FrontVec,<sp/>val);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/><ref refid="struct_s_transform_component_1a52a1a833348027f217ec8a965580cd3e" kindref="member">Right</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>=<sp/>glm::rotation(MathConstants::RightVec,<sp/>val);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/>LookAt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3<sp/>wPos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3<sp/>up)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>=<sp/>glm::quatLookAtLH(glm::normalize(wPos<sp/>-<sp/>m_translation),</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::normalize(up));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/>Rotate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3&amp;<sp/>euler)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>quat<sp/>rhs{euler};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>*=<sp/>glm::inverse(m_rotation)<sp/>*<sp/>rhs<sp/>*<sp/>m_rotation;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>&amp;<sp/>Rotate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3<sp/>axis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation<sp/>*=<sp/>glm::angleAxis(angle,<sp/>axis);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>quat<sp/><sp/><sp/>m_rotation{};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/>m_translation{0.f};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/>m_scale{1.f};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Decompose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat4<sp/>m);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="struct_world_space_transform" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_world_space_transform" kindref="compound">WorldSpaceTransform</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref><sp/>{};</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/CoreComponents.hpp"/>
  </compounddef>
</doxygen>
