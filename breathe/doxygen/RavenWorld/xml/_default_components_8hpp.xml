<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_default_components_8hpp" kind="file" language="C++">
    <compoundname>DefaultComponents.hpp</compoundname>
    <includes refid="_entity_8hpp" local="yes">../RavenWorld/Entity.hpp</includes>
    <includes local="yes">IO/AssetSystem.hpp</includes>
    <includes refid="_core_components_8hpp" local="yes">CoreComponents.hpp</includes>
    <includes local="yes">Camera.h</includes>
    <includes local="no">Utils/uuid.hpp</includes>
    <includes local="yes">IO/Archive.hpp</includes>
    <includedby refid="_world_archive_8hpp" local="yes">/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/WorldArchive.hpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>IO/Archive.hpp</label>
      </node>
      <node id="5">
        <label>WorldDefs.hpp</label>
        <link refid="_world_defs_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Utils/uuid.hpp</label>
      </node>
      <node id="3">
        <label>World.hpp</label>
        <link refid="_world_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>CoreComponents.hpp</label>
        <link refid="_core_components_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Camera.h</label>
      </node>
      <node id="10">
        <label>IO/AssetSystem.hpp</label>
      </node>
      <node id="7">
        <label>Utils/Assert.hpp</label>
      </node>
      <node id="1">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp</label>
        <link refid="_default_components_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>entt.hpp</label>
      </node>
      <node id="2">
        <label>../RavenWorld/Entity.hpp</label>
        <link refid="_entity_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>IWorld.h</label>
      </node>
      <node id="8">
        <label>RavenMath/RavenMath.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/WorldArchive.hpp</label>
        <link refid="_world_archive_8hpp_source"/>
      </node>
      <node id="1">
        <label>/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp</label>
        <link refid="_default_components_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_component_list" prot="public">ComponentList</innerclass>
    <innerclass refid="struct_component_list_cat_3_4" prot="public">ComponentListCat&lt;&gt;</innerclass>
    <innerclass refid="struct_component_list_cat_3_01_component_list_3_01_components_8_8_8_01_4_00_01_component_list_3_03ab4d28b60da69c2dd363627519e185" prot="public">ComponentListCat&lt; ComponentList&lt; Components... &gt;, ComponentList&lt; OtherComponents... &gt;, ExtraLists... &gt;</innerclass>
    <innerclass refid="struct_component_list_cat_3_01_component_list_3_01_components_8_8_8_01_4_01_4" prot="public">ComponentListCat&lt; ComponentList&lt; Components... &gt; &gt;</innerclass>
    <innerclass refid="struct_s_mesh_component" prot="public">SMeshComponent</innerclass>
    <innerclass refid="struct_s_voxel_mesh_component" prot="public">SVoxelMeshComponent</innerclass>
    <innerclass refid="struct_s_voxel_model_component" prot="public">SVoxelModelComponent</innerclass>
    <innerclass refid="struct_s_point_light" prot="public">SPointLight</innerclass>
    <innerclass refid="struct_s_spot_light" prot="public">SSpotLight</innerclass>
    <innerclass refid="struct_s_impulse_component" prot="public">SImpulseComponent</innerclass>
    <innerclass refid="struct_s_camera_component" prot="public">SCameraComponent</innerclass>
    <innerclass refid="struct_s_prefab_meta_component" prot="public">SPrefabMetaComponent</innerclass>
    <innerclass refid="struct_s_tag_component" prot="public">STagComponent</innerclass>
    <innernamespace refid="namespace_raven">Raven</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_default_components_8hpp_1a74b41b90e49ea60d44bb45b5b07c9a7f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Components</declname>
            <defname>Components</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>&lt; Components... &gt;::Type</type>
        <definition>using ComponentListCatT =  typename ComponentListCat&lt;Components...&gt;::Type</definition>
        <argsstring></argsstring>
        <name>ComponentListCatT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" line="40" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_default_components_8hpp_1a33f469f5472eeccd94bc5cecdb725566" prot="public" static="no">
        <type><ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt; <ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>, <ref refid="struct_s2_d_transform_tag" kindref="compound">S2DTransformTag</ref>, <ref refid="struct_t_component" kindref="compound">SNameComponent</ref>, <ref refid="struct_s_point_light" kindref="compound">SPointLight</ref>, <ref refid="struct_s_spot_light" kindref="compound">SSpotLight</ref>, <ref refid="struct_s_voxel_mesh_component" kindref="compound">SVoxelMeshComponent</ref>, <ref refid="struct_s_voxel_model_component" kindref="compound">SVoxelModelComponent</ref>, <ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref>, <ref refid="struct_s_prefab_meta_component" kindref="compound">SPrefabMetaComponent</ref> &gt;</type>
        <definition>using CommonComponentList =  ComponentList&lt;STransformComponent, S2DTransformTag, SNameComponent, SPointLight, SSpotLight, SVoxelMeshComponent, SVoxelModelComponent, SCameraComponent, SPrefabMetaComponent&gt;</definition>
        <argsstring></argsstring>
        <name>CommonComponentList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" line="150" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_default_components_8hpp_1a15c7537bb88e93694e6d7e99facf0970" prot="public" static="no">
        <type>ComponentListCatT&lt; <ref refid="struct_component_list" kindref="compound">CommonComponentList</ref>, <ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt; <ref refid="struct_s_impulse_component" kindref="compound">SImpulseComponent</ref> &gt; &gt;</type>
        <definition>using DefaultCopyComponents =  ComponentListCatT&lt;CommonComponentList, ComponentList&lt;SImpulseComponent&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>DefaultCopyComponents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" line="154" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_default_components_8hpp_1a915099410685fd945a7bd0e6944751e6" prot="public" static="no">
        <type>ComponentListCatT&lt; <ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt; <ref refid="struct_s_tag_component" kindref="compound">STagComponent</ref> &gt;, <ref refid="struct_component_list" kindref="compound">CommonComponentList</ref> &gt;</type>
        <definition>using DefaultSerialisedComponents =  ComponentListCatT&lt;ComponentList&lt;STagComponent&gt;, CommonComponentList&gt;</definition>
        <argsstring></argsstring>
        <name>DefaultSerialisedComponents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" line="159" column="1" bodyfile="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../RavenWorld/Entity.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;IO/AssetSystem.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CoreComponents.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Camera.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Utils/uuid.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Raven<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SglTFModel;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CVoxelObject;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CVoxelMesh;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CMesh;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CSkin;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Raven</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="struct_component_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_component_list" kindref="compound">ComponentList</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_component_list" kindref="compound">Type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct_component_list" kindref="compound">ComponentList</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_component_list_cat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="struct_component_list_cat_3_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>&lt;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_component_list" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_component_list" kindref="compound">ComponentList&lt;&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>OtherComponents,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ExtraLists&gt;</highlight></codeline>
<codeline lineno="28" refid="struct_component_list_cat_3_01_component_list_3_01_components_8_8_8_01_4_00_01_component_list_3_03ab4d28b60da69c2dd363627519e185" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>&lt;<ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt;Components...&gt;,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt;OtherComponents...&gt;,<sp/>ExtraLists...&gt;<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>&lt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt;Components...,<sp/>OtherComponents...&gt;,<sp/>ExtraLists...&gt;::Type;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components&gt;</highlight></codeline>
<codeline lineno="35" refid="struct_component_list_cat_3_01_component_list_3_01_components_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>&lt;<ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt;Components...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_component_list" kindref="compound">Type</ref><sp/>=<sp/><ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt;Components...&gt;;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ComponentListCatT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_component_list_cat" kindref="compound">ComponentListCat</ref>&lt;Components...&gt;::Type;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="struct_s_mesh_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_mesh_component" kindref="compound">SMeshComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_mesh_component" kindref="compound">SMeshComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45" refid="struct_s_mesh_component_1a9e6b5731297dade6daf78662f7ea44d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_mesh_component_1a9e6b5731297dade6daf78662f7ea44d0" kindref="member">SMeshComponent</ref>(std::string_view<sp/>path);</highlight></codeline>
<codeline lineno="47" refid="struct_s_mesh_component_1a2e57e2cd41980543ca07a182b67469b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_mesh_component_1a2e57e2cd41980543ca07a182b67469b5" kindref="member">SMeshComponent</ref>(Raven::Handle&lt;Raven::CMesh&gt;<sp/>meshH)<sp/>:<sp/>hMesh{meshH}<sp/>{}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="struct_s_mesh_component" kindref="compound">SMeshComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>Raven::Handle&lt;Raven::CMesh&gt;<sp/>hMesh{};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;uint32,<sp/>Raven::HandleUntyped&gt;&gt;<sp/>MaterialMap;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="struct_s_voxel_mesh_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_voxel_mesh_component" kindref="compound">SVoxelMeshComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_voxel_mesh_component" kindref="compound">SVoxelMeshComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Init()<sp/>noexcept;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generate();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_radius<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>128.f;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Raven::CVoxelObject&gt;<sp/>m_pVoxelObject<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_renderSlot<sp/><sp/><sp/>=<sp/>~0u;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="struct_s_voxel_model_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_voxel_model_component" kindref="compound">SVoxelModelComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_voxel_model_component" kindref="compound">SVoxelModelComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_voxel_model_component" kindref="compound">SVoxelModelComponent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pPath)<sp/>:<sp/>path{pPath},<sp/>meshIdx{0}<sp/>{}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Init()<sp/>noexcept;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meshIdx;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Raven::Handle&lt;Raven::CVoxelMesh&gt;<sp/>m_pVoxelMesh<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_renderSlot<sp/>=<sp/>~0u;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="struct_s_point_light" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_point_light" kindref="compound">SPointLight</ref><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_point_light" kindref="compound">SPointLight</ref>()<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>SColourF<sp/>colour<sp/><sp/><sp/><sp/>=<sp/>SColourF(1.f,<sp/>1.f,<sp/>1.f);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>intensity<sp/>=<sp/>1000.f;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>range<sp/><sp/><sp/><sp/><sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="struct_s_spot_light" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_spot_light" kindref="compound">SSpotLight</ref><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_spot_light" kindref="compound">SSpotLight</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>SColourF<sp/>colour<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SColourF(1.f,<sp/>1.f,<sp/>1.f);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>intensity<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10000.f;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>range<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>innerConeAngle<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>outerConeAngle<sp/>=<sp/>MathConstants::pi<sp/>*<sp/>0.25f;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="struct_s_impulse_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_impulse_component" kindref="compound">SImpulseComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/>force{MathConstants::UpVec};</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="struct_s_camera_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref><sp/>Perspective(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yFov,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near<sp/>=<sp/>0.01f,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>far<sp/><sp/>=<sp/>1024.f)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yFov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>yFov,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.zFar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>far,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.zNear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>near,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.eProjectionType<sp/>=<sp/>EProjectionType::Perspective,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref><sp/>Ortho(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near<sp/>=<sp/>0.01f,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>far<sp/>=<sp/>1024.f)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.zFar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>far,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.zNear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>near,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.zoom<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>z,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.eProjectionType<sp/>=<sp/>EProjectionType::Orthographc,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aspectRatio<sp/><sp/><sp/><sp/><sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yFov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zFar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1024.f;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zNear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.01f;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zoom<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isActive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>EProjectionType<sp/>eProjectionType<sp/>=<sp/>EProjectionType::Perspective;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="struct_s_prefab_meta_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_prefab_meta_component" kindref="compound">SPrefabMetaComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_prefab_meta_component" kindref="compound">SPrefabMetaComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_prefab_meta_component" kindref="compound">SPrefabMetaComponent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>:<sp/>m_path{path}<sp/>{}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="struct_s_prefab_meta_component" kindref="compound">SPrefabMetaComponent</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_path;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="struct_s_tag_component" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_tag_component" kindref="compound">STagComponent</ref><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_tag_component" kindref="compound">STagComponent</ref>()<sp/>:<sp/>m_uuid{Raven::Utils::uuid::Generate()}<sp/>{}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_tag_component" kindref="compound">STagComponent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Raven::Utils::uuid&amp;<sp/>uuid)<sp/>:<sp/>m_uuid{uuid}<sp/>{}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Raven::Utils::uuid<sp/>m_uuid;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_component_list" kindref="compound">CommonComponentList</ref><sp/>=</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_component_list" kindref="compound">ComponentList</ref>&lt;<ref refid="struct_s_transform_component" kindref="compound">STransformComponent</ref>,<sp/><ref refid="struct_s2_d_transform_tag" kindref="compound">S2DTransformTag</ref>,<sp/><ref refid="struct_t_component" kindref="compound">SNameComponent</ref>,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_point_light" kindref="compound">SPointLight</ref>,<sp/><ref refid="struct_s_spot_light" kindref="compound">SSpotLight</ref>,<sp/><ref refid="struct_s_voxel_mesh_component" kindref="compound">SVoxelMeshComponent</ref>,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_voxel_model_component" kindref="compound">SVoxelModelComponent</ref>,<sp/><ref refid="struct_s_camera_component" kindref="compound">SCameraComponent</ref>,<sp/><ref refid="struct_s_prefab_meta_component" kindref="compound">SPrefabMetaComponent</ref>&gt;;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DefaultCopyComponents<sp/>=</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentListCatT&lt;CommonComponentList,<sp/>ComponentList&lt;SImpulseComponent&gt;&gt;;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>STagComponent<sp/>is<sp/>always<sp/>serialised<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>it<sp/>is<sp/>responsible<sp/>for<sp/>creating<sp/>entities<sp/>during<sp/>serialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>well<sp/>as<sp/>their<sp/>look<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DefaultSerialisedComponents<sp/>=</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentListCatT&lt;ComponentList&lt;STagComponent&gt;,<sp/><ref refid="struct_component_list" kindref="compound">CommonComponentList</ref>&gt;;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;IO/Archive.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Raven<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Archiver<sp/>Arch&gt;<sp/>Arch&amp;<sp/>operator&amp;(Arch&amp;<sp/>archiver,<sp/><ref refid="struct_s_tag_component" kindref="compound">STagComponent</ref>&amp;<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>archiver.StartObject();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>archiver.Member(</highlight><highlight class="stringliteral">&quot;m_uuid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(archiver.IsReader)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>archiver&amp;<sp/><sp/><sp/>tmp;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.m_uuid<sp/>=<sp/>Utils::uuid::FromString(tmp.c_str());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>o.m_uuid.ToString();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>archiver&amp;<sp/>s;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>archiver.EndObject();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>archiver;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Archiver<sp/>Arch&gt;<sp/>Arch&amp;<sp/>operator&amp;(Arch&amp;<sp/>archiver,<sp/><ref refid="struct_s_parent_component" kindref="compound">SParentComponent</ref>&amp;<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(TFalseType&lt;Arch&gt;::value,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SParentComponent<sp/>should<sp/>not<sp/>be<sp/>directly<sp/>serialised&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Raven</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/RavenEngine/RavenEngine/Raven/Code/RavenWorld/DefaultComponents.hpp"/>
  </compounddef>
</doxygen>
