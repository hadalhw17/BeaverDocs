<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1unordered__set_3_01_t731f68f4f41c364b23f42f6d82a9b939" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</compoundname>
    <basecompoundref refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set" prot="public" virt="non-virtual">Bvr::Meta::Detail::AssociativeContainerBinderBaseSet&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class Hash</type>
      </param>
      <param>
        <type>class KeyEq</type>
      </param>
      <param>
        <type>class Allocator</type>
      </param>
    </templateparamlist>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBaseSet&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1unordered__set_3_01_t731f68f4f41c364b23f42f6d82a9b939"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBase&lt; T &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBaseSet&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_3_01std_1_1unordered__set_3_01_t731f68f4f41c364b23f42f6d82a9b939"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderBase&lt; T &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinderImpl.hpp" line="115" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinderImpl.hpp" bodystart="118" bodyend="118"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a67278a70b8009074ee8db37dab6e80ed" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>Base</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a4baf705caad6f2ffe200e59500564b6b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>begin</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a67eed5db6c173c05d4cfe71666ee77ea" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>begin</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a1c8bdae04e08b953f2bf5bd01f4d9fd9" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>CIteratorT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a243e2a63a3b0ec6f7c22b0f609ed5fab" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>clear</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a70d58086d0f9c0820477e5e2feb2fa10" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>ContainerT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a9028ab602d05ff7f79df217e9f39f54f" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>empty</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a2f5a7c652368c0acc2b28782bad8ea64" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>end</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a6d768dd1dc0fe8454282cd7be949516a" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>end</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a2ae4ebef207d167518be94e6df6ae505" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>erase</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1aa475cabbc83d7901468f15413b18a2b3" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>find</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a1f001818401982862677c2e2420a6a38" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>find</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a331a67fa8f5f7d5ef4ba34a0781b2709" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>GetKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1a50f2db6c1cf0b949b67965a27072a952" prot="public" virt="non-virtual" ambiguityscope="Bvr::Meta::Detail::AssociativeContainerBinderBase::"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>GetKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a5efc4abba643c1fca09587fb00fd0555" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>InsertKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1aeb35afe065dbbaf6899422fea1cd6153" prot="public" virt="non-virtual" ambiguityscope="Bvr::Meta::Detail::AssociativeContainerBinderBase::"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>InsertKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a7fa76cff9e9824ec3afe32a7a70a30fa" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>IteratorT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a14879c3938452383aaacb928e60bbb15" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>KeyT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_1aabb638c8744f5e0ce5a9510eda41d528" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>size</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_base_set_1a9aac2751a089c3f678d3ef30f8b86d81" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinder&lt; std::unordered_set&lt; T, Hash, KeyEq, Allocator &gt; &gt;</scope><name>ValueT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
