<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_bvr_1_1_meta_1_1_type_registry" kind="class" language="C++" prot="public">
    <compoundname>Bvr::Meta::TypeRegistry</compoundname>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" prot="public">Bvr::Meta::TypeRegistry::Bind</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_enum___00_01_enum_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Enum_, EnumT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_meth___00_01_class_t_00_01_accessor_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Meth_, ClassT, AccessorT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_prop___00_01_class_t_00_01_accessor_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Prop_, ClassT, AccessorT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" prot="public">Bvr::Meta::TypeRegistry::Class_</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1aa95ee9fa4bc78dac2e965bb1d6baed71" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;TypeData&gt; &gt; Bvr::Meta::TypeRegistry::m_typeDataList</definition>
        <argsstring></argsstring>
        <name>m_typeDataList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="94" column="32" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1ae2d537bdb8c4c22322b11218ad8fca4e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;PropertyWrapperBase&gt; &gt; Bvr::Meta::TypeRegistry::m_propertyList</definition>
        <argsstring></argsstring>
        <name>m_propertyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="95" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1a1b19d31e4c24352857dd5a614485e91a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;MethodWrapperBase&gt; &gt; Bvr::Meta::TypeRegistry::m_methodList</definition>
        <argsstring></argsstring>
        <name>m_methodList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="96" column="23" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1a76ff009f9471c269c2ccf95ab3c37781" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;ConversionMethodBase&gt; &gt; Bvr::Meta::TypeRegistry::m_typeConversions</definition>
        <argsstring></argsstring>
        <name>m_typeConversions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="97" column="20" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1a44ef8038bcd9669412c82889afa8dc6a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;Detail::EnumWrapperBase&gt; &gt; Bvr::Meta::TypeRegistry::m_enumList</definition>
        <argsstring></argsstring>
        <name>m_enumList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="98" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1ac66a94804e32b77479254d3e89aec5d3" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; HashedString, <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>std::unordered_map&lt;HashedString, TypeData*&gt; Bvr::Meta::TypeRegistry::m_typeNameLookup</definition>
        <argsstring></argsstring>
        <name>m_typeNameLookup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="99" column="34" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1a40ad3e1e3a8fda51a28fb34d229d5d2e" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref>, <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>std::unordered_map&lt;TypeInfo, TypeData*&gt; Bvr::Meta::TypeRegistry::m_typeInfoLookup</definition>
        <argsstring></argsstring>
        <name>m_typeInfoLookup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="100" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_bvr_1_1_meta_1_1_type_registry_1a601c78a60b8ee9ca577121a25ff28dc4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Bind</definition>
        <argsstring></argsstring>
        <name>Bind</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">Bind</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="102" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_bvr_1_1_meta_1_1_type_registry_1a7410649bd4a495cbddc7cb9eafa76322" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RegistryReplayer</definition>
        <argsstring></argsstring>
        <name>RegistryReplayer</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_registry_replayer" kindref="compound">RegistryReplayer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="104" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a2594dd011b1dbc113ad9d61aa677e2a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">Bind</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_enum__" kindref="compound">Detail::Enum_</ref>, EnumT &gt;</type>
        <definition>static Bind&lt;Detail::Enum_, EnumT&gt; Bvr::Meta::TypeRegistry::Enum</definition>
        <argsstring>(std::string_view name)</argsstring>
        <name>Enum</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="class_bvr_1_1_meta_1_1_enum" kindref="compound">Enum</ref> registration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="57" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a1b2183c73e09b165ea51721c0f69dfa7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Bvr::Detail::Invokable</type>
            <declname>Meth</declname>
            <defname>Meth</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">Bind</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_meth__" kindref="compound">Detail::Meth_</ref>, <ref refid="struct_bvr_1_1_meta_1_1_global_scope" kindref="compound">GlobalScope</ref>, Meth &gt;</type>
        <definition>static Bind&lt;Detail::Meth_, GlobalScope, Meth&gt; Bvr::Meta::TypeRegistry::Function</definition>
        <argsstring>(Meth meth, std::string_view name)</argsstring>
        <name>Function</name>
        <param>
          <type>Meth</type>
          <declname>meth</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Global function registration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="64" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a5515b45520d72de3868a85cdf105cfc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API <ref refid="class_bvr_1_1_meta_1_1_type_registry" kindref="compound">TypeRegistry</ref> &amp;</type>
        <definition>static BVRMETA_API TypeRegistry&amp; Bvr::Meta::TypeRegistry::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="87" column="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a508c557b6ee66c8a27fc4e28da52690e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegistry::GetTypeByName</definition>
        <argsstring>(const std::string_view &amp;name) const</argsstring>
        <name>GetTypeByName</name>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="69" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1aa2d88e7615c01bb020a30a94b6433bb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegistry::GetTypeByHash</definition>
        <argsstring>(const uint64_t hash) const</argsstring>
        <name>GetTypeByHash</name>
        <param>
          <type>const uint64_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="71" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="371" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1aeaf531df2890cba38da66710bccd1990" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>BVRMETA_API TypeData * Bvr::Meta::TypeRegistry::GetTypeByTypeInfo</definition>
        <argsstring>(const TypeInfo &amp;info) const</argsstring>
        <name>GetTypeByTypeInfo</name>
        <param>
          <type>const <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="73" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a4557fe608f2a94bf7d986963ec5b4adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>BVRMETA_API TypeData* Bvr::Meta::TypeRegistry::RegisterTypeData</definition>
        <argsstring>(std::unique_ptr&lt; TypeData &gt; typeData)</argsstring>
        <name>RegisterTypeData</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt;</type>
          <declname>typeData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1aa7796fd120b0b23ea85d5fbf59efa785" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>bool Bvr::Meta::TypeRegistry::RegisterProperty</definition>
        <argsstring>(std::unique_ptr&lt; PropertyWrapperBase &gt; propertyData)</argsstring>
        <name>RegisterProperty</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt;</type>
          <declname>propertyData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="77" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="384" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a603415883060a973b5bdf28d04e29897" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>bool Bvr::Meta::TypeRegistry::RegisterMethod</definition>
        <argsstring>(std::unique_ptr&lt; MethodWrapperBase &gt; methData)</argsstring>
        <name>RegisterMethod</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> &gt;</type>
          <declname>methData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="79" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="399" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a2fe71b381bdd60d194952a7fe659af0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>bool Bvr::Meta::TypeRegistry::RegisterEnum</definition>
        <argsstring>(std::unique_ptr&lt; Detail::EnumWrapperBase &gt; enumData)</argsstring>
        <name>RegisterEnum</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> &gt;</type>
          <declname>enumData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="81" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="413" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a96e35215b2f09564aa7d43943e5183e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>bool Bvr::Meta::TypeRegistry::RegisterConversionMethod</definition>
        <argsstring>(std::unique_ptr&lt; ConversionMethodBase &gt; conv)</argsstring>
        <name>RegisterConversionMethod</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> &gt;</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="83" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="432" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a53fd46c8a1dc2b0ef50bd95c2a8cf497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API void</type>
        <definition>void Bvr::Meta::TypeRegistry::RegisterAlias</definition>
        <argsstring>(std::string_view name, TypeData *pType)</argsstring>
        <name>RegisterAlias</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="85" column="22" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="445" bodyend="448"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a65dfa2c23f12009d39d2f1fee7627a6f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
        <definition>Property Bvr::Meta::TypeRegistry::GetPropertyForType</definition>
        <argsstring>(const Type &amp;type, std::string_view propName)</argsstring>
        <name>GetPropertyForType</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="90" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="450" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1ac204f12dcb76d6907add878d33ffbf94" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_method" kindref="compound">Method</ref></type>
        <definition>Method Bvr::Meta::TypeRegistry::GetMethodForType</definition>
        <argsstring>(const Type &amp;type, std::string_view methName, const Type &amp;methType)</argsstring>
        <name>GetMethodForType</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>methName</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>methType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="91" column="12" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="460" bodyend="469"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="30" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="30" bodyend="105"/>
    <listofallmembers>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a601c78a60b8ee9ca577121a25ff28dc4" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Bind</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a2594dd011b1dbc113ad9d61aa677e2a9" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Enum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a1b2183c73e09b165ea51721c0f69dfa7" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Function</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a5515b45520d72de3868a85cdf105cfc5" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Get</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ac204f12dcb76d6907add878d33ffbf94" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetMethodForType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a65dfa2c23f12009d39d2f1fee7627a6f" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetPropertyForType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa2d88e7615c01bb020a30a94b6433bb8" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByHash</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a508c557b6ee66c8a27fc4e28da52690e" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByName</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aeaf531df2890cba38da66710bccd1990" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByTypeInfo</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a44ef8038bcd9669412c82889afa8dc6a" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_enumList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a1b19d31e4c24352857dd5a614485e91a" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_methodList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ae2d537bdb8c4c22322b11218ad8fca4e" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_propertyList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a76ff009f9471c269c2ccf95ab3c37781" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_typeConversions</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa95ee9fa4bc78dac2e965bb1d6baed71" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_typeDataList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a40ad3e1e3a8fda51a28fb34d229d5d2e" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_typeInfoLookup</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ac66a94804e32b77479254d3e89aec5d3" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_typeNameLookup</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a53fd46c8a1dc2b0ef50bd95c2a8cf497" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterAlias</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a96e35215b2f09564aa7d43943e5183e1" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a2fe71b381bdd60d194952a7fe659af0d" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a603415883060a973b5bdf28d04e29897" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa7796fd120b0b23ea85d5fbf59efa785" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a4557fe608f2a94bf7d986963ec5b4adf" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a7410649bd4a495cbddc7cb9eafa76322" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegistryReplayer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
