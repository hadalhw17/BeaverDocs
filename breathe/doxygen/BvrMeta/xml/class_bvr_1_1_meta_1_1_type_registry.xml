<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_bvr_1_1_meta_1_1_type_registry" kind="class" language="C++" prot="public">
    <compoundname>Bvr::Meta::TypeRegistry</compoundname>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" prot="public">Bvr::Meta::TypeRegistry::Bind</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_enum___00_01_enum_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Enum_, EnumT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind_3_01_detail_1_1_prop___00_01_class_t_00_01_accessor_t_01_4" prot="public">Bvr::Meta::TypeRegistry::Bind&lt; Detail::Prop_, ClassT, AccessorT &gt;</innerclass>
    <innerclass refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" prot="public">Bvr::Meta::TypeRegistry::Class_</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1aa95ee9fa4bc78dac2e965bb1d6baed71" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;TypeData&gt; &gt; Bvr::Meta::TypeRegistry::m_typeDataList</definition>
        <argsstring></argsstring>
        <name>m_typeDataList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="62" column="32" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1ae2d537bdb8c4c22322b11218ad8fca4e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;PropertyWrapperBase&gt; &gt; Bvr::Meta::TypeRegistry::m_propertyList</definition>
        <argsstring></argsstring>
        <name>m_propertyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="63" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1a44ef8038bcd9669412c82889afa8dc6a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;Detail::EnumWrapperBase&gt; &gt; Bvr::Meta::TypeRegistry::m_enumList</definition>
        <argsstring></argsstring>
        <name>m_enumList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="64" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_registry_1ae9419400e3a1ade987909a44896b568e" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string_view, <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>std::unordered_map&lt;std::string_view, TypeData*&gt; Bvr::Meta::TypeRegistry::m_typeNameLookup</definition>
        <argsstring></argsstring>
        <name>m_typeNameLookup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="65" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_bvr_1_1_meta_1_1_type_registry_1a601c78a60b8ee9ca577121a25ff28dc4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Bind</definition>
        <argsstring></argsstring>
        <name>Bind</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">Bind</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="67" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_bvr_1_1_meta_1_1_type_registry_1a7410649bd4a495cbddc7cb9eafa76322" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RegistryReplayer</definition>
        <argsstring></argsstring>
        <name>RegistryReplayer</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_registry_replayer" kindref="compound">RegistryReplayer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="69" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a23e2732d6cd82346a483c7de0741d142" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_bind" kindref="compound">TypeRegistry::Bind</ref>&lt; <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_enum__" kindref="compound">Detail::Enum_</ref>, EnumT &gt;</type>
        <definition>static TypeRegistry::Bind&lt;Detail::Enum_, EnumT&gt; Bvr::Meta::TypeRegistry::Enum</definition>
        <argsstring>(std::string_view name)</argsstring>
        <name>Enum</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="43" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a5515b45520d72de3868a85cdf105cfc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API <ref refid="class_bvr_1_1_meta_1_1_type_registry" kindref="compound">TypeRegistry</ref> &amp;</type>
        <definition>static BVRMETA_API TypeRegistry&amp; Bvr::Meta::TypeRegistry::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="56" column="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a6b1817f719d2bbda6f403889fbac7798" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegistry::GetTypeByName</definition>
        <argsstring>(std::string_view name) const</argsstring>
        <name>GetTypeByName</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="48" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a4557fe608f2a94bf7d986963ec5b4adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BVRMETA_API <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>BVRMETA_API TypeData* Bvr::Meta::TypeRegistry::RegisterTypeData</definition>
        <argsstring>(std::unique_ptr&lt; TypeData &gt; typeData)</argsstring>
        <name>RegisterTypeData</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> &gt;</type>
          <declname>typeData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="50" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1aa7796fd120b0b23ea85d5fbf59efa785" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>bool Bvr::Meta::TypeRegistry::RegisterProperty</definition>
        <argsstring>(std::unique_ptr&lt; PropertyWrapperBase &gt; propertyData)</argsstring>
        <name>RegisterProperty</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> &gt;</type>
          <declname>propertyData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="52" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="249" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a2fe71b381bdd60d194952a7fe659af0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BVRMETA_API bool</type>
        <definition>bool Bvr::Meta::TypeRegistry::RegisterEnum</definition>
        <argsstring>(std::unique_ptr&lt; Detail::EnumWrapperBase &gt; enumData)</argsstring>
        <name>RegisterEnum</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> &gt;</type>
          <declname>enumData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="54" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="265" bodyend="282"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_registry_1a65dfa2c23f12009d39d2f1fee7627a6f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
        <definition>Property Bvr::Meta::TypeRegistry::GetPropertyForType</definition>
        <argsstring>(const Type &amp;type, std::string_view propName)</argsstring>
        <name>GetPropertyForType</name>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="59" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp" bodystart="284" bodyend="292"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" line="23" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeReg.hpp" bodystart="23" bodyend="70"/>
    <listofallmembers>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a601c78a60b8ee9ca577121a25ff28dc4" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Bind</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a23e2732d6cd82346a483c7de0741d142" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Enum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a5515b45520d72de3868a85cdf105cfc5" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>Get</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a65dfa2c23f12009d39d2f1fee7627a6f" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetPropertyForType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a6b1817f719d2bbda6f403889fbac7798" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>GetTypeByName</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a44ef8038bcd9669412c82889afa8dc6a" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_enumList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ae2d537bdb8c4c22322b11218ad8fca4e" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_propertyList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa95ee9fa4bc78dac2e965bb1d6baed71" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_typeDataList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1ae9419400e3a1ade987909a44896b568e" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>m_typeNameLookup</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a2fe71b381bdd60d194952a7fe659af0d" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1aa7796fd120b0b23ea85d5fbf59efa785" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a4557fe608f2a94bf7d986963ec5b4adf" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegisterTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_registry_1a7410649bd4a495cbddc7cb9eafa76322" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegistry</scope><name>RegistryReplayer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
