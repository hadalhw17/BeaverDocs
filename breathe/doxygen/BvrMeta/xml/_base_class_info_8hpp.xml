<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_base_class_info_8hpp" kind="file" language="C++">
    <compoundname>BaseClassInfo.hpp</compoundname>
    <includes refid="_type_macros_8hpp" local="yes">TypeMacros.hpp</includes>
    <includedby refid="_type_desc_8hpp" local="yes">/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseClassInfo.hpp</label>
        <link refid="_base_class_info_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>PropertyTraits.hpp</label>
        <link refid="_property_traits_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TypeMacros.hpp</label>
        <link refid="_type_macros_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>std</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Argument.hpp</label>
        <link refid="_argument_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/ArgumentImpl.hpp</label>
        <link refid="_argument_impl_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseClassInfo.hpp</label>
        <link refid="_base_class_info_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Enum.hpp</label>
        <link refid="_enum_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Meta.hpp</label>
        <link refid="_meta_8hpp_source"/>
      </node>
      <node id="7">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Method.hpp</label>
        <link refid="_method_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Property.hpp</label>
        <link refid="_property_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp</label>
        <link refid="_type_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeDesc.hpp</label>
        <link refid="_type_desc_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp</label>
        <link refid="_type_impl_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Variant.hpp</label>
        <link refid="_variant_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/VariantImpl.hpp</label>
        <link refid="_variant_impl_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Visitor.hpp</label>
        <link refid="_visitor_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_base_class_info" prot="public">Bvr::Meta::Detail::BaseClassInfo</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_base_class_helper" prot="public">Bvr::Meta::Detail::TBaseClassHelper</innerclass>
    <innerclass refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_base_class_helper_3_01_t_01_4" prot="public">Bvr::Meta::Detail::TBaseClassHelper&lt; T &gt;</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta">Bvr::Meta</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_meta_1_1_detail">Bvr::Meta::Detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TypeMacros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr::Meta::Detail<sp/>{</highlight></codeline>
<codeline lineno="6" refid="struct_bvr_1_1_meta_1_1_detail_1_1_base_class_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_base_class_info" kindref="compound">BaseClassInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TCastFn<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref><sp/><sp/><sp/><sp/><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>TCastFn<sp/>CastFn;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TBaseClassList<sp/>=<sp/>std::vector&lt;BaseClassInfo&gt;;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_base_class_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_base_class_helper" kindref="compound">TBaseClassHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TBaseClassList<sp/>Get()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TBaseClassList{};<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_base_class_helper_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;HasBaseTypes<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_t_base_class_helper" kindref="compound">TBaseClassHelper</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TBaseClassList<sp/>Get()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TBaseClassList<sp/>list;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fill(list,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::TBaseTypes{});</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TBase&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Fill(TBaseClassList&amp;<sp/>list,<sp/><ref refid="struct_bvr_1_1_meta_1_1_type_list" kindref="compound">TypeList&lt;TBase...&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(list.emplace_back(Type::Get&lt;TBase&gt;(),<sp/>&amp;CastToBase&lt;TBase&gt;),<sp/>...);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>CastToBase(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">To*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from)));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::Meta::Detail</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseClassInfo.hpp"/>
  </compounddef>
</doxygen>
