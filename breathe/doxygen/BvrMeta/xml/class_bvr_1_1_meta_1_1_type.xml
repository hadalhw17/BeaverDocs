<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_bvr_1_1_meta_1_1_type" kind="class" language="C++" prot="public">
    <compoundname>Bvr::Meta::Type</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_1a5b4fe4c3f71ae87788c43986fbb0fcb6" prot="private" static="no" mutable="no">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData* Bvr::Meta::Type::m_pTypeData</definition>
        <argsstring></argsstring>
        <name>m_pTypeData</name>
        <qualifiedname>Bvr::Meta::Type::m_pTypeData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="106" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1ab00f6ceca178311a4c27b1cefeb82d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Bvr::Meta::Type::Type</definition>
        <argsstring>()</argsstring>
        <name>Type</name>
        <qualifiedname>Bvr::Meta::Type::Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="22" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aeafe4ba09b9a01532480eaab51ec2920" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Bvr::Meta::Type::Type</definition>
        <argsstring>(TypeData *pData)</argsstring>
        <name>Type</name>
        <qualifiedname>Bvr::Meta::Type::Type</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="23" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a8d8c2ba8147a3361007c7c8a70604882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Bvr::Meta::Type::~Type</definition>
        <argsstring>()=default</argsstring>
        <name>~Type</name>
        <qualifiedname>Bvr::Meta::Type::~Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a49bad3e726b195f233f65c2620504b86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Bvr::Meta::Type::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>Bvr::Meta::Type::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="26" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a38f4232667584b65cf000f2e401b9566" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::operator==</definition>
        <argsstring>(const Type &amp;lhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Bvr::Meta::Type::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="27" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a9c3bff9d02ad38b3cce173716cbdae84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::operator==</definition>
        <argsstring>(const TypeInfo &amp;lhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Bvr::Meta::Type::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="28" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1ac46cd43e2b1a29f42b094e79d5dfc420" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::Is</definition>
        <argsstring>() const</argsstring>
        <name>Is</name>
        <qualifiedname>Bvr::Meta::Type::Is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="31" column="44" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="7" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1adf0ed6b44c3aa19a340e33ca1888765d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsDerivedFrom</definition>
        <argsstring>() const</argsstring>
        <name>IsDerivedFrom</name>
        <qualifiedname>Bvr::Meta::Type::IsDerivedFrom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="33" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a0701655ef9085f1e1599c975fe37edbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsDerivedFrom</definition>
        <argsstring>(Type t) const</argsstring>
        <name>IsDerivedFrom</name>
        <qualifiedname>Bvr::Meta::Type::IsDerivedFrom</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="34" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a2782b864117b82427f7cb110f94bb7ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsBaseOf</definition>
        <argsstring>() const</argsstring>
        <name>IsBaseOf</name>
        <qualifiedname>Bvr::Meta::Type::IsBaseOf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="36" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aa06c29c64ddb4d683b63ea6c69b2bd30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsBaseOf</definition>
        <argsstring>(Type t) const</argsstring>
        <name>IsBaseOf</name>
        <qualifiedname>Bvr::Meta::Type::IsBaseOf</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="37" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a3eb52a97be0ebabed158a5725979c4e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <qualifiedname>Bvr::Meta::Type::IsValid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="39" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a30f495e48caefbfe8952d00e347d4ab3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsWrapper</definition>
        <argsstring>() const</argsstring>
        <name>IsWrapper</name>
        <qualifiedname>Bvr::Meta::Type::IsWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="40" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a6373ee08d575be6aa167cec39b5eb8dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>Bvr::Meta::Type::IsEmpty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="42" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a6a46aab4218bac543d4005ddbb83dc70" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsClass</definition>
        <argsstring>() const</argsstring>
        <name>IsClass</name>
        <qualifiedname>Bvr::Meta::Type::IsClass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="43" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aa998183c75e455b558e2640b6000d5f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsEnum</definition>
        <argsstring>() const</argsstring>
        <name>IsEnum</name>
        <qualifiedname>Bvr::Meta::Type::IsEnum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="44" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a2508f4aa732e9efec8065f0bf51e6f51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsArray</definition>
        <argsstring>() const</argsstring>
        <name>IsArray</name>
        <qualifiedname>Bvr::Meta::Type::IsArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="45" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aac2a46a6bc0427f968fcd8153539c99b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsPointer</definition>
        <argsstring>() const</argsstring>
        <name>IsPointer</name>
        <qualifiedname>Bvr::Meta::Type::IsPointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="46" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a8b35912506cc849fc711033c645bf82b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsArithmetic</definition>
        <argsstring>() const</argsstring>
        <name>IsArithmetic</name>
        <qualifiedname>Bvr::Meta::Type::IsArithmetic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="47" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a19941b69a79ab5f74e8d33c0b7cc2908" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsSequentialContainer</definition>
        <argsstring>() const</argsstring>
        <name>IsSequentialContainer</name>
        <qualifiedname>Bvr::Meta::Type::IsSequentialContainer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="48" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a9ca7b3acb7b97644a46edd249274543b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::IsAssociativeContainer</definition>
        <argsstring>() const</argsstring>
        <name>IsAssociativeContainer</name>
        <qualifiedname>Bvr::Meta::Type::IsAssociativeContainer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="49" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a462efc89082351587c2d60099fcbd585" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view Bvr::Meta::Type::GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <qualifiedname>Bvr::Meta::Type::GetName</qualifiedname>
        <briefdescription>
<para>Get either user specified or prettified platform name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="53" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a3d1bb5eed841bc03a77c48569f911ef5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view Bvr::Meta::Type::GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <qualifiedname>Bvr::Meta::Type::GetTypeName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the raw platform specific type name. Contains namespace information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="56" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a884c23a0828d269a8e3f00a72d2f7331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Bvr::Meta::Type::GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <qualifiedname>Bvr::Meta::Type::GetHash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="57" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a6ca4f615aaff182a33dd4e3541da9cb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Bvr::Meta::Type::SizeOf</definition>
        <argsstring>() const</argsstring>
        <name>SizeOf</name>
        <qualifiedname>Bvr::Meta::Type::SizeOf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="58" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a323b2d7623ae28133244ee6a417f9261" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref></type>
        <definition>TypeInfo Bvr::Meta::Type::GetTypeInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeInfo</name>
        <qualifiedname>Bvr::Meta::Type::GetTypeInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="59" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a503dcf4abbb91c17fd9f9ab03b042b1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>const TypeData * Bvr::Meta::Type::GetTypeData</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeData</name>
        <qualifiedname>Bvr::Meta::Type::GetTypeData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="60" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aba271e90355231b291f71dd2b3854a31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::Type::GetTypeData</definition>
        <argsstring>()</argsstring>
        <name>GetTypeData</name>
        <qualifiedname>Bvr::Meta::Type::GetTypeData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="61" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a2b9cf077df4fbd5c1b8107d282c285a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_enum" kindref="compound">Enum</ref></type>
        <definition>Enum Bvr::Meta::Type::GetEnum</definition>
        <argsstring>() const</argsstring>
        <name>GetEnum</name>
        <qualifiedname>Bvr::Meta::Type::GetEnum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="63" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aacd4728c4e638a802e72e9d8190d7978" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Bvr::Meta::Type::GetRawType</definition>
        <argsstring>() const</argsstring>
        <name>GetRawType</name>
        <qualifiedname>Bvr::Meta::Type::GetRawType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="64" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a6c84b85612d83d6ef6eefb0bd2437f23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Bvr::Meta::Type::GetWrappedType</definition>
        <argsstring>() const</argsstring>
        <name>GetWrappedType</name>
        <qualifiedname>Bvr::Meta::Type::GetWrappedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="65" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a49cc88c29f46da6424cd396db371c1df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Bvr::Meta::Type::GetPointerType</definition>
        <argsstring>() const</argsstring>
        <name>GetPointerType</name>
        <qualifiedname>Bvr::Meta::Type::GetPointerType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="66" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a2cd1aa77b101b4679cf2261f9a0a5756" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Span&lt; <ref refid="class_bvr_1_1_meta_1_1_property" kindref="compound">Property</ref> const &gt;</type>
        <definition>Span&lt; Property const  &gt; Bvr::Meta::Type::GetProperties</definition>
        <argsstring>() const</argsstring>
        <name>GetProperties</name>
        <qualifiedname>Bvr::Meta::Type::GetProperties</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="67" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a3b7dd5a852f72fdb07fcdc797f622972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Span&lt; <ref refid="class_bvr_1_1_meta_1_1_method" kindref="compound">Method</ref> const &gt;</type>
        <definition>Span&lt; Method const  &gt; Bvr::Meta::Type::GetMethods</definition>
        <argsstring>() const</argsstring>
        <name>GetMethods</name>
        <qualifiedname>Bvr::Meta::Type::GetMethods</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="68" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a1b474d164ef24f413be068c7879e4ecc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Span&lt; <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> const &gt;</type>
        <definition>Span&lt; Type const  &gt; Bvr::Meta::Type::GetTemplateArgs</definition>
        <argsstring>() const</argsstring>
        <name>GetTemplateArgs</name>
        <qualifiedname>Bvr::Meta::Type::GetTemplateArgs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="69" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a1291fb00aae4df24dfff5c82fa66a320" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Bvr::Meta::Type::CreateVariant</definition>
        <argsstring>(const void *copied=nullptr) const noexcept</argsstring>
        <name>CreateVariant</name>
        <qualifiedname>Bvr::Meta::Type::CreateVariant</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>copied</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="72" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a7bbd6d89883af6e3ba6ffaa0bc808a27" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::Type::CopyConstruct</definition>
        <argsstring>(const void *src, void *dst) const noexcept</argsstring>
        <name>CopyConstruct</name>
        <qualifiedname>Bvr::Meta::Type::CopyConstruct</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="74" column="17" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a3e8a578b6541d889911458686adea172" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
        <definition>ConversionMethodBase * Bvr::Meta::Type::GetConversionMethod</definition>
        <argsstring>(const Type &amp;dstType) const</argsstring>
        <name>GetConversionMethod</name>
        <qualifiedname>Bvr::Meta::Type::GetConversionMethod</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>dstType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a7fbb2f940cafaf942eb4d47ab2eec9ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
        <definition>Property Bvr::Meta::Type::GetProperty</definition>
        <argsstring>(std::string_view name) const</argsstring>
        <name>GetProperty</name>
        <qualifiedname>Bvr::Meta::Type::GetProperty</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="80" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1ae6df6acfb1f1eb04703c5257e56a8dc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Bvr::Meta::Type::GetPropertyValue</definition>
        <argsstring>(std::string_view name, const Instance &amp;obj) const</argsstring>
        <name>GetPropertyValue</name>
        <qualifiedname>Bvr::Meta::Type::GetPropertyValue</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="81" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a2567297cebab60087bbb540bd63decdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Bvr::Meta::Type::GetPropertyType</definition>
        <argsstring>(std::string_view name) const</argsstring>
        <name>GetPropertyType</name>
        <qualifiedname>Bvr::Meta::Type::GetPropertyType</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="82" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a9493195abab6e5c940dcdacf30146d57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::Type::SetPropertyValue</definition>
        <argsstring>(std::string_view name, const Instance &amp;obj, Argument val) const</argsstring>
        <name>SetPropertyValue</name>
        <qualifiedname>Bvr::Meta::Type::SetPropertyValue</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="83" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a59c43246c15dd6285efc6cf9a8e7db29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Bvr::Meta::Type::GetAttribute</definition>
        <argsstring>(const Variant &amp;key) const</argsstring>
        <name>GetAttribute</name>
        <qualifiedname>Bvr::Meta::Type::GetAttribute</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="86" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1ae123baf6e6786a35500d8ca60f4c2b16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Bvr::Meta::Type::Invoke</definition>
        <argsstring>(std::string_view name, const Instance &amp;self, Span&lt; Argument const &gt; args) const</argsstring>
        <name>Invoke</name>
        <qualifiedname>Bvr::Meta::Type::Invoke</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>Span&lt; <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> const &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="88" column="27"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a87b4a362754a4d59c06e9193b7588d21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>Variant Bvr::Meta::Type::Invoke</definition>
        <argsstring>(std::string_view name, const Instance &amp;self, std::initializer_list&lt; Argument &gt; args) const</argsstring>
        <name>Invoke</name>
        <qualifiedname>Bvr::Meta::Type::Invoke</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="90" column="27"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1adb2a0b73590c4b6c20762ac49668181c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::Type::CreateWrappedValue</definition>
        <argsstring>(const Argument &amp;arg, Variant &amp;out) const noexcept</argsstring>
        <name>CreateWrappedValue</name>
        <qualifiedname>Bvr::Meta::Type::CreateWrappedValue</qualifiedname>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a76e4cd76cc7f714da43b3c3c5bbc5a05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::Type::Visit</definition>
        <argsstring>(Visitor &amp;)</argsstring>
        <name>Visit</name>
        <qualifiedname>Bvr::Meta::Type::Visit</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_visitor" kindref="compound">Visitor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="103" column="10" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a66231aef6b0e71365c078b17c1268b02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Bvr::Meta::Type::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>Bvr::Meta::Type::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" line="67" column="25" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="67" bodyend="71"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1ab779aa70e4a7552bab10aa57f554e058" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>BVRMETA_LOCAL <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>static BVRMETA_LOCAL Type Bvr::Meta::Type::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>Bvr::Meta::Type::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="30" column="44"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1a2e0837ec1cc736473776617ac3862ea6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Bvr::Meta::Type::ConversionMethod</definition>
        <argsstring>(T meth)</argsstring>
        <name>ConversionMethod</name>
        <qualifiedname>Bvr::Meta::Type::ConversionMethod</qualifiedname>
        <param>
          <type>T</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="78" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeImpl.hpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1aaf24c15ce9c37396038c9accdb8c9bc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Bvr::Meta::Type::InvokeGlobalFunction</definition>
        <argsstring>(std::string_view name, Span&lt; Argument const &gt; args)</argsstring>
        <name>InvokeGlobalFunction</name>
        <qualifiedname>Bvr::Meta::Type::InvokeGlobalFunction</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Span&lt; <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> const &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="93" column="27"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1ac8c76f54b6476dcae53ab2b98cf665ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Bvr::Meta::Type::InvokeGlobalFunction</definition>
        <argsstring>(std::string_view name, std::initializer_list&lt; Argument &gt; args)</argsstring>
        <name>InvokeGlobalFunction</name>
        <qualifiedname>Bvr::Meta::Type::InvokeGlobalFunction</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; <ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="95" column="27"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_1adcac8dfd1b296e422b26159d0c6838b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * Bvr::Meta::Type::ExtractBasePointer</definition>
        <argsstring>(void *ptr, const Type &amp;srcType, const Type &amp;dstType)</argsstring>
        <name>ExtractBasePointer</name>
        <qualifiedname>Bvr::Meta::Type::ExtractBasePointer</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>const <ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>dstType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="98" column="26"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" line="20" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/Type.hpp" bodystart="20" bodyend="107"/>
    <listofallmembers>
      <member refid="class_bvr_1_1_meta_1_1_type_1a2e0837ec1cc736473776617ac3862ea6" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>ConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a7bbd6d89883af6e3ba6ffaa0bc808a27" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>CopyConstruct</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a1291fb00aae4df24dfff5c82fa66a320" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>CreateVariant</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1adb2a0b73590c4b6c20762ac49668181c" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>CreateWrappedValue</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1adcac8dfd1b296e422b26159d0c6838b1" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>ExtractBasePointer</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1ab779aa70e4a7552bab10aa57f554e058" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Get</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a66231aef6b0e71365c078b17c1268b02" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Get</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a59c43246c15dd6285efc6cf9a8e7db29" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetAttribute</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a3e8a578b6541d889911458686adea172" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a2b9cf077df4fbd5c1b8107d282c285a7" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a884c23a0828d269a8e3f00a72d2f7331" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetHash</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a3b7dd5a852f72fdb07fcdc797f622972" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetMethods</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a462efc89082351587c2d60099fcbd585" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetName</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a49cc88c29f46da6424cd396db371c1df" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetPointerType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a2cd1aa77b101b4679cf2261f9a0a5756" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetProperties</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a7fbb2f940cafaf942eb4d47ab2eec9ea" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a2567297cebab60087bbb540bd63decdb" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetPropertyType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1ae6df6acfb1f1eb04703c5257e56a8dc9" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetPropertyValue</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aacd4728c4e638a802e72e9d8190d7978" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetRawType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a1b474d164ef24f413be068c7879e4ecc" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetTemplateArgs</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a503dcf4abbb91c17fd9f9ab03b042b1f" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aba271e90355231b291f71dd2b3854a31" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a323b2d7623ae28133244ee6a417f9261" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetTypeInfo</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a3d1bb5eed841bc03a77c48569f911ef5" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetTypeName</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a6c84b85612d83d6ef6eefb0bd2437f23" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>GetWrappedType</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1ae123baf6e6786a35500d8ca60f4c2b16" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Invoke</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a87b4a362754a4d59c06e9193b7588d21" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Invoke</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aaf24c15ce9c37396038c9accdb8c9bc0" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>InvokeGlobalFunction</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1ac8c76f54b6476dcae53ab2b98cf665ac" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>InvokeGlobalFunction</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1ac46cd43e2b1a29f42b094e79d5dfc420" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Is</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a8b35912506cc849fc711033c645bf82b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsArithmetic</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a2508f4aa732e9efec8065f0bf51e6f51" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsArray</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a9ca7b3acb7b97644a46edd249274543b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsAssociativeContainer</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a2782b864117b82427f7cb110f94bb7ab" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsBaseOf</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aa06c29c64ddb4d683b63ea6c69b2bd30" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsBaseOf</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a6a46aab4218bac543d4005ddbb83dc70" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsClass</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1adf0ed6b44c3aa19a340e33ca1888765d" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsDerivedFrom</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a0701655ef9085f1e1599c975fe37edbe" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsDerivedFrom</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a6373ee08d575be6aa167cec39b5eb8dd" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsEmpty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aa998183c75e455b558e2640b6000d5f9" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aac2a46a6bc0427f968fcd8153539c99b" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsPointer</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a19941b69a79ab5f74e8d33c0b7cc2908" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsSequentialContainer</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a3eb52a97be0ebabed158a5725979c4e6" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsValid</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a30f495e48caefbfe8952d00e347d4ab3" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>IsWrapper</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a5b4fe4c3f71ae87788c43986fbb0fcb6" prot="private" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>m_pTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a49bad3e726b195f233f65c2620504b86" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>operator bool</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a38f4232667584b65cf000f2e401b9566" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>operator==</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a9c3bff9d02ad38b3cce173716cbdae84" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>operator==</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a9493195abab6e5c940dcdacf30146d57" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>SetPropertyValue</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a6ca4f615aaff182a33dd4e3541da9cb4" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>SizeOf</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1ab00f6ceca178311a4c27b1cefeb82d92" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Type</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1aeafe4ba09b9a01532480eaab51ec2920" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Type</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a76e4cd76cc7f714da43b3c3c5bbc5a05" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>Visit</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_1a8d8c2ba8147a3361007c7c8a70604882" prot="public" virt="non-virtual"><scope>Bvr::Meta::Type</scope><name>~Type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
