<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_base_type_refl_8hpp" kind="file" language="C++">
    <compoundname>BaseTypeRefl.hpp</compoundname>
    <includes refid="_meta_8hpp" local="yes">Meta/Meta.hpp</includes>
    <incdepgraph>
      <node id="13">
        <label>VariantData.hpp</label>
        <link refid="_variant_data_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Method.hpp</label>
        <link refid="_method_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>TypeInfo.hpp</label>
        <link refid="_type_info_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ConversionFunction.hpp</label>
        <link refid="_conversion_function_8hpp_source"/>
      </node>
      <node id="16">
        <label>TypeCasting.hpp</label>
        <link refid="_type_casting_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Attribute.hpp</label>
        <link refid="_attribute_8hpp_source"/>
      </node>
      <node id="11">
        <label>Type.hpp</label>
        <link refid="_type_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Utils/StringHash.hpp</label>
      </node>
      <node id="10">
        <label>Enum.hpp</label>
        <link refid="_enum_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>map</label>
      </node>
      <node id="2">
        <label>Meta/Meta.hpp</label>
        <link refid="_meta_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>VariantPolicy.hpp</label>
        <link refid="_variant_policy_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>unordered_set</label>
      </node>
      <node id="12">
        <label>Variant.hpp</label>
        <link refid="_variant_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>TypeReg.hpp</label>
        <link refid="_type_reg_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Argument.hpp</label>
        <link refid="_argument_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>WrapperBinder.hpp</label>
        <link refid="_wrapper_binder_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Meta/Utils.hpp</label>
        <link refid="_utils_8hpp_source"/>
      </node>
      <node id="18">
        <label>string_view</label>
      </node>
      <node id="5">
        <label>Meta/PropertyTraits.hpp</label>
        <link refid="_property_traits_8hpp_source"/>
      </node>
      <node id="32">
        <label>Property.hpp</label>
        <link refid="_property_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Instance.hpp</label>
        <link refid="_instance_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>bitset</label>
      </node>
      <node id="35">
        <label>LocalRegSink.hpp</label>
        <link refid="_local_reg_sink_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SequentialContainerBinder.hpp</label>
        <link refid="_sequential_container_binder_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>BvrCommon/Utils/FunctionTraits.hpp</label>
      </node>
      <node id="38">
        <label>vector</label>
      </node>
      <node id="39">
        <label>array</label>
      </node>
      <node id="36">
        <label>ArgumentExtractor.hpp</label>
        <link refid="_argument_extractor_8hpp_source"/>
      </node>
      <node id="21">
        <label>AssociativeContainerBinder.hpp</label>
        <link refid="_associative_container_binder_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>unordered_map</label>
      </node>
      <node id="4">
        <label>BvrMetaExport.hpp</label>
      </node>
      <node id="29">
        <label>ObjectMemoryStorage.hpp</label>
        <link refid="_object_memory_storage_8hpp_source"/>
      </node>
      <node id="17">
        <label>CastingHelpers.hpp</label>
        <link refid="_casting_helpers_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>set</label>
      </node>
      <node id="31">
        <label>span</label>
      </node>
      <node id="20">
        <label>IteratorBinder.hpp</label>
        <link refid="_iterator_binder_8hpp_source"/>
      </node>
      <node id="28">
        <label>memory</label>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp</label>
        <link refid="_base_type_refl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>TypeDesc.hpp</label>
        <link refid="_type_desc_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_base_type_refl_8hpp_1a75aa544d24eb742572489b23a68ba8de" prot="public" static="no">
        <name>REGISTER_BASE_TYPE</name>
        <param><defname>T</defname></param>
        <initializer>    { [[maybe_unused]] auto t = Bvr::Meta::Type::Get&lt;T&gt;(); }                   \
    { [[maybe_unused]] auto t = Bvr::Meta::Type::Get&lt;T*&gt;(); }                  \
    { [[maybe_unused]] auto t = Bvr::Meta::Type::Get&lt;const T*&gt;(); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="3" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_base_type_refl_8hpp_1aa37cee35d01142d60e88cb45ef474c9b" prot="public" static="no">
        <name>REGISTER_BASE_TYPE_N</name>
        <param><defname>T</defname></param>
        <param><defname>NAME</defname></param>
        <initializer>    <ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">Bvr::Meta::TypeRegistry::Class_</ref>&lt;T&gt;(NAME);                                  \
    <ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">Bvr::Meta::TypeRegistry::Class_</ref>&lt;T*&gt;(NAME &quot;*&quot;);                             \
    <ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">Bvr::Meta::TypeRegistry::Class_</ref>&lt;const T*&gt;(&quot;const &quot; NAME &quot;*&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="8" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_base_type_refl_8hpp_1a267d7d04abca953a09699595764ed023" prot="public" static="no" mutable="no">
        <type></type>
        <definition>BVR_REFLECTION_BLOCK</definition>
        <argsstring></argsstring>
        <name>BVR_REFLECTION_BLOCK</name>
        <initializer>{
    using namespace Bvr::Meta</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="16" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_base_type_refl_8hpp_1a4fb4941694da349723aae567544bec52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(Type)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="23" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ae7fff50cdae9cee8aa8cfd54335c5db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(Variant)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="24" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ace7c827962847a4d45c885526f9936be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(Instance)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="25" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="25" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a8696a54afe35475f16e31f7d9f81ad42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(std::reference_wrapper&lt; Variant &gt;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>std::reference_wrapper&lt; <ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="26" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a8d3dd7a90890ed2cd9384529bd2f93bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::int16_t, &quot;int16&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::int16_t</type>
        </param>
        <param>
          <type>&quot;int16&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="28" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ac95961d7b0cbcf77f268c0ce5279915d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::uint16_t, &quot;uint16&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::uint16_t</type>
        </param>
        <param>
          <type>&quot;uint16&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="29" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a4fd0f50d31ac0f8ec40170337fdcec58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::int32_t, &quot;int&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::int32_t</type>
        </param>
        <param>
          <type>&quot;int&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="30" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a13e9052520adba01d148ba8f4f11b9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::int64_t, &quot;int64&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::int64_t</type>
        </param>
        <param>
          <type>&quot;int64&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="31" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="31" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a2d4730d432118ec4991d370c5c0d849d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::uint32_t, &quot;uint&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::uint32_t</type>
        </param>
        <param>
          <type>&quot;uint&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="32" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1aa6f0aff52d63c380820938743aaa346d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::uint64_t, &quot;uint64&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::uint64_t</type>
        </param>
        <param>
          <type>&quot;uint64&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="33" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a62110859292a2f33376b8c395e1ce557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(bool, &quot;bool&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>&quot;bool&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="35" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a897da5a1888473cf8255d77b41ac79e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(float, &quot;float&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>&quot;float&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="36" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1aec9ca66693e6744b7b24d93a7dbd4b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(double, &quot;double&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>&quot;double&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="37" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a77ae503efb1487cad54507fe68e68455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(long double, &quot;long double&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>long double</type>
        </param>
        <param>
          <type>&quot;long double&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="38" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a593c061d38358d41d27ff9bb9744b54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(char, &quot;char&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>&quot;char&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="40" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a8fb43171ca94cee6551f3474a7552caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(wchar_t, &quot;wchar&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>wchar_t</type>
        </param>
        <param>
          <type>&quot;wchar&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="41" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a386ae3bce6a7a3886594841426295f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(signed char, &quot;schar&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>signed char</type>
        </param>
        <param>
          <type>&quot;schar&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="42" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a8ec9184a7d7311b3ea8b761626e77111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(unsigned char, &quot;uchar&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>unsigned char</type>
        </param>
        <param>
          <type>&quot;uchar&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="43" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a2ebbd449e7a44189cd97aba9f95dba17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(long int)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>long int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="45" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="45" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a43e1dd5be55692c1fc0b59ed57007edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(unsigned long int)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>unsigned long int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="46" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a705b8875a1fa2202b606a8986d3de2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(long long int)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>long long int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="47" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a80e72a61b706faf5ec2c4c6c3df922fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(unsigned long long int)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>unsigned long long int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="48" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ae4ec0cb10f8413ca2d43b16e0b53f982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE_N</definition>
        <argsstring>(std::string, &quot;string&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE_N</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>&quot;string&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="51" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="51" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ad45c53b2d3d04d9139b060612e8e0e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(std::vector&lt; int &gt;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="53" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a702b215dbf4bb897b54945ef32ceca1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(std::vector&lt; float &gt;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>std::vector&lt; float &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="54" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a293c8af5f14df2fc9f0efabc5689d007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(std::vector&lt; double &gt;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>std::vector&lt; double &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="55" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="55" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_BASE_TYPE(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>[[maybe_unused]]<sp/>auto<sp/>t<sp/>=<sp/>Bvr::Meta::Type::Get&lt;T&gt;();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>[[maybe_unused]]<sp/>auto<sp/>t<sp/>=<sp/>Bvr::Meta::Type::Get&lt;T*&gt;();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>[[maybe_unused]]<sp/>auto<sp/>t<sp/>=<sp/>Bvr::Meta::Type::Get&lt;const<sp/>T*&gt;();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_BASE_TYPE_N(T,<sp/>NAME)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Bvr::Meta::TypeRegistry::Class_&lt;T&gt;(NAME);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Bvr::Meta::TypeRegistry::Class_&lt;T*&gt;(NAME<sp/>&quot;*&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>Bvr::Meta::TypeRegistry::Class_&lt;const<sp/>T*&gt;(&quot;const<sp/>&quot;<sp/>NAME<sp/>&quot;*&quot;)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Meta/Meta.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">BVR_REFLECTION_BLOCK<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Bvr::Meta;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>Type::Get&lt;std::nullptr_t&gt;();<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Detail::MakeInvalidTypeData();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(<ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(<ref refid="class_bvr_1_1_meta_1_1_instance" kindref="compound">Instance</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(std::reference_wrapper&lt;Variant&gt;);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::int16_t,<sp/></highlight><highlight class="stringliteral">&quot;int16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::uint16_t,<sp/></highlight><highlight class="stringliteral">&quot;uint16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::int32_t,<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::int64_t,<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::uint32_t,<sp/></highlight><highlight class="stringliteral">&quot;uint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::uint64_t,<sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;long<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wchar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;schar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;uchar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE_N(std::string,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(std::vector&lt;int&gt;);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(std::vector&lt;float&gt;);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(std::vector&lt;double&gt;);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp"/>
  </compounddef>
</doxygen>
