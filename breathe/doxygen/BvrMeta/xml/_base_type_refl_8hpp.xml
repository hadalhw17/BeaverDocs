<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_base_type_refl_8hpp" kind="file" language="C++">
    <compoundname>BaseTypeRefl.hpp</compoundname>
    <includes refid="_meta_8hpp" local="yes">Meta/Meta.hpp</includes>
    <incdepgraph>
      <node id="13">
        <label>VariantData.hpp</label>
        <link refid="_variant_data_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Method.hpp</label>
        <link refid="_method_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>TypeInfo.hpp</label>
        <link refid="_type_info_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ConversionFunction.hpp</label>
        <link refid="_conversion_function_8hpp_source"/>
      </node>
      <node id="16">
        <label>TypeCasting.hpp</label>
        <link refid="_type_casting_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Attribute.hpp</label>
        <link refid="_attribute_8hpp_source"/>
      </node>
      <node id="11">
        <label>Type.hpp</label>
        <link refid="_type_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Utils/StringHash.hpp</label>
      </node>
      <node id="10">
        <label>Enum.hpp</label>
        <link refid="_enum_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>map</label>
      </node>
      <node id="2">
        <label>Meta/Meta.hpp</label>
        <link refid="_meta_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>VariantPolicy.hpp</label>
        <link refid="_variant_policy_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>unordered_set</label>
      </node>
      <node id="12">
        <label>Variant.hpp</label>
        <link refid="_variant_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>TypeReg.hpp</label>
        <link refid="_type_reg_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Argument.hpp</label>
        <link refid="_argument_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>WrapperBinder.hpp</label>
        <link refid="_wrapper_binder_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Meta/Utils.hpp</label>
        <link refid="_utils_8hpp_source"/>
      </node>
      <node id="18">
        <label>string_view</label>
      </node>
      <node id="5">
        <label>Meta/PropertyTraits.hpp</label>
        <link refid="_property_traits_8hpp_source"/>
      </node>
      <node id="32">
        <label>Property.hpp</label>
        <link refid="_property_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Instance.hpp</label>
        <link refid="_instance_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>bitset</label>
      </node>
      <node id="35">
        <label>LocalRegSink.hpp</label>
        <link refid="_local_reg_sink_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SequentialContainerBinder.hpp</label>
        <link refid="_sequential_container_binder_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>BvrCommon/Utils/FunctionTraits.hpp</label>
      </node>
      <node id="38">
        <label>vector</label>
      </node>
      <node id="36">
        <label>ArgumentExtractor.hpp</label>
        <link refid="_argument_extractor_8hpp_source"/>
      </node>
      <node id="21">
        <label>AssociativeContainerBinder.hpp</label>
        <link refid="_associative_container_binder_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>unordered_map</label>
      </node>
      <node id="4">
        <label>BvrMetaExport.hpp</label>
      </node>
      <node id="29">
        <label>ObjectMemoryStorage.hpp</label>
        <link refid="_object_memory_storage_8hpp_source"/>
      </node>
      <node id="17">
        <label>CastingHelpers.hpp</label>
        <link refid="_casting_helpers_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>set</label>
      </node>
      <node id="31">
        <label>span</label>
      </node>
      <node id="20">
        <label>IteratorBinder.hpp</label>
        <link refid="_iterator_binder_8hpp_source"/>
      </node>
      <node id="28">
        <label>memory</label>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp</label>
        <link refid="_base_type_refl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>TypeDesc.hpp</label>
        <link refid="_type_desc_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_base_type_refl_8hpp_1ae66dc24c4975af1d9fc14f8ec607fae8" prot="public" static="no">
        <name>REGISTER_BASE_TYPE</name>
        <param><defname>T</defname></param>
        <param><defname>NAME</defname></param>
        <initializer><ref refid="class_bvr_1_1_meta_1_1_type_registry_1_1_class__" kindref="compound">Bvr::Meta::TypeRegistry::Class_</ref>&lt;T&gt;(NAME)</initializer>
        <briefdescription>
<para>This file needs to be inluded only once! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="4" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_base_type_refl_8hpp_1a267d7d04abca953a09699595764ed023" prot="public" static="no" mutable="no">
        <type></type>
        <definition>BVR_REFLECTION_BLOCK</definition>
        <argsstring></argsstring>
        <name>BVR_REFLECTION_BLOCK</name>
        <initializer>{
    REGISTER_BASE_TYPE(int32, &quot;int&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="8" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_base_type_refl_8hpp_1a9abd0674183e9ef628ce96be6c9adc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(int64, &quot;int64&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>int64</type>
        </param>
        <param>
          <type>&quot;int64&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="10" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="10" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a3fa8abaf8fd09fe6afb291173523294c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(uint32, &quot;uint&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>uint32</type>
        </param>
        <param>
          <type>&quot;uint&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="11" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ad5947aa8e10c07150aa7ad191b9f7510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(uint64, &quot;uint64&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>uint64</type>
        </param>
        <param>
          <type>&quot;uint64&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="12" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ac6497210bea812d441b3e6ab54a4e8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(bool, &quot;bool&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>&quot;bool&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="13" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="13" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a7fadfc4552738aa629f51e892a6d82c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(float, &quot;float&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>&quot;float&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="14" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="14" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a3ce4241e2079570fff801fa61dcd537b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(double, &quot;double&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>&quot;double&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="15" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1aaf045f1b1cbfbad502948bcc49790b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(long double, &quot;long double&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>long double</type>
        </param>
        <param>
          <type>&quot;long double&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="16" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="16" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1aa21653e03c26c2ad0d6034dd47b47906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(signed char, &quot;char&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>signed char</type>
        </param>
        <param>
          <type>&quot;char&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="17" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="17" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ade0ac1cfc96def4e9ba872e011c426f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(unsigned char, &quot;uchar&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>unsigned char</type>
        </param>
        <param>
          <type>&quot;uchar&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="18" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="18" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1a6b2140b5b0de56acd565cc7d65d5eb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(std::string, &quot;string&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>&quot;string&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="19" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="19" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_base_type_refl_8hpp_1ac91f47576175e214d51e41018d86c281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_BASE_TYPE</definition>
        <argsstring>(Bvr::Meta::Type, &quot;Type&quot;)</argsstring>
        <name>REGISTER_BASE_TYPE</name>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Bvr::Meta::Type</ref></type>
        </param>
        <param>
          <type>&quot;Type&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" line="20" column="5" declfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp" declline="20" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_BASE_TYPE(T,<sp/>NAME)<sp/>Bvr::Meta::TypeRegistry::Class_&lt;T&gt;(NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Meta/Meta.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">BVR_REFLECTION_BLOCK<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(int32,<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(int64,<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(uint32,<sp/></highlight><highlight class="stringliteral">&quot;uint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(uint64,<sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;long<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;uchar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(std::string,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>REGISTER_BASE_TYPE(<ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Bvr::Meta::Type</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>REGISTER_BASE_TYPE</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/BaseTypeRefl.hpp"/>
  </compounddef>
</doxygen>
