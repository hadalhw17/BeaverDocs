<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper" kind="struct" language="C++" prot="public">
    <compoundname>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IteratorBinderBase&lt; std::conditional_t&lt; std::is_const&lt; ConstT &gt;::value, typename AssociativeContainerBinder&lt; T &gt;::CIteratorT, typename AssociativeContainerBinder&lt; T &gt;::IteratorT &gt; &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename ConstT</type>
      </param>
      <param>
        <type>typename Tp</type>
        <defval>std::conditional_t&lt;                  std::is_const&lt;ConstT&gt;::value,                  typename <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt;T&gt;::CIteratorT,                  typename <ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt;T&gt;::IteratorT&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1aa52cbfe57f9a12498b2e28d3b73e276d" prot="public" static="no">
        <type><ref refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder" kindref="compound">AssociativeContainerBinder</ref>&lt; T &gt;</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::Base =  AssociativeContainerBinder&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="136" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a809bf4290585940793cb31757a19024f" prot="public" static="no">
        <type>T</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::ContainerT =  T</definition>
        <argsstring></argsstring>
        <name>ContainerT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="137" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ae20a4c24a16e2da9b17c852d7f8eeeb5" prot="public" static="no">
        <type>typename Base::ValueT</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::ValueT =  typename Base::ValueT</definition>
        <argsstring></argsstring>
        <name>ValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="138" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1acd05fe16358839bdf245aabf0e35807e" prot="public" static="no">
        <type>typename Base::KeyT</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::KeyT =  typename Base::KeyT</definition>
        <argsstring></argsstring>
        <name>KeyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="139" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4811e3a332f3a2f0038598640e352ed4" prot="public" static="no">
        <type>typename Base::IteratorT</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::IteratorT =  typename Base::IteratorT</definition>
        <argsstring></argsstring>
        <name>IteratorT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="140" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ab2675ef4176b928f92f1804ef417641c" prot="public" static="no">
        <type>typename Base::CIteratorT</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::CIteratorT =  typename Base::CIteratorT</definition>
        <argsstring></argsstring>
        <name>CIteratorT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="141" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a07fc278f5c525c80c41629c9aee29b67" prot="public" static="no">
        <type>IteratorBinderBase&lt; Tp &gt;</type>
        <definition>using Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::IteratorBinderT =  IteratorBinderBase&lt;Tp&gt;</definition>
        <argsstring></argsstring>
        <name>IteratorBinderT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="142" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ad490712e9dd5cbbd35e9a111c876577d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ConstT &amp;</type>
        <definition>static ConstT&amp; Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetContainer</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>GetContainer</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="144" column="23" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1aedefa63af35b2711d88c4855e1acc3bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::empty</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>empty</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="148" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a56b7812d1b227ff7a6758003fc207aca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::clear</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>clear</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="152" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a562662d4b33071336419cf60c202aad0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::begin</definition>
        <argsstring>(void *pContainer, IteratorData &amp;it)</argsstring>
        <name>begin</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="156" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a246320760b551c8f69078507d9599fa4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::end</definition>
        <argsstring>(void *pContainer, IteratorData &amp;it)</argsstring>
        <name>end</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="160" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a958c39a9eb6ce4cf6628a9b04b247440" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::size</definition>
        <argsstring>(void *pContainer)</argsstring>
        <name>size</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="164" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1aeba756b83bae542f685303fccf31136f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::erase</definition>
        <argsstring>(void *pContainer, Argument &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="168" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a2a68b04c651447ff909264b1bf160f80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetKey</definition>
        <argsstring>(IteratorData &amp;posIt)</argsstring>
        <name>GetKey</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>posIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="172" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ae0979826234acb4fa51814dde6aad768" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void&lt; V &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetValue</definition>
        <argsstring>(IteratorData &amp;posIt)</argsstring>
        <name>GetValue</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>posIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="179" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ac5b18b9431d88c25481a61e3e3fe1312" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_void&lt; V &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_bvr_1_1_meta_1_1_variant" kindref="compound">Variant</ref></type>
        <definition>static Variant Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::GetValue</definition>
        <argsstring>(IteratorData &amp;it)</argsstring>
        <name>GetValue</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="186" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a545843e84a633d99b2da4db5c3ebedff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_void&lt; V &gt;::value &amp;&amp;!std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKey</definition>
        <argsstring>(void *pContainer, Argument &amp;key, IteratorData &amp;outIt)</argsstring>
        <name>InsertKey</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="194" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="194" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a545843e84a633d99b2da4db5c3ebedff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void&lt; V &gt;::value||std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKey</definition>
        <argsstring>(void *pContainer, Argument &amp;key, IteratorData &amp;outIt)</argsstring>
        <name>InsertKey</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="211" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a41c8532fdde3698079312071b7d31ae7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void&lt; V &gt;::value &amp;&amp;!std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKeyValue</definition>
        <argsstring>(void *pContainer, Argument &amp;key, Argument &amp;value, IteratorData &amp;outIt)</argsstring>
        <name>InsertKeyValue</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="221" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="221" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a41c8532fdde3698079312071b7d31ae7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename V</type>
            <defval>ValueT</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_void&lt; V &gt;::value||std::is_const&lt; ConstT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::InsertKeyValue</definition>
        <argsstring>(void *pContainer, Argument &amp;key, Argument &amp;value, IteratorData &amp;outIt)</argsstring>
        <name>InsertKeyValue</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="240" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a1be8a93fc5415f42bc8d47ed5ab46fa2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::find</definition>
        <argsstring>(void *pContainer, Argument &amp;key, IteratorData &amp;outIt)</argsstring>
        <name>find</name>
        <param>
          <type>void *</type>
          <declname>pContainer</declname>
        </param>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>IteratorData &amp;</type>
          <declname>outIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="246" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="246" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a6acd89bc776cc38c3daf6e8508208adc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;::advance</definition>
        <argsstring>(IteratorData &amp;it, std::ptrdiff_t index)</argsstring>
        <name>advance</name>
        <param>
          <type>IteratorData &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="256" column="21" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>IteratorBinderBase&lt; std::conditional_t&lt;                  std::is_const&lt;ConstT&gt;::value,                  typename AssociativeContainerBinder&lt;T&gt;::CIteratorT,                  typename AssociativeContainerBinder&lt;T&gt;::IteratorT&gt;  &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Bvr::Meta::Detail::AssociativeContainerBinderWrapper&lt; T, ConstT, Tp &gt;</label>
        <link refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>IteratorBinderBase&lt; std::conditional_t&lt;                  std::is_const&lt;ConstT&gt;::value,                  typename AssociativeContainerBinder&lt;T&gt;::CIteratorT,                  typename AssociativeContainerBinder&lt;T&gt;::IteratorT&gt;  &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" line="135" column="5" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/AssociativeContainerBinder.hpp" bodystart="135" bodyend="259"/>
    <listofallmembers>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a6acd89bc776cc38c3daf6e8508208adc" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>advance</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1aa52cbfe57f9a12498b2e28d3b73e276d" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>Base</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a562662d4b33071336419cf60c202aad0" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>begin</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ab2675ef4176b928f92f1804ef417641c" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>CIteratorT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a56b7812d1b227ff7a6758003fc207aca" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>clear</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a809bf4290585940793cb31757a19024f" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>ContainerT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1aedefa63af35b2711d88c4855e1acc3bd" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>empty</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a246320760b551c8f69078507d9599fa4" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>end</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1aeba756b83bae542f685303fccf31136f" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>erase</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a1be8a93fc5415f42bc8d47ed5ab46fa2" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>find</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ad490712e9dd5cbbd35e9a111c876577d" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetContainer</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a2a68b04c651447ff909264b1bf160f80" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ae0979826234acb4fa51814dde6aad768" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ac5b18b9431d88c25481a61e3e3fe1312" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>GetValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a545843e84a633d99b2da4db5c3ebedff" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a545843e84a633d99b2da4db5c3ebedff" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKey</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a41c8532fdde3698079312071b7d31ae7" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKeyValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a41c8532fdde3698079312071b7d31ae7" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>InsertKeyValue</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a07fc278f5c525c80c41629c9aee29b67" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>IteratorBinderT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a4811e3a332f3a2f0038598640e352ed4" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>IteratorT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1acd05fe16358839bdf245aabf0e35807e" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>KeyT</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1a958c39a9eb6ce4cf6628a9b04b247440" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>size</name></member>
      <member refid="struct_bvr_1_1_meta_1_1_detail_1_1_associative_container_binder_wrapper_1ae20a4c24a16e2da9b17c852d7f8eeeb5" prot="public" virt="non-virtual"><scope>Bvr::Meta::Detail::AssociativeContainerBinderWrapper</scope><name>ValueT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
