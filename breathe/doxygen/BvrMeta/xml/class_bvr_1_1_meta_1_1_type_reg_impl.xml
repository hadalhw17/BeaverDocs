<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_bvr_1_1_meta_1_1_type_reg_impl" kind="class" language="C++" prot="public">
    <compoundname>Bvr::Meta::TypeRegImpl</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a2ac3c2c296f5c6c48ec56e1389f66778" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_bvr_1_1_meta_1_1_local_reg_sink" kindref="compound">LocalRegSink</ref> * &gt;</type>
        <definition>std::vector&lt;LocalRegSink*&gt; Bvr::Meta::TypeRegImpl::m_localRegSinks</definition>
        <argsstring></argsstring>
        <name>m_localRegSinks</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_localRegSinks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="46" column="34" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a7d6fdafcce75d16b28728cb3b4fd27ff" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>std::vector&lt;TypeData*&gt; Bvr::Meta::TypeRegImpl::m_typeDataList</definition>
        <argsstring></argsstring>
        <name>m_typeDataList</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_typeDataList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="47" column="38" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a2978feb218c34fea6c7863cae34490af" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> * &gt;</type>
        <definition>std::vector&lt;PropertyWrapperBase*&gt; Bvr::Meta::TypeRegImpl::m_propertyList</definition>
        <argsstring></argsstring>
        <name>m_propertyList</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_propertyList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="48" column="27" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1afa39465197de2c7653d9cc842ca593d9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> * &gt;</type>
        <definition>std::vector&lt;MethodWrapperBase*&gt; Bvr::Meta::TypeRegImpl::m_methodList</definition>
        <argsstring></argsstring>
        <name>m_methodList</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_methodList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="49" column="29" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1afa18b12b2d72f71797a96ca8d64b4f65" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> * &gt;</type>
        <definition>std::vector&lt;ConversionMethodBase*&gt; Bvr::Meta::TypeRegImpl::m_typeConversions</definition>
        <argsstring></argsstring>
        <name>m_typeConversions</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_typeConversions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="50" column="26" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1afaeb347239161f56ce81920c381e3314" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> * &gt;</type>
        <definition>std::vector&lt;Detail::EnumWrapperBase*&gt; Bvr::Meta::TypeRegImpl::m_enumList</definition>
        <argsstring></argsstring>
        <name>m_enumList</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_enumList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="51" column="23" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a8a12b878af8c3b72ad7e266644319a3f" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; HashedString, <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>std::unordered_map&lt;HashedString, TypeData*&gt; Bvr::Meta::TypeRegImpl::m_typeNameLookup</definition>
        <argsstring></argsstring>
        <name>m_typeNameLookup</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_typeNameLookup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="52" column="24" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a65976b0e0434f056c9fb5674b5edfda4" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref>, <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>std::unordered_map&lt;TypeInfo, TypeData*&gt; Bvr::Meta::TypeRegImpl::m_typeInfoLookup</definition>
        <argsstring></argsstring>
        <name>m_typeInfoLookup</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::m_typeInfoLookup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="53" column="28" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a601c78a60b8ee9ca577121a25ff28dc4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Bind</definition>
        <argsstring></argsstring>
        <name>Bind</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Bind</qualifiedname>
        <param>
          <type>Bind</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="55" column="30" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a7410649bd4a495cbddc7cb9eafa76322" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RegistryReplayer</definition>
        <argsstring></argsstring>
        <name>RegistryReplayer</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegistryReplayer</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_registry_replayer" kindref="compound">RegistryReplayer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="57" column="18" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a712f84bdb313fe0eee903f8cfeb39665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Bvr::Meta::TypeRegImpl::TypeRegImpl</definition>
        <argsstring>()=default</argsstring>
        <name>TypeRegImpl</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::TypeRegImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="10" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a7bfff52bc18cfd5d22f5f9fe88587328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Bvr::Meta::TypeRegImpl::~TypeRegImpl</definition>
        <argsstring>()=default</argsstring>
        <name>~TypeRegImpl</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::~TypeRegImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="11" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a4da32440f89de93a1867deb98339e7b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegImpl::GetTypeByName</definition>
        <argsstring>(std::string_view name) const</argsstring>
        <name>GetTypeByName</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::GetTypeByName</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="15" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a1082164086015e0340ccf1838830bca1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegImpl::GetTypeByHash</definition>
        <argsstring>(const std::uint64_t hash) const</argsstring>
        <name>GetTypeByHash</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::GetTypeByHash</qualifiedname>
        <param>
          <type>const std::uint64_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="16" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1aa734577287554a9b2d295135d74e67a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegImpl::GetTypeByTypeInfo</definition>
        <argsstring>(TypeInfo info) const</argsstring>
        <name>GetTypeByTypeInfo</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::GetTypeByTypeInfo</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_type_info" kindref="compound">TypeInfo</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="17" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1af7aefcadb769aa3437269c800bfd8e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
        <definition>TypeData * Bvr::Meta::TypeRegImpl::RegisterTypeData</definition>
        <argsstring>(TypeData *typeData)</argsstring>
        <name>RegisterTypeData</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterTypeData</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>typeData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="19" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1aef062b13270c8c94b75b9bedb3840dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::TypeRegImpl::RegisterProperty</definition>
        <argsstring>(PropertyWrapperBase *propertyData)</argsstring>
        <name>RegisterProperty</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterProperty</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> *</type>
          <declname>propertyData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="20" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1abed6535c11aca81a2da72f3ec0036fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::TypeRegImpl::RegisterMethod</definition>
        <argsstring>(MethodWrapperBase *methData)</argsstring>
        <name>RegisterMethod</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterMethod</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> *</type>
          <declname>methData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="21" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1ae3317f834e0fd7ae5046a8c9b4671815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::TypeRegImpl::RegisterEnum</definition>
        <argsstring>(Detail::EnumWrapperBase *enumData)</argsstring>
        <name>RegisterEnum</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterEnum</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> *</type>
          <declname>enumData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="22" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a3b1ca63621b1ce2af31faaae19334c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bvr::Meta::TypeRegImpl::RegisterConversionMethod</definition>
        <argsstring>(ConversionMethodBase *conv)</argsstring>
        <name>RegisterConversionMethod</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterConversionMethod</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="23" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a639d6e77f4f4dca2b8a6d451995a3731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::UnregisterTypeData</definition>
        <argsstring>(TypeData *typeData)</argsstring>
        <name>UnregisterTypeData</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::UnregisterTypeData</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>typeData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="25" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a33ae98a792cc8eafac8f5ba686545e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::UnregisterProperty</definition>
        <argsstring>(PropertyWrapperBase *prop)</argsstring>
        <name>UnregisterProperty</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::UnregisterProperty</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> *</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="26" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1ad0bd9a76b5f6fab2ba6a08ce88887cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::UnregisterMethod</definition>
        <argsstring>(MethodWrapperBase *meth)</argsstring>
        <name>UnregisterMethod</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::UnregisterMethod</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="27" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1ad091e870717c95bd7b69b71e033a147f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::UnregisterEnum</definition>
        <argsstring>(Detail::EnumWrapperBase *enumData)</argsstring>
        <name>UnregisterEnum</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::UnregisterEnum</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> *</type>
          <declname>enumData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="28" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a98bb445048339e7405ae99d485ec1e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::UnregisterConversionMethod</definition>
        <argsstring>(ConversionMethodBase *conv)</argsstring>
        <name>UnregisterConversionMethod</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::UnregisterConversionMethod</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="29" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a3715a7d8ad903129c99937c9f1db22a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::RegisterAlias</definition>
        <argsstring>(std::string_view name, TypeData *pType)</argsstring>
        <name>RegisterAlias</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterAlias</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="31" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a9cc024d9cb049d549141a52a475c8816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::RegisterSink</definition>
        <argsstring>(LocalRegSink *sink)</argsstring>
        <name>RegisterSink</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::RegisterSink</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_local_reg_sink" kindref="compound">LocalRegSink</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="33" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a887be94456b6b21d88f10d6cf8393223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Bvr::Meta::TypeRegImpl::UnregisterSink</definition>
        <argsstring>(LocalRegSink *sink)</argsstring>
        <name>UnregisterSink</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::UnregisterSink</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_local_reg_sink" kindref="compound">LocalRegSink</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="34" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a456025124d3efe8013d55fc3997f9079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Span&lt; <ref refid="class_bvr_1_1_meta_1_1_local_reg_sink" kindref="compound">LocalRegSink</ref> * &gt;</type>
        <definition>Span&lt; LocalRegSink * &gt; Bvr::Meta::TypeRegImpl::GetSinks</definition>
        <argsstring>()</argsstring>
        <name>GetSinks</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::GetSinks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="35" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a978c6802b8c9cb6bb02b172b4a86a80f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Span&lt; <ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> * &gt;</type>
        <definition>Span&lt; TypeData * &gt; Bvr::Meta::TypeRegImpl::GetAllTypes</definition>
        <argsstring>()</argsstring>
        <name>GetAllTypes</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::GetAllTypes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="36" column="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a97a64e11f9cf02c5c5f3d4bd8298d382" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type_reg_impl" kindref="compound">TypeRegImpl</ref> &amp;</type>
        <definition>static TypeRegImpl &amp; Bvr::Meta::TypeRegImpl::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="13" column="24"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1ab64d289ba409346c95a6abc7523c5291" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> *</type>
        <definition>Detail::EnumWrapperBase * Bvr::Meta::TypeRegImpl::Find</definition>
        <argsstring>(Detail::EnumWrapperBase *pEnum)</argsstring>
        <name>Find</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Find</qualifiedname>
        <param>
          <type><ref refid="class_bvr_1_1_meta_1_1_detail_1_1_enum_wrapper_base" kindref="compound">Detail::EnumWrapperBase</ref> *</type>
          <declname>pEnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="39" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1abe3ac9b205e7ec6f9fe3c938af3331d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
        <definition>ConversionMethodBase * Bvr::Meta::TypeRegImpl::Find</definition>
        <argsstring>(ConversionMethodBase *pConv)</argsstring>
        <name>Find</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Find</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_conversion_method_base" kindref="compound">ConversionMethodBase</ref> *</type>
          <declname>pConv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="40" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a0b44174c25464c2d3f9fa05e9bcc88a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_property" kindref="compound">Property</ref></type>
        <definition>Property Bvr::Meta::TypeRegImpl::Find</definition>
        <argsstring>(PropertyWrapperBase *pProp)</argsstring>
        <name>Find</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Find</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_property_wrapper_base" kindref="compound">PropertyWrapperBase</ref> *</type>
          <declname>pProp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="41" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a56ad03a5c4beedb952f2335bff972106" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_method" kindref="compound">Method</ref></type>
        <definition>Method Bvr::Meta::TypeRegImpl::Find</definition>
        <argsstring>(MethodWrapperBase *pMeth)</argsstring>
        <name>Find</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Find</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_method_wrapper_base" kindref="compound">MethodWrapperBase</ref> *</type>
          <declname>pMeth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="42" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_bvr_1_1_meta_1_1_type_reg_impl_1a36e98b748c7a0d2040625836edbca792" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bvr_1_1_meta_1_1_type" kindref="compound">Type</ref></type>
        <definition>Type Bvr::Meta::TypeRegImpl::Find</definition>
        <argsstring>(TypeData *pType)</argsstring>
        <name>Find</name>
        <qualifiedname>Bvr::Meta::TypeRegImpl::Find</qualifiedname>
        <param>
          <type><ref refid="struct_bvr_1_1_meta_1_1_type_data" kindref="compound">TypeData</ref> *</type>
          <declname>pType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="43" column="30"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" line="8" column="1" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrCommon/Meta/TypeRegImpl.hpp" bodystart="8" bodyend="60"/>
    <listofallmembers>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a601c78a60b8ee9ca577121a25ff28dc4" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Bind</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1ab64d289ba409346c95a6abc7523c5291" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Find</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1abe3ac9b205e7ec6f9fe3c938af3331d2" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Find</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a0b44174c25464c2d3f9fa05e9bcc88a7" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Find</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a56ad03a5c4beedb952f2335bff972106" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Find</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a36e98b748c7a0d2040625836edbca792" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Find</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a97a64e11f9cf02c5c5f3d4bd8298d382" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>Get</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a978c6802b8c9cb6bb02b172b4a86a80f" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>GetAllTypes</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a456025124d3efe8013d55fc3997f9079" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>GetSinks</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a1082164086015e0340ccf1838830bca1" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>GetTypeByHash</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a4da32440f89de93a1867deb98339e7b1" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>GetTypeByName</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1aa734577287554a9b2d295135d74e67a3" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>GetTypeByTypeInfo</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1afaeb347239161f56ce81920c381e3314" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_enumList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a2ac3c2c296f5c6c48ec56e1389f66778" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_localRegSinks</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1afa39465197de2c7653d9cc842ca593d9" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_methodList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a2978feb218c34fea6c7863cae34490af" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_propertyList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1afa18b12b2d72f71797a96ca8d64b4f65" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_typeConversions</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a7d6fdafcce75d16b28728cb3b4fd27ff" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_typeDataList</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a65976b0e0434f056c9fb5674b5edfda4" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_typeInfoLookup</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a8a12b878af8c3b72ad7e266644319a3f" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>m_typeNameLookup</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a3715a7d8ad903129c99937c9f1db22a9" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterAlias</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a3b1ca63621b1ce2af31faaae19334c70" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1ae3317f834e0fd7ae5046a8c9b4671815" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1abed6535c11aca81a2da72f3ec0036fef" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1aef062b13270c8c94b75b9bedb3840dfa" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a9cc024d9cb049d549141a52a475c8816" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterSink</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1af7aefcadb769aa3437269c800bfd8e5f" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegisterTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a7410649bd4a495cbddc7cb9eafa76322" prot="private" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>RegistryReplayer</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a712f84bdb313fe0eee903f8cfeb39665" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>TypeRegImpl</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a98bb445048339e7405ae99d485ec1e39" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>UnregisterConversionMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1ad091e870717c95bd7b69b71e033a147f" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>UnregisterEnum</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1ad0bd9a76b5f6fab2ba6a08ce88887cb8" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>UnregisterMethod</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a33ae98a792cc8eafac8f5ba686545e0b" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>UnregisterProperty</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a887be94456b6b21d88f10d6cf8393223" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>UnregisterSink</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a639d6e77f4f4dca2b8a6d451995a3731" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>UnregisterTypeData</name></member>
      <member refid="class_bvr_1_1_meta_1_1_type_reg_impl_1a7bfff52bc18cfd5d22f5f9fe88587328" prot="public" virt="non-virtual"><scope>Bvr::Meta::TypeRegImpl</scope><name>~TypeRegImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
