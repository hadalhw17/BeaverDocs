<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_ear_clipper_8hpp" kind="file" language="C++">
    <compoundname>EarClipper.hpp</compoundname>
    <includes refid="_math_types_internal_8hpp" local="yes">MathTypesInternal.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>MathTypesInternal.hpp</label>
        <link refid="_math_types_internal_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>BvrMath/BvrMath.hpp</label>
      </node>
      <node id="4">
        <label>glm/gtx/matrix_transform_2d.hpp</label>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrSVG/EarClipper.hpp</label>
        <link refid="_ear_clipper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_bvr_1_1_s_v_g_1_1_brush_base" prot="public">Bvr::SVG::BrushBase</innerclass>
    <innerclass refid="struct_bvr_1_1_s_v_g_1_1_ear_clipper" prot="public">Bvr::SVG::EarClipper</innerclass>
    <innerclass refid="struct_bvr_1_1_s_v_g_1_1_stroke_brush" prot="public">Bvr::SVG::StrokeBrush</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_s_v_g">Bvr::SVG</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MathTypesInternal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_bvr_1_1_s_v_g" kindref="compound">Bvr::SVG</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal">constexpr<sp/>uint32<sp/>TessMult<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">constexpr<sp/>uint32<sp/>PointsPerCircle<sp/>=<sp/>36;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">constexpr<sp/>uint32<sp/>PointsPerCurve<sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">constexpr<sp/>uint32<sp/>RoundCapsTess<sp/><sp/><sp/>=<sp/>PointsPerCircle<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>EStrokeLineCap<sp/>:<sp/>uint32;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="struct_bvr_1_1_s_v_g_1_1_brush_base" refkind="compound"><highlight class="normal">struct<sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref>(std::span&lt;Bvr::float2&gt;<sp/>p,<sp/>std::span&lt;Bvr::float2&gt;<sp/>tc,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;Bvr::float4&gt;<sp/>col,<sp/>std::span&lt;uint32&gt;<sp/>idx,<sp/>uint32&amp;<sp/>vtxIdx,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32&amp;<sp/>idxIdx)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>PosIt{p},<sp/>TcIt{tc},<sp/>ColIt{col},<sp/>IdxIt{idx},<sp/>VtxIdx{vtxIdx},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdxIdx{idxIdx}<sp/>{}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::span&lt;Bvr::float2&gt;<sp/>PosIt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::span&lt;Bvr::float2&gt;<sp/>TcIt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::span&lt;Bvr::float4&gt;<sp/>ColIt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::span&lt;uint32&gt;<sp/><sp/><sp/><sp/><sp/><sp/>IdxIt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VtxIdx;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdxIdx;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="struct_bvr_1_1_s_v_g_1_1_ear_clipper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_s_v_g_1_1_ear_clipper" kindref="compound">EarClipper</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_ear_clipper" kindref="compound">EarClipper</ref>(std::span&lt;Bvr::float2&gt;<sp/>p,<sp/>std::span&lt;Bvr::float2&gt;<sp/>tc,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;Bvr::float4&gt;<sp/>col,<sp/>std::span&lt;uint32&gt;<sp/>idx,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32&amp;<sp/>vtxIdx,<sp/>uint32&amp;<sp/>idxIdx,<sp/>std::vector&lt;float2&gt;&amp;<sp/>points,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SColourF<sp/>fillCol)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref>(p,<sp/>tc,<sp/>col,<sp/>idx,<sp/>vtxIdx,<sp/>idxIdx),<sp/>Points{points},</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour{fillCol}<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsEar(std::span&lt;uint32<sp/>const&gt;<sp/>aliveVerts,<sp/>uint32<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureCounterClockwise();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;uint32,<sp/>uint32&gt;<sp/>Process();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float2&gt;&amp;<sp/>Points;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>SColourF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="struct_bvr_1_1_s_v_g_1_1_stroke_brush" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_s_v_g_1_1_stroke_brush" kindref="compound">StrokeBrush</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_stroke_brush" kindref="compound">StrokeBrush</ref>(std::span&lt;Bvr::float2&gt;<sp/>p,<sp/>std::span&lt;Bvr::float2&gt;<sp/>tc,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;Bvr::float4&gt;<sp/>col,<sp/>std::span&lt;uint32&gt;<sp/>idx,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32&amp;<sp/>vtxIdx,<sp/>uint32&amp;<sp/>idxIdx,<sp/>std::vector&lt;float2&gt;&amp;<sp/>points,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SColourF<sp/>strokeCol,<sp/>Float<sp/>strokeWidth,<sp/>EStrokeLineCap<sp/>caps,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isClosed)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_bvr_1_1_s_v_g_1_1_brush_base" kindref="compound">BrushBase</ref>(p,<sp/>tc,<sp/>col,<sp/>idx,<sp/>vtxIdx,<sp/>idxIdx),<sp/>Points{points},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour{strokeCol},<sp/>StrokeWidth{strokeWidth},<sp/>LineCap{caps},</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsClosed{isClosed}<sp/>{}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;uint32,<sp/>uint32&gt;<sp/>Process();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawCaps_Square(float2<sp/>from,<sp/>float2<sp/>to,<sp/>uint32&amp;<sp/>vtCount,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32&amp;<sp/>idxCount);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawCaps_Round(float2<sp/>from,<sp/>float2<sp/>to,<sp/>uint32&amp;<sp/>vtCount,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32&amp;<sp/>idxCount);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawCaps(float2<sp/>from,<sp/>float2<sp/>to,<sp/>uint32&amp;<sp/>vtCount,<sp/>uint32&amp;<sp/>idxCount);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float2&gt;&amp;<sp/>Points;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>SColourF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Float<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StrokeWidth;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>EStrokeLineCap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LineCap;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsClosed;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::SVG</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrSVG/EarClipper.hpp"/>
  </compounddef>
</doxygen>
