<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_vulkan_utils_8hpp" kind="file" language="C++">
    <compoundname>VulkanUtils.hpp</compoundname>
    <includes local="no">volk/volk.h</includes>
    <includes local="yes">BvrFormats.hpp</includes>
    <includes local="yes">CommonShaders.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp</label>
        <link refid="_vulkan_utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>BvrFormats.hpp</label>
      </node>
      <node id="4">
        <label>CommonShaders.hpp</label>
      </node>
      <node id="2">
        <label>volk/volk.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_vk_1_1_p_next_chainer" prot="public">Bvr::Renderer::Vk::PNextChainer</innerclass>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_vk_1_1_p_next_chainer_1_1_header" prot="private">Bvr::Renderer::Vk::PNextChainer::Header</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_renderer">Bvr::Renderer</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_renderer_1_1_vk">Bvr::Renderer::Vk</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="_vulkan_utils_8hpp_1a562c34c24c470921b656319e4770d520" prot="public" static="no">
        <name>VULKAN_ALLOW_DEBUGGING</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="12" column="14" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_utils_8hpp_1a85a23631965b57ebf6e3e7fad1a15888" prot="public" static="no">
        <name>VK_CHECK</name>
        <param><defname>expr</defname></param>
        <initializer>    if (VkResult res_u_lt_ = expr; res_u_lt_ != VK_SUCCESS)                    \
    Bvr::Renderer::Vk::ResultFail(res_u_lt_, #expr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="15" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_utils_8hpp_1aeca696683ffad73d7c37904919c5996a" prot="public" static="no">
        <name>ALIAS_CONSTANT</name>
        <param><defname>name</defname></param>
        <initializer>inline constexpr auto name = ::name;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="22" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_utils_8hpp_1a779aab60b62494d7266986a5e8a82472" prot="public" static="no">
        <name>ALIAS_ACCESS</name>
        <param><defname>name</defname></param>
        <initializer>ALIAS_CONSTANT(VK_ACCESS_2_##name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="23" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_utils_8hpp_1aa0753110287256c56ae1cd626182b97b" prot="public" static="no">
        <name>ALIAS_STAGE</name>
        <param><defname>name</defname></param>
        <initializer>ALIAS_CONSTANT(VK_PIPELINE_STAGE_2_##name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="41" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_utils_8hpp_1a97a2256b7d0a761e040309f655ab1994" prot="public" static="no">
        <name>USE_NATIVE_HANDLES</name>
        <initializer>VK_USE_64_BIT_PTR_DEFINES</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="63" column="9" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_utils_8hpp_1aa0e27d57583af7124f100712a9af7f1b" prot="public" static="no">
        <name>DECLARE_VK_HANDLE</name>
        <param><defname>object</defname></param>
        <initializer>        struct object {                                                        \
            inline object(Vk##object handle = VK_NULL_HANDLE)                  \
                : Handle(handle) {}                                            \
            inline operator Vk##object() const {                               \
                return Handle;                                                 \
            }                                                                  \
            inline operator bool() const {                                     \
                return Handle != VK_NULL_HANDLE;                               \
            }                                                                  \
            inline Vk##object* operator&amp;() {                                   \
                return &amp;Handle;                                                \
            }                                                                  \
            inline const Vk##object* operator&amp;() const {                       \
                return &amp;Handle;                                                \
            }                                                                  \
            inline bool operator==(Vk##object b) const {                       \
                return Handle == b;                                            \
            }                                                                  \
            inline bool operator!=(Vk##object b) const {                       \
                return Handle != b;                                            \
            }                                                                  \
            Vk##object Handle;                                                 \
        };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" line="70" column="13" bodyfile="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp" bodystart="70" bodyend="93"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;volk/volk.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&quot;BvrFormats.hpp&quot;;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&quot;CommonShaders.hpp&quot;;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(RELEASE)<sp/>&amp;&amp;<sp/>defined(VK_EXT_debug_utils)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>VULKAN_ALLOW_DEBUGGING<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>VULKAN_ALLOW_DEBUGGING<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VK_CHECK(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(VkResult<sp/>res_u_lt_<sp/>=<sp/>expr;<sp/>res_u_lt_<sp/>!=<sp/>VK_SUCCESS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Bvr::Renderer::Vk::ResultFail(res_u_lt_,<sp/>#expr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr::Renderer<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SViewport;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SRect;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIAS_CONSTANT(name)<sp/>inline<sp/>constexpr<sp/>auto<sp/>name<sp/>=<sp/>::name;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIAS_ACCESS(name)<sp/><sp/><sp/>ALIAS_CONSTANT(VK_ACCESS_2_##name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">ALIAS_CONSTANT(VK_ACCESS_2_NONE);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">ALIAS_ACCESS(INDEX_READ_BIT);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">ALIAS_ACCESS(MEMORY_READ_BIT);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">ALIAS_ACCESS(SHADER_READ_BIT);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">ALIAS_ACCESS(SHADER_WRITE_BIT);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">ALIAS_ACCESS(MEMORY_WRITE_BIT);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">ALIAS_ACCESS(UNIFORM_READ_BIT);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">ALIAS_ACCESS(TRANSFER_READ_BIT);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">ALIAS_ACCESS(TRANSFER_WRITE_BIT);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">ALIAS_ACCESS(VERTEX_ATTRIBUTE_READ_BIT);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">ALIAS_ACCESS(COLOR_ATTACHMENT_READ_BIT);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">ALIAS_ACCESS(COLOR_ATTACHMENT_WRITE_BIT);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">ALIAS_ACCESS(DEPTH_STENCIL_ATTACHMENT_READ_BIT);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">ALIAS_ACCESS(DEPTH_STENCIL_ATTACHMENT_WRITE_BIT);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ALIAS_ACCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIAS_STAGE(name)<sp/>ALIAS_CONSTANT(VK_PIPELINE_STAGE_2_##name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">ALIAS_STAGE(NONE);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">ALIAS_STAGE(COPY_BIT);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">ALIAS_STAGE(TRANSFER_BIT);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">ALIAS_STAGE(TOP_OF_PIPE_BIT);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">ALIAS_STAGE(VERTEX_INPUT_BIT);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">ALIAS_STAGE(ALL_GRAPHICS_BIT);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">ALIAS_STAGE(VERTEX_SHADER_BIT);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">ALIAS_STAGE(DRAW_INDIRECT_BIT);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">ALIAS_STAGE(BOTTOM_OF_PIPE_BIT);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">ALIAS_STAGE(COMPUTE_SHADER_BIT);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">ALIAS_STAGE(FRAGMENT_SHADER_BIT);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">ALIAS_STAGE(LATE_FRAGMENT_TESTS_BIT);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">ALIAS_STAGE(EARLY_FRAGMENT_TESTS_BIT);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">ALIAS_STAGE(VERTEX_ATTRIBUTE_INPUT_BIT);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">ALIAS_STAGE(COLOR_ATTACHMENT_OUTPUT_BIT);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ALIAS_STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ALIAS_CONSTANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::Renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr::Renderer::Vk<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_NATIVE_HANDLES<sp/>VK_USE_64_BIT_PTR_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_NATIVE_HANDLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TSetName<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>DECLARE_VK_HANDLE(object)<sp/>using<sp/>object<sp/>=<sp/>Vk##object;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TSetName<sp/>=<sp/>uint64;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>DECLARE_VK_HANDLE(object)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>object<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>object(Vk##object<sp/>handle<sp/>=<sp/>VK_NULL_HANDLE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Handle(handle)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>operator<sp/>Vk##object()<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Handle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>operator<sp/>bool()<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Handle<sp/>!=<sp/>VK_NULL_HANDLE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>Vk##object*<sp/>operator&amp;()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&amp;Handle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>const<sp/>Vk##object*<sp/>operator&amp;()<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&amp;Handle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>bool<sp/>operator==(Vk##object<sp/>b)<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Handle<sp/>==<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>bool<sp/>operator!=(Vk##object<sp/>b)<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Handle<sp/>!=<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vk##object<sp/>Handle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">DECLARE_VK_HANDLE(Pipeline);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">DECLARE_VK_HANDLE(PipelineLayout);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">DECLARE_VK_HANDLE(Sampler);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">DECLARE_VK_HANDLE(ImageView);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">DECLARE_VK_HANDLE(BufferView);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">DECLARE_VK_HANDLE(RenderPass);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">DECLARE_VK_HANDLE(Framebuffer);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">DECLARE_VK_HANDLE(SurfaceKHR);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">DECLARE_VK_HANDLE(DescriptorPool);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">DECLARE_VK_HANDLE(AccelerationStructureKHR);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">DECLARE_VK_HANDLE(SwapchainKHR);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DECLARE_VK_HANDLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GetTransitionFlags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EAttachmentState<sp/>eTrans,<sp/>VkImageLayout&amp;<sp/>layout,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkAccessFlags2&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkPipelineStageFlagBits2&amp;<sp/>stage);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">VkBufferUsageFlags<sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EBufferType<sp/>eType);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">VkImageUsageFlags<sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ETextureUsage<sp/>eUsage);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">VkShaderStageFlags<sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EShaderStage<sp/>eStage);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">VkShaderStageFlagBits<sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EShaderType<sp/>eStage);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkResultToString(VkResult<sp/>res);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">VkImageMemoryBarrier2<sp/>BuildImageBarrier(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EAttachmentState<sp/><sp/><sp/>src,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EAttachmentState<sp/><sp/><sp/>dst,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImageAspectFlags<sp/>aspect);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">VkImageLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EAttachmentState<sp/>eState);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">EAttachmentState<sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImageLayout<sp/>eLayout);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STextureFormat<sp/>format);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">STextureFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormat<sp/>format);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">VkImageType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ETextureDim<sp/>type);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">VkViewport<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SViewport&amp;<sp/>viewport);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">VkRect2D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SRect&amp;<sp/>viewport);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TPushLabelFn<sp/><sp/>=<sp/>void<sp/>(*)(VkCommandBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TPopLabelFn<sp/><sp/><sp/>=<sp/>void<sp/>(*)(VkCommandBuffer);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TSetObjNameFn<sp/>=<sp/>void<sp/>(*)(VkDevice,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>TSetName,<sp/>VkObjectType);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TPushLabelFn<sp/><sp/>PushCmdLabel;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TPopLabelFn<sp/><sp/><sp/>PopLabel;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TSetObjNameFn<sp/>SetObjectName;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUpDebugFunctions(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResultFail(VkResult<sp/>res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pExpression,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doBreak<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CmdPipelineBarrier2(VkCommandBuffer<sp/>cmd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkDependencyInfo&amp;<sp/>depInfo);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="struct_bvr_1_1_renderer_1_1_vk_1_1_p_next_chainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_vk_1_1_p_next_chainer" kindref="compound">PNextChainer</ref><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_vk_1_1_p_next_chainer" kindref="compound">PNextChainer</ref>(T&amp;<sp/>head)<sp/>:<sp/>Head{&amp;head},<sp/>Current{&amp;head.pNext}<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetCurrentToLast();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_vk_1_1_p_next_chainer" kindref="compound">PNextChainer</ref>&amp;<sp/>Append(T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Append(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Header*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;val));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Remove(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pVal);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Header<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkStructureType<sp/>type;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pNext;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetCurrentToLast();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Append(Header*<sp/>val);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/>Head<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>Current<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::Renderer::Vk</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Private/DeviceLayer/VulkanUtils.hpp"/>
  </compounddef>
</doxygen>
