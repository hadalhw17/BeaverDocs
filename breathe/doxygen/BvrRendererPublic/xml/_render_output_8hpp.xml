<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_render_output_8hpp" kind="file" language="C++">
    <compoundname>RenderOutput.hpp</compoundname>
    <includes local="no">std</includes>
    <includes refid="_render_info_8hpp" local="no">BvrRenderer/RenderInfo.hpp</includes>
    <includes local="no">Utils/Span.hpp</includes>
    <includes local="no">IO/AssetHandle.hpp</includes>
    <incdepgraph>
      <node id="6">
        <label>BvrFormats.hpp</label>
        <link refid="_bvr_formats_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>CommonRenderer.hpp</label>
        <link refid="_common_renderer_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>BvrRenderer/CommonShaders.hpp</label>
        <link refid="_common_shaders_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>BvrRenderer/RenderInfo.hpp</label>
        <link refid="_render_info_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Public/BvrRenderer/RenderOutput.hpp</label>
        <link refid="_render_output_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Bvr.Math</label>
      </node>
      <node id="11">
        <label>BvrCommon/BaseTypes.hpp</label>
      </node>
      <node id="15">
        <label>BvrCommon/Handle.hpp</label>
      </node>
      <node id="7">
        <label>BvrCommon/TextureFormats.hpp</label>
      </node>
      <node id="13">
        <label>BvrCommon/Utils.hpp</label>
      </node>
      <node id="16">
        <label>BvrWorld/WorldDefs.hpp</label>
      </node>
      <node id="14">
        <label>Hash.h</label>
      </node>
      <node id="18">
        <label>IO/AssetHandle.hpp</label>
      </node>
      <node id="8">
        <label>Meta/Enums.hpp</label>
      </node>
      <node id="10">
        <label>Platform/CompilerSettings.hpp</label>
      </node>
      <node id="12">
        <label>TextureFormats.hpp</label>
      </node>
      <node id="17">
        <label>Utils/Span.hpp</label>
      </node>
      <node id="2">
        <label>std</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_render_layer" prot="public">Bvr::Renderer::RenderLayer</innerclass>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_visible_entities" prot="public">Bvr::Renderer::VisibleEntities</innerclass>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_s_render_target" prot="public">Bvr::Renderer::SRenderTarget</innerclass>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_output_readback" prot="public">Bvr::Renderer::OutputReadback</innerclass>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_on_graph_executed" prot="public">Bvr::Renderer::OnGraphExecuted</innerclass>
    <innerclass refid="struct_bvr_1_1_renderer_1_1_render_output_plugin" prot="public">Bvr::Renderer::RenderOutputPlugin</innerclass>
    <innernamespace refid="namespace_bvr">Bvr</innernamespace>
    <innernamespace refid="namespace_bvr_1_1_renderer">Bvr::Renderer</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;BvrRenderer/RenderInfo.hpp&gt;;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;Utils/Span.hpp&gt;;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>&lt;IO/AssetHandle.hpp&gt;;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>std;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Bvr.Window;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr::Renderer<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CGraphicsPipeline;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="struct_bvr_1_1_renderer_1_1_render_layer" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a4f2b63bec36d14ff8674d395b7520ac8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a4f2b63bec36d14ff8674d395b7520ac8" kindref="member">Default</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>{0};<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="struct_bvr_1_1_renderer_1_1_render_layer_1ac9be913baec201dc4f651519ccad2e80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1ac9be913baec201dc4f651519ccad2e80" kindref="member">All</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>{std::numeric_limits&lt;uint32&gt;::max()};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a39ca4ce94989cc4fca127bc832e797c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a39ca4ce94989cc4fca127bc832e797c0" kindref="member">FromLayer</ref>(uint32<sp/>layer)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/>l{};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.<ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a8edfc0dae6099894469d2878dd7f42f3" kindref="member">SetLayer</ref>(layer);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="struct_bvr_1_1_renderer_1_1_render_layer_1afafb2448d0a3c900caf158f541b41f14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1afafb2448d0a3c900caf158f541b41f14" kindref="member">FromLayers</ref>(Span&lt;uint32<sp/>const&gt;<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/>layer;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer.<ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1af8afb83603909489880717fc75b7cb2d" kindref="member">AddLayers</ref>(layers);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layer;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a8edfc0dae6099894469d2878dd7f42f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>&amp;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a8edfc0dae6099894469d2878dd7f42f3" kindref="member">SetLayer</ref>(uint32<sp/>layer)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>Bit32(layer);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="struct_bvr_1_1_renderer_1_1_render_layer_1ab2f575bfaf7332df20594ec72dfa3249" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>&amp;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1ab2f575bfaf7332df20594ec72dfa3249" kindref="member">AddLayer</ref>(uint32<sp/>layer)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>|=<sp/>Bit32(layer);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="struct_bvr_1_1_renderer_1_1_render_layer_1afeee686eef45e9f29f71c8424cadc939" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>&amp;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1afeee686eef45e9f29f71c8424cadc939" kindref="member">RemoveLayer</ref>(uint32<sp/>layer)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>&amp;=<sp/>~Bit32(layer);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="struct_bvr_1_1_renderer_1_1_render_layer_1af8afb83603909489880717fc75b7cb2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>&amp;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1af8afb83603909489880717fc75b7cb2d" kindref="member">AddLayers</ref>(Span&lt;uint32<sp/>const&gt;<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>:<sp/>layers)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1ab2f575bfaf7332df20594ec72dfa3249" kindref="member">AddLayer</ref>(layer);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a10ea3fa53b870631d3ede969f2f306f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>&amp;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a10ea3fa53b870631d3ede969f2f306f2" kindref="member">RemoveLayers</ref>(Span&lt;uint32<sp/>const&gt;<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>:<sp/>layers)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1afeee686eef45e9f29f71c8424cadc939" kindref="member">RemoveLayer</ref>(layer);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a647c9ab59686695ea3175d4a15ebbafd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a647c9ab59686695ea3175d4a15ebbafd" kindref="member">HasLayer</ref>(uint32<sp/>layer)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Mask<sp/>&amp;<sp/>Bit32(layer))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a93b0f0aa2df8c75bf9b808b4c6db7581" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a93b0f0aa2df8c75bf9b808b4c6db7581" kindref="member">HasAny</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/>layer)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Mask<sp/>&amp;<sp/>layer.Mask)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a0dbef04de7d76e241bdf7302aca5bca3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a0dbef04de7d76e241bdf7302aca5bca3" kindref="member">HasAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref><sp/>layer)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Mask<sp/>&amp;<sp/>layer.Mask)<sp/>==<sp/>layer.Mask;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a0f6e716f10238771e1354e0b4677361d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a0f6e716f10238771e1354e0b4677361d" kindref="member">HasAny</ref>(Span&lt;uint32<sp/>const&gt;<sp/>layers)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>:<sp/>layers)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a647c9ab59686695ea3175d4a15ebbafd" kindref="member">HasLayer</ref>(layer))</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a6abc31df7934a2ad79b8c5e4ca03a050" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a6abc31df7934a2ad79b8c5e4ca03a050" kindref="member">HasAll</ref>(Span&lt;uint32<sp/>const&gt;<sp/>layers)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>:<sp/>layers)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a647c9ab59686695ea3175d4a15ebbafd" kindref="member">HasLayer</ref>(layer))</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="struct_bvr_1_1_renderer_1_1_render_layer_1a66a76ecd6aa0cb959dae87475017e19e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer_1a66a76ecd6aa0cb959dae87475017e19e" kindref="member">IsVisible</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mask<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">RenderLayer</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mask<sp/>==<sp/>other.Mask;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderLayer&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mask<sp/>!=<sp/>other.Mask;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>RenderLayer&amp;<sp/>operator|=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderLayer&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>|=<sp/>other.Mask;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>RenderLayer&amp;<sp/>operator&amp;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderLayer&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>&amp;=<sp/>other.Mask;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>RenderLayer<sp/>operator|(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderLayer&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RenderLayer{Mask<sp/>|<sp/>other.Mask};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>RenderLayer<sp/>operator&amp;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderLayer&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RenderLayer{Mask<sp/>&amp;<sp/>other.Mask};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>Mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="struct_bvr_1_1_renderer_1_1_visible_entities" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_visible_entities" kindref="compound">VisibleEntities</ref><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TEntity&gt;<sp/>Entities;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">//<sp/>Should<sp/>be<sp/>used<sp/>in<sp/>conjunction<sp/>with<sp/>Camera<sp/>to<sp/>render<sp/>from<sp/>ecs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="struct_bvr_1_1_renderer_1_1_s_render_target" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_s_render_target" kindref="compound">SRenderTarget</ref><sp/>{</highlight></codeline>
<codeline lineno="178" refid="struct_bvr_1_1_renderer_1_1_s_render_target_1a180c298189b30456d3d18aaf0e91db71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::variant&lt;Handle&lt;CImage&gt;,<sp/>Bvr::Window::Id&gt;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_s_render_target_1a180c298189b30456d3d18aaf0e91db71" kindref="member">RenderTarget</ref>;</highlight></codeline>
<codeline lineno="180" refid="struct_bvr_1_1_renderer_1_1_s_render_target_1ae84a4a2338ebab0ed203e5c01077bffc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;SViewport&gt;<sp/><ref refid="struct_bvr_1_1_renderer_1_1_s_render_target_1ae84a4a2338ebab0ed203e5c01077bffc" kindref="member">Viewport</ref>{std::nullopt};</highlight></codeline>
<codeline lineno="181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="struct_bvr_1_1_renderer_1_1_output_readback" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_output_readback" kindref="compound">OutputReadback</ref><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TCallback<sp/>=<sp/>std::function&lt;void(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CImage&amp;)&gt;;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>TCallback<sp/>OnReadback;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OneTime<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="struct_bvr_1_1_renderer_1_1_on_graph_executed" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_on_graph_executed" kindref="compound">OnGraphExecuted</ref><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TCallback<sp/>=<sp/>std::function&lt;void(CWorld&amp;)&gt;;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>TCallback<sp/>Callback;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OneTime<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="struct_bvr_1_1_renderer_1_1_render_output_plugin" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_render_output_plugin" kindref="compound">RenderOutputPlugin</ref><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Build(App&amp;<sp/>app);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">};</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr::Renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Bvr<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_s_render_target" kindref="compound">TRenderTarget</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_renderer_1_1_s_render_target" kindref="compound">Renderer::SRenderTarget</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_s_viewport" kindref="compound">TViewport</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_renderer_1_1_s_viewport" kindref="compound">Renderer::SViewport</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">TRenderLayer</ref><sp/>=<sp/><ref refid="struct_bvr_1_1_renderer_1_1_render_layer" kindref="compound">Renderer::RenderLayer</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Bvr</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/BeaverEngine/BeaverEngine/Beaver/Code/BvrRenderer/Public/BvrRenderer/RenderOutput.hpp"/>
  </compounddef>
</doxygen>
